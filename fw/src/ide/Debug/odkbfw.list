
odkbfw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054b4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005698  08005698  00015698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005704  08005704  00020148  2**0
                  CONTENTS
  4 .ARM          00000000  08005704  08005704  00020148  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005704  08005704  00020148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005704  08005704  00015704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005708  08005708  00015708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000148  20000000  0800570c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a8  20000148  08005854  00020148  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008f0  08005854  000208f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012445  00000000  00000000  00020171  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029b4  00000000  00000000  000325b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000eb0  00000000  00000000  00034f70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d68  00000000  00000000  00035e20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018ba2  00000000  00000000  00036b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cbbd  00000000  00000000  0004f72a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00082466  00000000  00000000  0005c2e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000de74d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c2c  00000000  00000000  000de7c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000148 	.word	0x20000148
 8000200:	00000000 	.word	0x00000000
 8000204:	08005680 	.word	0x08005680

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	2000014c 	.word	0x2000014c
 8000220:	08005680 	.word	0x08005680

08000224 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000228:	4b08      	ldr	r3, [pc, #32]	; (800024c <HAL_Init+0x28>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a07      	ldr	r2, [pc, #28]	; (800024c <HAL_Init+0x28>)
 800022e:	f043 0310 	orr.w	r3, r3, #16
 8000232:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000234:	2003      	movs	r0, #3
 8000236:	f000 f945 	bl	80004c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f808 	bl	8000250 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000240:	f004 fd68 	bl	8004d14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000244:	2300      	movs	r3, #0
}
 8000246:	4618      	mov	r0, r3
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40022000 	.word	0x40022000

08000250 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000258:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <HAL_InitTick+0x54>)
 800025a:	681a      	ldr	r2, [r3, #0]
 800025c:	4b12      	ldr	r3, [pc, #72]	; (80002a8 <HAL_InitTick+0x58>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	4619      	mov	r1, r3
 8000262:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000266:	fbb3 f3f1 	udiv	r3, r3, r1
 800026a:	fbb2 f3f3 	udiv	r3, r2, r3
 800026e:	4618      	mov	r0, r3
 8000270:	f000 f95d 	bl	800052e <HAL_SYSTICK_Config>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800027a:	2301      	movs	r3, #1
 800027c:	e00e      	b.n	800029c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	2b0f      	cmp	r3, #15
 8000282:	d80a      	bhi.n	800029a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000284:	2200      	movs	r2, #0
 8000286:	6879      	ldr	r1, [r7, #4]
 8000288:	f04f 30ff 	mov.w	r0, #4294967295
 800028c:	f000 f925 	bl	80004da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000290:	4a06      	ldr	r2, [pc, #24]	; (80002ac <HAL_InitTick+0x5c>)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000296:	2300      	movs	r3, #0
 8000298:	e000      	b.n	800029c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800029a:	2301      	movs	r3, #1
}
 800029c:	4618      	mov	r0, r3
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	200000f4 	.word	0x200000f4
 80002a8:	20000004 	.word	0x20000004
 80002ac:	20000000 	.word	0x20000000

080002b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002b4:	4b05      	ldr	r3, [pc, #20]	; (80002cc <HAL_IncTick+0x1c>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	461a      	mov	r2, r3
 80002ba:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <HAL_IncTick+0x20>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	4413      	add	r3, r2
 80002c0:	4a03      	ldr	r2, [pc, #12]	; (80002d0 <HAL_IncTick+0x20>)
 80002c2:	6013      	str	r3, [r2, #0]
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr
 80002cc:	20000004 	.word	0x20000004
 80002d0:	2000017c 	.word	0x2000017c

080002d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  return uwTick;
 80002d8:	4b02      	ldr	r3, [pc, #8]	; (80002e4 <HAL_GetTick+0x10>)
 80002da:	681b      	ldr	r3, [r3, #0]
}
 80002dc:	4618      	mov	r0, r3
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	2000017c 	.word	0x2000017c

080002e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b084      	sub	sp, #16
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002f0:	f7ff fff0 	bl	80002d4 <HAL_GetTick>
 80002f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000300:	d005      	beq.n	800030e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000302:	4b09      	ldr	r3, [pc, #36]	; (8000328 <HAL_Delay+0x40>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	461a      	mov	r2, r3
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	4413      	add	r3, r2
 800030c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800030e:	bf00      	nop
 8000310:	f7ff ffe0 	bl	80002d4 <HAL_GetTick>
 8000314:	4602      	mov	r2, r0
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	1ad3      	subs	r3, r2, r3
 800031a:	68fa      	ldr	r2, [r7, #12]
 800031c:	429a      	cmp	r2, r3
 800031e:	d8f7      	bhi.n	8000310 <HAL_Delay+0x28>
  {
  }
}
 8000320:	bf00      	nop
 8000322:	3710      	adds	r7, #16
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	20000004 	.word	0x20000004

0800032c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	f003 0307 	and.w	r3, r3, #7
 800033a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800033c:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <__NVIC_SetPriorityGrouping+0x44>)
 800033e:	68db      	ldr	r3, [r3, #12]
 8000340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000342:	68ba      	ldr	r2, [r7, #8]
 8000344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000348:	4013      	ands	r3, r2
 800034a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800035c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800035e:	4a04      	ldr	r2, [pc, #16]	; (8000370 <__NVIC_SetPriorityGrouping+0x44>)
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	60d3      	str	r3, [r2, #12]
}
 8000364:	bf00      	nop
 8000366:	3714      	adds	r7, #20
 8000368:	46bd      	mov	sp, r7
 800036a:	bc80      	pop	{r7}
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	e000ed00 	.word	0xe000ed00

08000374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000378:	4b04      	ldr	r3, [pc, #16]	; (800038c <__NVIC_GetPriorityGrouping+0x18>)
 800037a:	68db      	ldr	r3, [r3, #12]
 800037c:	0a1b      	lsrs	r3, r3, #8
 800037e:	f003 0307 	and.w	r3, r3, #7
}
 8000382:	4618      	mov	r0, r3
 8000384:	46bd      	mov	sp, r7
 8000386:	bc80      	pop	{r7}
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	e000ed00 	.word	0xe000ed00

08000390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800039a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	db0b      	blt.n	80003ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	f003 021f 	and.w	r2, r3, #31
 80003a8:	4906      	ldr	r1, [pc, #24]	; (80003c4 <__NVIC_EnableIRQ+0x34>)
 80003aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ae:	095b      	lsrs	r3, r3, #5
 80003b0:	2001      	movs	r0, #1
 80003b2:	fa00 f202 	lsl.w	r2, r0, r2
 80003b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr
 80003c4:	e000e100 	.word	0xe000e100

080003c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	4603      	mov	r3, r0
 80003d0:	6039      	str	r1, [r7, #0]
 80003d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db0a      	blt.n	80003f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	b2da      	uxtb	r2, r3
 80003e0:	490c      	ldr	r1, [pc, #48]	; (8000414 <__NVIC_SetPriority+0x4c>)
 80003e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003e6:	0112      	lsls	r2, r2, #4
 80003e8:	b2d2      	uxtb	r2, r2
 80003ea:	440b      	add	r3, r1
 80003ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003f0:	e00a      	b.n	8000408 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003f2:	683b      	ldr	r3, [r7, #0]
 80003f4:	b2da      	uxtb	r2, r3
 80003f6:	4908      	ldr	r1, [pc, #32]	; (8000418 <__NVIC_SetPriority+0x50>)
 80003f8:	79fb      	ldrb	r3, [r7, #7]
 80003fa:	f003 030f 	and.w	r3, r3, #15
 80003fe:	3b04      	subs	r3, #4
 8000400:	0112      	lsls	r2, r2, #4
 8000402:	b2d2      	uxtb	r2, r2
 8000404:	440b      	add	r3, r1
 8000406:	761a      	strb	r2, [r3, #24]
}
 8000408:	bf00      	nop
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	bc80      	pop	{r7}
 8000410:	4770      	bx	lr
 8000412:	bf00      	nop
 8000414:	e000e100 	.word	0xe000e100
 8000418:	e000ed00 	.word	0xe000ed00

0800041c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800041c:	b480      	push	{r7}
 800041e:	b089      	sub	sp, #36	; 0x24
 8000420:	af00      	add	r7, sp, #0
 8000422:	60f8      	str	r0, [r7, #12]
 8000424:	60b9      	str	r1, [r7, #8]
 8000426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000428:	68fb      	ldr	r3, [r7, #12]
 800042a:	f003 0307 	and.w	r3, r3, #7
 800042e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000430:	69fb      	ldr	r3, [r7, #28]
 8000432:	f1c3 0307 	rsb	r3, r3, #7
 8000436:	2b04      	cmp	r3, #4
 8000438:	bf28      	it	cs
 800043a:	2304      	movcs	r3, #4
 800043c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800043e:	69fb      	ldr	r3, [r7, #28]
 8000440:	3304      	adds	r3, #4
 8000442:	2b06      	cmp	r3, #6
 8000444:	d902      	bls.n	800044c <NVIC_EncodePriority+0x30>
 8000446:	69fb      	ldr	r3, [r7, #28]
 8000448:	3b03      	subs	r3, #3
 800044a:	e000      	b.n	800044e <NVIC_EncodePriority+0x32>
 800044c:	2300      	movs	r3, #0
 800044e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000450:	f04f 32ff 	mov.w	r2, #4294967295
 8000454:	69bb      	ldr	r3, [r7, #24]
 8000456:	fa02 f303 	lsl.w	r3, r2, r3
 800045a:	43da      	mvns	r2, r3
 800045c:	68bb      	ldr	r3, [r7, #8]
 800045e:	401a      	ands	r2, r3
 8000460:	697b      	ldr	r3, [r7, #20]
 8000462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000464:	f04f 31ff 	mov.w	r1, #4294967295
 8000468:	697b      	ldr	r3, [r7, #20]
 800046a:	fa01 f303 	lsl.w	r3, r1, r3
 800046e:	43d9      	mvns	r1, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000474:	4313      	orrs	r3, r2
         );
}
 8000476:	4618      	mov	r0, r3
 8000478:	3724      	adds	r7, #36	; 0x24
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr

08000480 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	3b01      	subs	r3, #1
 800048c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000490:	d301      	bcc.n	8000496 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000492:	2301      	movs	r3, #1
 8000494:	e00f      	b.n	80004b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000496:	4a0a      	ldr	r2, [pc, #40]	; (80004c0 <SysTick_Config+0x40>)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	3b01      	subs	r3, #1
 800049c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800049e:	210f      	movs	r1, #15
 80004a0:	f04f 30ff 	mov.w	r0, #4294967295
 80004a4:	f7ff ff90 	bl	80003c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004a8:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <SysTick_Config+0x40>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004ae:	4b04      	ldr	r3, [pc, #16]	; (80004c0 <SysTick_Config+0x40>)
 80004b0:	2207      	movs	r2, #7
 80004b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004b4:	2300      	movs	r3, #0
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	3708      	adds	r7, #8
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
 80004be:	bf00      	nop
 80004c0:	e000e010 	.word	0xe000e010

080004c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004cc:	6878      	ldr	r0, [r7, #4]
 80004ce:	f7ff ff2d 	bl	800032c <__NVIC_SetPriorityGrouping>
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}

080004da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80004da:	b580      	push	{r7, lr}
 80004dc:	b086      	sub	sp, #24
 80004de:	af00      	add	r7, sp, #0
 80004e0:	4603      	mov	r3, r0
 80004e2:	60b9      	str	r1, [r7, #8]
 80004e4:	607a      	str	r2, [r7, #4]
 80004e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80004e8:	2300      	movs	r3, #0
 80004ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80004ec:	f7ff ff42 	bl	8000374 <__NVIC_GetPriorityGrouping>
 80004f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	68b9      	ldr	r1, [r7, #8]
 80004f6:	6978      	ldr	r0, [r7, #20]
 80004f8:	f7ff ff90 	bl	800041c <NVIC_EncodePriority>
 80004fc:	4602      	mov	r2, r0
 80004fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000502:	4611      	mov	r1, r2
 8000504:	4618      	mov	r0, r3
 8000506:	f7ff ff5f 	bl	80003c8 <__NVIC_SetPriority>
}
 800050a:	bf00      	nop
 800050c:	3718      	adds	r7, #24
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}

08000512 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000512:	b580      	push	{r7, lr}
 8000514:	b082      	sub	sp, #8
 8000516:	af00      	add	r7, sp, #0
 8000518:	4603      	mov	r3, r0
 800051a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800051c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000520:	4618      	mov	r0, r3
 8000522:	f7ff ff35 	bl	8000390 <__NVIC_EnableIRQ>
}
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}

0800052e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800052e:	b580      	push	{r7, lr}
 8000530:	b082      	sub	sp, #8
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000536:	6878      	ldr	r0, [r7, #4]
 8000538:	f7ff ffa2 	bl	8000480 <SysTick_Config>
 800053c:	4603      	mov	r3, r0
}
 800053e:	4618      	mov	r0, r3
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}

08000546 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000546:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000548:	b08b      	sub	sp, #44	; 0x2c
 800054a:	af06      	add	r7, sp, #24
 800054c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d101      	bne.n	8000558 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000554:	2301      	movs	r3, #1
 8000556:	e0d3      	b.n	8000700 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800055e:	b2db      	uxtb	r3, r3
 8000560:	2b00      	cmp	r3, #0
 8000562:	d106      	bne.n	8000572 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2200      	movs	r2, #0
 8000568:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800056c:	6878      	ldr	r0, [r7, #4]
 800056e:	f004 fcaf 	bl	8004ed0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2203      	movs	r2, #3
 8000576:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4618      	mov	r0, r3
 8000580:	f001 ff22 	bl	80023c8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	603b      	str	r3, [r7, #0]
 800058a:	687e      	ldr	r6, [r7, #4]
 800058c:	466d      	mov	r5, sp
 800058e:	f106 0410 	add.w	r4, r6, #16
 8000592:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000594:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000596:	6823      	ldr	r3, [r4, #0]
 8000598:	602b      	str	r3, [r5, #0]
 800059a:	1d33      	adds	r3, r6, #4
 800059c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800059e:	6838      	ldr	r0, [r7, #0]
 80005a0:	f001 feeb 	bl	800237a <USB_CoreInit>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d005      	beq.n	80005b6 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2202      	movs	r2, #2
 80005ae:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80005b2:	2301      	movs	r3, #1
 80005b4:	e0a4      	b.n	8000700 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2100      	movs	r1, #0
 80005bc:	4618      	mov	r0, r3
 80005be:	f001 ff1f 	bl	8002400 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80005c2:	2300      	movs	r3, #0
 80005c4:	73fb      	strb	r3, [r7, #15]
 80005c6:	e035      	b.n	8000634 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80005c8:	7bfb      	ldrb	r3, [r7, #15]
 80005ca:	687a      	ldr	r2, [r7, #4]
 80005cc:	015b      	lsls	r3, r3, #5
 80005ce:	4413      	add	r3, r2
 80005d0:	3329      	adds	r3, #41	; 0x29
 80005d2:	2201      	movs	r2, #1
 80005d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	015b      	lsls	r3, r3, #5
 80005dc:	4413      	add	r3, r2
 80005de:	3328      	adds	r3, #40	; 0x28
 80005e0:	7bfa      	ldrb	r2, [r7, #15]
 80005e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	7bfa      	ldrb	r2, [r7, #15]
 80005e8:	b291      	uxth	r1, r2
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	015b      	lsls	r3, r3, #5
 80005ee:	4413      	add	r3, r2
 80005f0:	3336      	adds	r3, #54	; 0x36
 80005f2:	460a      	mov	r2, r1
 80005f4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	015b      	lsls	r3, r3, #5
 80005fc:	4413      	add	r3, r2
 80005fe:	332b      	adds	r3, #43	; 0x2b
 8000600:	2200      	movs	r2, #0
 8000602:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	015b      	lsls	r3, r3, #5
 800060a:	4413      	add	r3, r2
 800060c:	3338      	adds	r3, #56	; 0x38
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000612:	7bfb      	ldrb	r3, [r7, #15]
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	015b      	lsls	r3, r3, #5
 8000618:	4413      	add	r3, r2
 800061a:	333c      	adds	r3, #60	; 0x3c
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	687a      	ldr	r2, [r7, #4]
 8000624:	3302      	adds	r3, #2
 8000626:	015b      	lsls	r3, r3, #5
 8000628:	4413      	add	r3, r2
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800062e:	7bfb      	ldrb	r3, [r7, #15]
 8000630:	3301      	adds	r3, #1
 8000632:	73fb      	strb	r3, [r7, #15]
 8000634:	7bfa      	ldrb	r2, [r7, #15]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	429a      	cmp	r2, r3
 800063c:	d3c4      	bcc.n	80005c8 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800063e:	2300      	movs	r3, #0
 8000640:	73fb      	strb	r3, [r7, #15]
 8000642:	e031      	b.n	80006a8 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000644:	7bfb      	ldrb	r3, [r7, #15]
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	015b      	lsls	r3, r3, #5
 800064a:	4413      	add	r3, r2
 800064c:	f203 1329 	addw	r3, r3, #297	; 0x129
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000654:	7bfb      	ldrb	r3, [r7, #15]
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	015b      	lsls	r3, r3, #5
 800065a:	4413      	add	r3, r2
 800065c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000660:	7bfa      	ldrb	r2, [r7, #15]
 8000662:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	015b      	lsls	r3, r3, #5
 800066a:	4413      	add	r3, r2
 800066c:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000674:	7bfb      	ldrb	r3, [r7, #15]
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	015b      	lsls	r3, r3, #5
 800067a:	4413      	add	r3, r2
 800067c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000684:	7bfb      	ldrb	r3, [r7, #15]
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	015b      	lsls	r3, r3, #5
 800068a:	4413      	add	r3, r2
 800068c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000694:	7bfb      	ldrb	r3, [r7, #15]
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	330a      	adds	r3, #10
 800069a:	015b      	lsls	r3, r3, #5
 800069c:	4413      	add	r3, r2
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80006a2:	7bfb      	ldrb	r3, [r7, #15]
 80006a4:	3301      	adds	r3, #1
 80006a6:	73fb      	strb	r3, [r7, #15]
 80006a8:	7bfa      	ldrb	r2, [r7, #15]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	685b      	ldr	r3, [r3, #4]
 80006ae:	429a      	cmp	r2, r3
 80006b0:	d3c8      	bcc.n	8000644 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	687e      	ldr	r6, [r7, #4]
 80006ba:	466d      	mov	r5, sp
 80006bc:	f106 0410 	add.w	r4, r6, #16
 80006c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80006c4:	6823      	ldr	r3, [r4, #0]
 80006c6:	602b      	str	r3, [r5, #0]
 80006c8:	1d33      	adds	r3, r6, #4
 80006ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006cc:	6838      	ldr	r0, [r7, #0]
 80006ce:	f001 fea3 	bl	8002418 <USB_DevInit>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d005      	beq.n	80006e4 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2202      	movs	r2, #2
 80006dc:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80006e0:	2301      	movs	r3, #1
 80006e2:	e00d      	b.n	8000700 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2200      	movs	r2, #0
 80006e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2201      	movs	r2, #1
 80006f0:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f002 fee0 	bl	80034be <USB_DevDisconnect>

  return HAL_OK;
 80006fe:	2300      	movs	r3, #0
}
 8000700:	4618      	mov	r0, r3
 8000702:	3714      	adds	r7, #20
 8000704:	46bd      	mov	sp, r7
 8000706:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000708 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000716:	2b01      	cmp	r3, #1
 8000718:	d101      	bne.n	800071e <HAL_PCD_Start+0x16>
 800071a:	2302      	movs	r3, #2
 800071c:	e016      	b.n	800074c <HAL_PCD_Start+0x44>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2201      	movs	r2, #1
 8000722:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8000726:	2101      	movs	r1, #1
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f004 fe12 	bl	8005352 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4618      	mov	r0, r3
 8000734:	f002 feb9 	bl	80034aa <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4618      	mov	r0, r3
 800073e:	f001 fe2c 	bl	800239a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2200      	movs	r2, #0
 8000746:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800074a:	2300      	movs	r3, #0
}
 800074c:	4618      	mov	r0, r3
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4618      	mov	r0, r3
 8000762:	f002 feb6 	bl	80034d2 <USB_ReadInterrupts>
 8000766:	4603      	mov	r3, r0
 8000768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800076c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000770:	d102      	bne.n	8000778 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000772:	6878      	ldr	r0, [r7, #4]
 8000774:	f000 fade 	bl	8000d34 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4618      	mov	r0, r3
 800077e:	f002 fea8 	bl	80034d2 <USB_ReadInterrupts>
 8000782:	4603      	mov	r3, r0
 8000784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800078c:	d112      	bne.n	80007b4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000796:	b29a      	uxth	r2, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80007a0:	b292      	uxth	r2, r2
 80007a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f004 fc07 	bl	8004fba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80007ac:	2100      	movs	r1, #0
 80007ae:	6878      	ldr	r0, [r7, #4]
 80007b0:	f000 f8de 	bl	8000970 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f002 fe8a 	bl	80034d2 <USB_ReadInterrupts>
 80007be:	4603      	mov	r3, r0
 80007c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80007c8:	d10b      	bne.n	80007e2 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80007dc:	b292      	uxth	r2, r2
 80007de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4618      	mov	r0, r3
 80007e8:	f002 fe73 	bl	80034d2 <USB_ReadInterrupts>
 80007ec:	4603      	mov	r3, r0
 80007ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80007f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80007f6:	d10b      	bne.n	8000810 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000800:	b29a      	uxth	r2, r3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800080a:	b292      	uxth	r2, r2
 800080c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4618      	mov	r0, r3
 8000816:	f002 fe5c 	bl	80034d2 <USB_ReadInterrupts>
 800081a:	4603      	mov	r3, r0
 800081c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000824:	d126      	bne.n	8000874 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800082e:	b29a      	uxth	r2, r3
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f022 0204 	bic.w	r2, r2, #4
 8000838:	b292      	uxth	r2, r2
 800083a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000846:	b29a      	uxth	r2, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f022 0208 	bic.w	r2, r2, #8
 8000850:	b292      	uxth	r2, r2
 8000852:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f004 fbe8 	bl	800502c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000864:	b29a      	uxth	r2, r3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800086e:	b292      	uxth	r2, r2
 8000870:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4618      	mov	r0, r3
 800087a:	f002 fe2a 	bl	80034d2 <USB_ReadInterrupts>
 800087e:	4603      	mov	r3, r0
 8000880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000888:	d13d      	bne.n	8000906 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000892:	b29a      	uxth	r2, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f042 0208 	orr.w	r2, r2, #8
 800089c:	b292      	uxth	r2, r2
 800089e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80008aa:	b29a      	uxth	r2, r3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80008b4:	b292      	uxth	r2, r2
 80008b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80008c2:	b29a      	uxth	r2, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f042 0204 	orr.w	r2, r2, #4
 80008cc:	b292      	uxth	r2, r2
 80008ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f002 fdfb 	bl	80034d2 <USB_ReadInterrupts>
 80008dc:	4603      	mov	r3, r0
 80008de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80008e6:	d10b      	bne.n	8000900 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80008fa:	b292      	uxth	r2, r2
 80008fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f004 fb79 	bl	8004ff8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4618      	mov	r0, r3
 800090c:	f002 fde1 	bl	80034d2 <USB_ReadInterrupts>
 8000910:	4603      	mov	r3, r0
 8000912:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000916:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800091a:	d10e      	bne.n	800093a <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000924:	b29a      	uxth	r2, r3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800092e:	b292      	uxth	r2, r2
 8000930:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000934:	6878      	ldr	r0, [r7, #4]
 8000936:	f004 fb32 	bl	8004f9e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4618      	mov	r0, r3
 8000940:	f002 fdc7 	bl	80034d2 <USB_ReadInterrupts>
 8000944:	4603      	mov	r3, r0
 8000946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800094a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800094e:	d10b      	bne.n	8000968 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000958:	b29a      	uxth	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000962:	b292      	uxth	r2, r2
 8000964:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	460b      	mov	r3, r1
 800097a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000982:	2b01      	cmp	r3, #1
 8000984:	d101      	bne.n	800098a <HAL_PCD_SetAddress+0x1a>
 8000986:	2302      	movs	r3, #2
 8000988:	e013      	b.n	80009b2 <HAL_PCD_SetAddress+0x42>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2201      	movs	r2, #1
 800098e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	78fa      	ldrb	r2, [r7, #3]
 8000996:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	78fa      	ldrb	r2, [r7, #3]
 80009a0:	4611      	mov	r1, r2
 80009a2:	4618      	mov	r0, r3
 80009a4:	f002 fd6e 	bl	8003484 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2200      	movs	r2, #0
 80009ac:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b084      	sub	sp, #16
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
 80009c2:	4608      	mov	r0, r1
 80009c4:	4611      	mov	r1, r2
 80009c6:	461a      	mov	r2, r3
 80009c8:	4603      	mov	r3, r0
 80009ca:	70fb      	strb	r3, [r7, #3]
 80009cc:	460b      	mov	r3, r1
 80009ce:	803b      	strh	r3, [r7, #0]
 80009d0:	4613      	mov	r3, r2
 80009d2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80009d4:	2300      	movs	r3, #0
 80009d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80009d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	da0b      	bge.n	80009f8 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80009e0:	78fb      	ldrb	r3, [r7, #3]
 80009e2:	f003 0307 	and.w	r3, r3, #7
 80009e6:	015b      	lsls	r3, r3, #5
 80009e8:	3328      	adds	r3, #40	; 0x28
 80009ea:	687a      	ldr	r2, [r7, #4]
 80009ec:	4413      	add	r3, r2
 80009ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	2201      	movs	r2, #1
 80009f4:	705a      	strb	r2, [r3, #1]
 80009f6:	e00b      	b.n	8000a10 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80009f8:	78fb      	ldrb	r3, [r7, #3]
 80009fa:	f003 0307 	and.w	r3, r3, #7
 80009fe:	015b      	lsls	r3, r3, #5
 8000a00:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	4413      	add	r3, r2
 8000a08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8000a10:	78fb      	ldrb	r3, [r7, #3]
 8000a12:	f003 0307 	and.w	r3, r3, #7
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8000a1c:	883a      	ldrh	r2, [r7, #0]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	78ba      	ldrb	r2, [r7, #2]
 8000a26:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	785b      	ldrb	r3, [r3, #1]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d004      	beq.n	8000a3a <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	b29a      	uxth	r2, r3
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8000a3a:	78bb      	ldrb	r3, [r7, #2]
 8000a3c:	2b02      	cmp	r3, #2
 8000a3e:	d102      	bne.n	8000a46 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	2200      	movs	r2, #0
 8000a44:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d101      	bne.n	8000a54 <HAL_PCD_EP_Open+0x9a>
 8000a50:	2302      	movs	r3, #2
 8000a52:	e00e      	b.n	8000a72 <HAL_PCD_EP_Open+0xb8>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2201      	movs	r2, #1
 8000a58:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	68f9      	ldr	r1, [r7, #12]
 8000a62:	4618      	mov	r0, r3
 8000a64:	f001 fcfc 	bl	8002460 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8000a70:	7afb      	ldrb	r3, [r7, #11]
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3710      	adds	r7, #16
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b084      	sub	sp, #16
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
 8000a82:	460b      	mov	r3, r1
 8000a84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8000a86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	da0b      	bge.n	8000aa6 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000a8e:	78fb      	ldrb	r3, [r7, #3]
 8000a90:	f003 0307 	and.w	r3, r3, #7
 8000a94:	015b      	lsls	r3, r3, #5
 8000a96:	3328      	adds	r3, #40	; 0x28
 8000a98:	687a      	ldr	r2, [r7, #4]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	705a      	strb	r2, [r3, #1]
 8000aa4:	e00b      	b.n	8000abe <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000aa6:	78fb      	ldrb	r3, [r7, #3]
 8000aa8:	f003 0307 	and.w	r3, r3, #7
 8000aac:	015b      	lsls	r3, r3, #5
 8000aae:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000ab2:	687a      	ldr	r2, [r7, #4]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	2200      	movs	r2, #0
 8000abc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8000abe:	78fb      	ldrb	r3, [r7, #3]
 8000ac0:	f003 0307 	and.w	r3, r3, #7
 8000ac4:	b2da      	uxtb	r2, r3
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d101      	bne.n	8000ad8 <HAL_PCD_EP_Close+0x5e>
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	e00e      	b.n	8000af6 <HAL_PCD_EP_Close+0x7c>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2201      	movs	r2, #1
 8000adc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	68f9      	ldr	r1, [r7, #12]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f001 ffa8 	bl	8002a3c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2200      	movs	r2, #0
 8000af0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3710      	adds	r7, #16
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b086      	sub	sp, #24
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	60f8      	str	r0, [r7, #12]
 8000b06:	607a      	str	r2, [r7, #4]
 8000b08:	603b      	str	r3, [r7, #0]
 8000b0a:	460b      	mov	r3, r1
 8000b0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000b0e:	7afb      	ldrb	r3, [r7, #11]
 8000b10:	f003 0307 	and.w	r3, r3, #7
 8000b14:	015b      	lsls	r3, r3, #5
 8000b16:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	687a      	ldr	r2, [r7, #4]
 8000b24:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	683a      	ldr	r2, [r7, #0]
 8000b2a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	2200      	movs	r2, #0
 8000b36:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000b38:	7afb      	ldrb	r3, [r7, #11]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000b44:	7afb      	ldrb	r3, [r7, #11]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d106      	bne.n	8000b5c <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	6979      	ldr	r1, [r7, #20]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f002 f907 	bl	8002d68 <USB_EPStartXfer>
 8000b5a:	e005      	b.n	8000b68 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	6979      	ldr	r1, [r7, #20]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f002 f900 	bl	8002d68 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000b68:	2300      	movs	r3, #0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3718      	adds	r7, #24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b086      	sub	sp, #24
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	60f8      	str	r0, [r7, #12]
 8000b7a:	607a      	str	r2, [r7, #4]
 8000b7c:	603b      	str	r3, [r7, #0]
 8000b7e:	460b      	mov	r3, r1
 8000b80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000b82:	7afb      	ldrb	r3, [r7, #11]
 8000b84:	f003 0307 	and.w	r3, r3, #7
 8000b88:	015b      	lsls	r3, r3, #5
 8000b8a:	3328      	adds	r3, #40	; 0x28
 8000b8c:	68fa      	ldr	r2, [r7, #12]
 8000b8e:	4413      	add	r3, r2
 8000b90:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	683a      	ldr	r2, [r7, #0]
 8000b9c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000baa:	7afb      	ldrb	r3, [r7, #11]
 8000bac:	f003 0307 	and.w	r3, r3, #7
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000bb6:	7afb      	ldrb	r3, [r7, #11]
 8000bb8:	f003 0307 	and.w	r3, r3, #7
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d106      	bne.n	8000bce <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	6979      	ldr	r1, [r7, #20]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f002 f8ce 	bl	8002d68 <USB_EPStartXfer>
 8000bcc:	e005      	b.n	8000bda <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	6979      	ldr	r1, [r7, #20]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f002 f8c7 	bl	8002d68 <USB_EPStartXfer>
  }

  return HAL_OK;
 8000bda:	2300      	movs	r3, #0
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3718      	adds	r7, #24
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}

08000be4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
 8000bec:	460b      	mov	r3, r1
 8000bee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8000bf0:	78fb      	ldrb	r3, [r7, #3]
 8000bf2:	f003 0207 	and.w	r2, r3, #7
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d901      	bls.n	8000c02 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e046      	b.n	8000c90 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000c02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	da0b      	bge.n	8000c22 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000c0a:	78fb      	ldrb	r3, [r7, #3]
 8000c0c:	f003 0307 	and.w	r3, r3, #7
 8000c10:	015b      	lsls	r3, r3, #5
 8000c12:	3328      	adds	r3, #40	; 0x28
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	4413      	add	r3, r2
 8000c18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	705a      	strb	r2, [r3, #1]
 8000c20:	e009      	b.n	8000c36 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000c22:	78fb      	ldrb	r3, [r7, #3]
 8000c24:	015b      	lsls	r3, r3, #5
 8000c26:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	2200      	movs	r2, #0
 8000c34:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	2201      	movs	r2, #1
 8000c3a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000c3c:	78fb      	ldrb	r3, [r7, #3]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d101      	bne.n	8000c56 <HAL_PCD_EP_SetStall+0x72>
 8000c52:	2302      	movs	r3, #2
 8000c54:	e01c      	b.n	8000c90 <HAL_PCD_EP_SetStall+0xac>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2201      	movs	r2, #1
 8000c5a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	68f9      	ldr	r1, [r7, #12]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f002 fb37 	bl	80032d8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8000c6a:	78fb      	ldrb	r3, [r7, #3]
 8000c6c:	f003 0307 	and.w	r3, r3, #7
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d108      	bne.n	8000c86 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4610      	mov	r0, r2
 8000c82:	f002 fc35 	bl	80034f0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8000c8e:	2300      	movs	r3, #0
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8000ca4:	78fb      	ldrb	r3, [r7, #3]
 8000ca6:	f003 020f 	and.w	r2, r3, #15
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d901      	bls.n	8000cb6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e03a      	b.n	8000d2c <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8000cb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	da0b      	bge.n	8000cd6 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8000cbe:	78fb      	ldrb	r3, [r7, #3]
 8000cc0:	f003 0307 	and.w	r3, r3, #7
 8000cc4:	015b      	lsls	r3, r3, #5
 8000cc6:	3328      	adds	r3, #40	; 0x28
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	4413      	add	r3, r2
 8000ccc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	705a      	strb	r2, [r3, #1]
 8000cd4:	e00b      	b.n	8000cee <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8000cd6:	78fb      	ldrb	r3, [r7, #3]
 8000cd8:	f003 0307 	and.w	r3, r3, #7
 8000cdc:	015b      	lsls	r3, r3, #5
 8000cde:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	2200      	movs	r2, #0
 8000cec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8000cf4:	78fb      	ldrb	r3, [r7, #3]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d101      	bne.n	8000d0e <HAL_PCD_EP_ClrStall+0x76>
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	e00e      	b.n	8000d2c <HAL_PCD_EP_ClrStall+0x94>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2201      	movs	r2, #1
 8000d12:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	68f9      	ldr	r1, [r7, #12]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f002 fb1d 	bl	800335c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2200      	movs	r2, #0
 8000d26:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8000d2a:	2300      	movs	r3, #0
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8000d34:	b590      	push	{r4, r7, lr}
 8000d36:	b089      	sub	sp, #36	; 0x24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8000d3c:	e282      	b.n	8001244 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d46:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000d48:	8afb      	ldrh	r3, [r7, #22]
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	f003 030f 	and.w	r3, r3, #15
 8000d50:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8000d52:	7d7b      	ldrb	r3, [r7, #21]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	f040 8142 	bne.w	8000fde <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8000d5a:	8afb      	ldrh	r3, [r7, #22]
 8000d5c:	f003 0310 	and.w	r3, r3, #16
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d151      	bne.n	8000e08 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8000d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d74:	b29c      	uxth	r4, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8000d7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	3328      	adds	r3, #40	; 0x28
 8000d8a:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	461a      	mov	r2, r3
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	00db      	lsls	r3, r3, #3
 8000d9e:	4413      	add	r3, r2
 8000da0:	3302      	adds	r3, #2
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	6812      	ldr	r2, [r2, #0]
 8000da8:	4413      	add	r3, r2
 8000daa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000dae:	881b      	ldrh	r3, [r3, #0]
 8000db0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	695a      	ldr	r2, [r3, #20]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	69db      	ldr	r3, [r3, #28]
 8000dc0:	441a      	add	r2, r3
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f004 f8d1 	bl	8004f70 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f000 8234 	beq.w	8001244 <PCD_EP_ISR_Handler+0x510>
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	f040 822f 	bne.w	8001244 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	b292      	uxth	r2, r2
 8000dfa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2200      	movs	r2, #0
 8000e02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8000e06:	e21d      	b.n	8001244 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000e0e:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	881b      	ldrh	r3, [r3, #0]
 8000e16:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000e18:	8a7b      	ldrh	r3, [r7, #18]
 8000e1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d033      	beq.n	8000e8a <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	00db      	lsls	r3, r3, #3
 8000e34:	4413      	add	r3, r2
 8000e36:	3306      	adds	r3, #6
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	6812      	ldr	r2, [r2, #0]
 8000e3e:	4413      	add	r3, r2
 8000e40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e44:	881b      	ldrh	r3, [r3, #0]
 8000e46:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6818      	ldr	r0, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	f002 fb94 	bl	800358e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	881b      	ldrh	r3, [r3, #0]
 8000e6c:	b29a      	uxth	r2, r3
 8000e6e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8000e72:	4013      	ands	r3, r2
 8000e74:	b29c      	uxth	r4, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8000e7e:	b292      	uxth	r2, r2
 8000e80:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f004 f84a 	bl	8004f1c <HAL_PCD_SetupStageCallback>
 8000e88:	e1dc      	b.n	8001244 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000e8a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f280 81d8 	bge.w	8001244 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	881b      	ldrh	r3, [r3, #0]
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	b29c      	uxth	r4, r3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8000eac:	b292      	uxth	r2, r2
 8000eae:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	461a      	mov	r2, r3
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	4413      	add	r3, r2
 8000ec4:	3306      	adds	r3, #6
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	6812      	ldr	r2, [r2, #0]
 8000ecc:	4413      	add	r3, r2
 8000ece:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ed2:	881b      	ldrh	r3, [r3, #0]
 8000ed4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	69db      	ldr	r3, [r3, #28]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d019      	beq.n	8000f18 <PCD_EP_ISR_Handler+0x1e4>
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	695b      	ldr	r3, [r3, #20]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d015      	beq.n	8000f18 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6818      	ldr	r0, [r3, #0]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	6959      	ldr	r1, [r3, #20]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	f002 fb46 	bl	800358e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	695a      	ldr	r2, [r3, #20]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	441a      	add	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8000f10:	2100      	movs	r1, #0
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f004 f814 	bl	8004f40 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	461c      	mov	r4, r3
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	441c      	add	r4, r3
 8000f2a:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8000f2e:	461c      	mov	r4, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	691b      	ldr	r3, [r3, #16]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d10e      	bne.n	8000f56 <PCD_EP_ISR_Handler+0x222>
 8000f38:	8823      	ldrh	r3, [r4, #0]
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	8023      	strh	r3, [r4, #0]
 8000f44:	8823      	ldrh	r3, [r4, #0]
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000f4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	8023      	strh	r3, [r4, #0]
 8000f54:	e02d      	b.n	8000fb2 <PCD_EP_ISR_Handler+0x27e>
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	691b      	ldr	r3, [r3, #16]
 8000f5a:	2b3e      	cmp	r3, #62	; 0x3e
 8000f5c:	d812      	bhi.n	8000f84 <PCD_EP_ISR_Handler+0x250>
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	691b      	ldr	r3, [r3, #16]
 8000f62:	085b      	lsrs	r3, r3, #1
 8000f64:	61bb      	str	r3, [r7, #24]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	691b      	ldr	r3, [r3, #16]
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d002      	beq.n	8000f78 <PCD_EP_ISR_Handler+0x244>
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	3301      	adds	r3, #1
 8000f76:	61bb      	str	r3, [r7, #24]
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	029b      	lsls	r3, r3, #10
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	8023      	strh	r3, [r4, #0]
 8000f82:	e016      	b.n	8000fb2 <PCD_EP_ISR_Handler+0x27e>
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	691b      	ldr	r3, [r3, #16]
 8000f88:	095b      	lsrs	r3, r3, #5
 8000f8a:	61bb      	str	r3, [r7, #24]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	691b      	ldr	r3, [r3, #16]
 8000f90:	f003 031f 	and.w	r3, r3, #31
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d102      	bne.n	8000f9e <PCD_EP_ISR_Handler+0x26a>
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	61bb      	str	r3, [r7, #24]
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	029b      	lsls	r3, r3, #10
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000faa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fc2:	b29c      	uxth	r4, r3
 8000fc4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8000fc8:	b29c      	uxth	r4, r3
 8000fca:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8000fce:	b29c      	uxth	r4, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4ba2      	ldr	r3, [pc, #648]	; (8001260 <PCD_EP_ISR_Handler+0x52c>)
 8000fd6:	4323      	orrs	r3, r4
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	8013      	strh	r3, [r2, #0]
 8000fdc:	e132      	b.n	8001244 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	7d7b      	ldrb	r3, [r7, #21]
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4413      	add	r3, r2
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000fee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f280 80d1 	bge.w	800119a <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	7d7b      	ldrb	r3, [r7, #21]
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	4413      	add	r3, r2
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	b29a      	uxth	r2, r3
 8001008:	f640 738f 	movw	r3, #3983	; 0xf8f
 800100c:	4013      	ands	r3, r2
 800100e:	b29c      	uxth	r4, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	7d7b      	ldrb	r3, [r7, #21]
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4413      	add	r3, r2
 800101c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001020:	b292      	uxth	r2, r2
 8001022:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001024:	7d7b      	ldrb	r3, [r7, #21]
 8001026:	015b      	lsls	r3, r3, #5
 8001028:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	4413      	add	r3, r2
 8001030:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	7b1b      	ldrb	r3, [r3, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d121      	bne.n	800107e <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001042:	b29b      	uxth	r3, r3
 8001044:	461a      	mov	r2, r3
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	4413      	add	r3, r2
 800104e:	3306      	adds	r3, #6
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	6812      	ldr	r2, [r2, #0]
 8001056:	4413      	add	r3, r2
 8001058:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800105c:	881b      	ldrh	r3, [r3, #0]
 800105e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001062:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8001064:	8bfb      	ldrh	r3, [r7, #30]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d072      	beq.n	8001150 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6818      	ldr	r0, [r3, #0]
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	6959      	ldr	r1, [r3, #20]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	88da      	ldrh	r2, [r3, #6]
 8001076:	8bfb      	ldrh	r3, [r7, #30]
 8001078:	f002 fa89 	bl	800358e <USB_ReadPMA>
 800107c:	e068      	b.n	8001150 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	461a      	mov	r2, r3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4413      	add	r3, r2
 800108c:	881b      	ldrh	r3, [r3, #0]
 800108e:	b29b      	uxth	r3, r3
 8001090:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d021      	beq.n	80010dc <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	461a      	mov	r2, r3
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	4413      	add	r3, r2
 80010ac:	3302      	adds	r3, #2
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	6812      	ldr	r2, [r2, #0]
 80010b4:	4413      	add	r3, r2
 80010b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010ba:	881b      	ldrh	r3, [r3, #0]
 80010bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010c0:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80010c2:	8bfb      	ldrh	r3, [r7, #30]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d02a      	beq.n	800111e <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6818      	ldr	r0, [r3, #0]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	6959      	ldr	r1, [r3, #20]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	891a      	ldrh	r2, [r3, #8]
 80010d4:	8bfb      	ldrh	r3, [r7, #30]
 80010d6:	f002 fa5a 	bl	800358e <USB_ReadPMA>
 80010da:	e020      	b.n	800111e <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	461a      	mov	r2, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	4413      	add	r3, r2
 80010f0:	3306      	adds	r3, #6
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	6812      	ldr	r2, [r2, #0]
 80010f8:	4413      	add	r3, r2
 80010fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010fe:	881b      	ldrh	r3, [r3, #0]
 8001100:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001104:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001106:	8bfb      	ldrh	r3, [r7, #30]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d008      	beq.n	800111e <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6818      	ldr	r0, [r3, #0]
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	6959      	ldr	r1, [r3, #20]
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	895a      	ldrh	r2, [r3, #10]
 8001118:	8bfb      	ldrh	r3, [r7, #30]
 800111a:	f002 fa38 	bl	800358e <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	461a      	mov	r2, r3
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	b29b      	uxth	r3, r3
 8001130:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001138:	b29c      	uxth	r4, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	461a      	mov	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	441a      	add	r2, r3
 8001148:	4b46      	ldr	r3, [pc, #280]	; (8001264 <PCD_EP_ISR_Handler+0x530>)
 800114a:	4323      	orrs	r3, r4
 800114c:	b29b      	uxth	r3, r3
 800114e:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	69da      	ldr	r2, [r3, #28]
 8001154:	8bfb      	ldrh	r3, [r7, #30]
 8001156:	441a      	add	r2, r3
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	695a      	ldr	r2, [r3, #20]
 8001160:	8bfb      	ldrh	r3, [r7, #30]
 8001162:	441a      	add	r2, r3
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d004      	beq.n	800117a <PCD_EP_ISR_Handler+0x446>
 8001170:	8bfa      	ldrh	r2, [r7, #30]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	429a      	cmp	r2, r3
 8001178:	d206      	bcs.n	8001188 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	4619      	mov	r1, r3
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f003 fedd 	bl	8004f40 <HAL_PCD_DataOutStageCallback>
 8001186:	e008      	b.n	800119a <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	7819      	ldrb	r1, [r3, #0]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	695a      	ldr	r2, [r3, #20]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff fcb2 	bl	8000afe <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800119a:	8a7b      	ldrh	r3, [r7, #18]
 800119c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d04f      	beq.n	8001244 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 80011a4:	7d7b      	ldrb	r3, [r7, #21]
 80011a6:	015b      	lsls	r3, r3, #5
 80011a8:	3328      	adds	r3, #40	; 0x28
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	461a      	mov	r2, r3
 80011b6:	7d7b      	ldrb	r3, [r7, #21]
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4413      	add	r3, r2
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	b29b      	uxth	r3, r3
 80011c0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80011c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80011c8:	b29c      	uxth	r4, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	461a      	mov	r2, r3
 80011d0:	7d7b      	ldrb	r3, [r7, #21]
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	441a      	add	r2, r3
 80011d6:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80011da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80011de:	b29b      	uxth	r3, r3
 80011e0:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	461a      	mov	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	4413      	add	r3, r2
 80011f6:	3302      	adds	r3, #2
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	6812      	ldr	r2, [r2, #0]
 80011fe:	4413      	add	r3, r2
 8001200:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001204:	881b      	ldrh	r3, [r3, #0]
 8001206:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	695a      	ldr	r2, [r3, #20]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	441a      	add	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d106      	bne.n	8001232 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4619      	mov	r1, r3
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f003 fea0 	bl	8004f70 <HAL_PCD_DataInStageCallback>
 8001230:	e008      	b.n	8001244 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	7819      	ldrb	r1, [r3, #0]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	695a      	ldr	r2, [r3, #20]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	699b      	ldr	r3, [r3, #24]
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff fc97 	bl	8000b72 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800124c:	b29b      	uxth	r3, r3
 800124e:	b21b      	sxth	r3, r3
 8001250:	2b00      	cmp	r3, #0
 8001252:	f6ff ad74 	blt.w	8000d3e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8001256:	2300      	movs	r3, #0
}
 8001258:	4618      	mov	r0, r3
 800125a:	3724      	adds	r7, #36	; 0x24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd90      	pop	{r4, r7, pc}
 8001260:	ffff8080 	.word	0xffff8080
 8001264:	ffff80c0 	.word	0xffff80c0

08001268 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8001268:	b480      	push	{r7}
 800126a:	b087      	sub	sp, #28
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	607b      	str	r3, [r7, #4]
 8001272:	460b      	mov	r3, r1
 8001274:	817b      	strh	r3, [r7, #10]
 8001276:	4613      	mov	r3, r2
 8001278:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800127a:	897b      	ldrh	r3, [r7, #10]
 800127c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001280:	b29b      	uxth	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d008      	beq.n	8001298 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001286:	897b      	ldrh	r3, [r7, #10]
 8001288:	f003 0307 	and.w	r3, r3, #7
 800128c:	015b      	lsls	r3, r3, #5
 800128e:	3328      	adds	r3, #40	; 0x28
 8001290:	68fa      	ldr	r2, [r7, #12]
 8001292:	4413      	add	r3, r2
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	e006      	b.n	80012a6 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001298:	897b      	ldrh	r3, [r7, #10]
 800129a:	015b      	lsls	r3, r3, #5
 800129c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80012a0:	68fa      	ldr	r2, [r7, #12]
 80012a2:	4413      	add	r3, r2
 80012a4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80012a6:	893b      	ldrh	r3, [r7, #8]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d107      	bne.n	80012bc <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	2200      	movs	r2, #0
 80012b0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	80da      	strh	r2, [r3, #6]
 80012ba:	e00b      	b.n	80012d4 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	2201      	movs	r2, #1
 80012c0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	b29a      	uxth	r2, r3
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	0c1b      	lsrs	r3, r3, #16
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	371c      	adds	r7, #28
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr

080012e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d101      	bne.n	80012f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e26c      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f000 8087 	beq.w	800140e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001300:	4b92      	ldr	r3, [pc, #584]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 030c 	and.w	r3, r3, #12
 8001308:	2b04      	cmp	r3, #4
 800130a:	d00c      	beq.n	8001326 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800130c:	4b8f      	ldr	r3, [pc, #572]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 030c 	and.w	r3, r3, #12
 8001314:	2b08      	cmp	r3, #8
 8001316:	d112      	bne.n	800133e <HAL_RCC_OscConfig+0x5e>
 8001318:	4b8c      	ldr	r3, [pc, #560]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001324:	d10b      	bne.n	800133e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001326:	4b89      	ldr	r3, [pc, #548]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d06c      	beq.n	800140c <HAL_RCC_OscConfig+0x12c>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d168      	bne.n	800140c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e246      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001346:	d106      	bne.n	8001356 <HAL_RCC_OscConfig+0x76>
 8001348:	4b80      	ldr	r3, [pc, #512]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a7f      	ldr	r2, [pc, #508]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800134e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001352:	6013      	str	r3, [r2, #0]
 8001354:	e02e      	b.n	80013b4 <HAL_RCC_OscConfig+0xd4>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10c      	bne.n	8001378 <HAL_RCC_OscConfig+0x98>
 800135e:	4b7b      	ldr	r3, [pc, #492]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a7a      	ldr	r2, [pc, #488]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001368:	6013      	str	r3, [r2, #0]
 800136a:	4b78      	ldr	r3, [pc, #480]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a77      	ldr	r2, [pc, #476]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001370:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	e01d      	b.n	80013b4 <HAL_RCC_OscConfig+0xd4>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001380:	d10c      	bne.n	800139c <HAL_RCC_OscConfig+0xbc>
 8001382:	4b72      	ldr	r3, [pc, #456]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a71      	ldr	r2, [pc, #452]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	4b6f      	ldr	r3, [pc, #444]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a6e      	ldr	r2, [pc, #440]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	e00b      	b.n	80013b4 <HAL_RCC_OscConfig+0xd4>
 800139c:	4b6b      	ldr	r3, [pc, #428]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a6a      	ldr	r2, [pc, #424]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80013a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	4b68      	ldr	r3, [pc, #416]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a67      	ldr	r2, [pc, #412]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80013ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d013      	beq.n	80013e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013bc:	f7fe ff8a 	bl	80002d4 <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013c4:	f7fe ff86 	bl	80002d4 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b64      	cmp	r3, #100	; 0x64
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e1fa      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d6:	4b5d      	ldr	r3, [pc, #372]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0f0      	beq.n	80013c4 <HAL_RCC_OscConfig+0xe4>
 80013e2:	e014      	b.n	800140e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e4:	f7fe ff76 	bl	80002d4 <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013ec:	f7fe ff72 	bl	80002d4 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b64      	cmp	r3, #100	; 0x64
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e1e6      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013fe:	4b53      	ldr	r3, [pc, #332]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f0      	bne.n	80013ec <HAL_RCC_OscConfig+0x10c>
 800140a:	e000      	b.n	800140e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d063      	beq.n	80014e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800141a:	4b4c      	ldr	r3, [pc, #304]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f003 030c 	and.w	r3, r3, #12
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00b      	beq.n	800143e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001426:	4b49      	ldr	r3, [pc, #292]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f003 030c 	and.w	r3, r3, #12
 800142e:	2b08      	cmp	r3, #8
 8001430:	d11c      	bne.n	800146c <HAL_RCC_OscConfig+0x18c>
 8001432:	4b46      	ldr	r3, [pc, #280]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d116      	bne.n	800146c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800143e:	4b43      	ldr	r3, [pc, #268]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d005      	beq.n	8001456 <HAL_RCC_OscConfig+0x176>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d001      	beq.n	8001456 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e1ba      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001456:	4b3d      	ldr	r3, [pc, #244]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	4939      	ldr	r1, [pc, #228]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001466:	4313      	orrs	r3, r2
 8001468:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800146a:	e03a      	b.n	80014e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d020      	beq.n	80014b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001474:	4b36      	ldr	r3, [pc, #216]	; (8001550 <HAL_RCC_OscConfig+0x270>)
 8001476:	2201      	movs	r2, #1
 8001478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147a:	f7fe ff2b 	bl	80002d4 <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001482:	f7fe ff27 	bl	80002d4 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e19b      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001494:	4b2d      	ldr	r3, [pc, #180]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0f0      	beq.n	8001482 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a0:	4b2a      	ldr	r3, [pc, #168]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	695b      	ldr	r3, [r3, #20]
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	4927      	ldr	r1, [pc, #156]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80014b0:	4313      	orrs	r3, r2
 80014b2:	600b      	str	r3, [r1, #0]
 80014b4:	e015      	b.n	80014e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014b6:	4b26      	ldr	r3, [pc, #152]	; (8001550 <HAL_RCC_OscConfig+0x270>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014bc:	f7fe ff0a 	bl	80002d4 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c4:	f7fe ff06 	bl	80002d4 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e17a      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d6:	4b1d      	ldr	r3, [pc, #116]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f0      	bne.n	80014c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d03a      	beq.n	8001564 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d019      	beq.n	800152a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014f6:	4b17      	ldr	r3, [pc, #92]	; (8001554 <HAL_RCC_OscConfig+0x274>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fc:	f7fe feea 	bl	80002d4 <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001504:	f7fe fee6 	bl	80002d4 <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e15a      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001516:	4b0d      	ldr	r3, [pc, #52]	; (800154c <HAL_RCC_OscConfig+0x26c>)
 8001518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0f0      	beq.n	8001504 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001522:	2001      	movs	r0, #1
 8001524:	f000 faa8 	bl	8001a78 <RCC_Delay>
 8001528:	e01c      	b.n	8001564 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_RCC_OscConfig+0x274>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001530:	f7fe fed0 	bl	80002d4 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001536:	e00f      	b.n	8001558 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001538:	f7fe fecc 	bl	80002d4 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d908      	bls.n	8001558 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e140      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
 800154a:	bf00      	nop
 800154c:	40021000 	.word	0x40021000
 8001550:	42420000 	.word	0x42420000
 8001554:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001558:	4b9e      	ldr	r3, [pc, #632]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 800155a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800155c:	f003 0302 	and.w	r3, r3, #2
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1e9      	bne.n	8001538 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0304 	and.w	r3, r3, #4
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 80a6 	beq.w	80016be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001572:	2300      	movs	r3, #0
 8001574:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001576:	4b97      	ldr	r3, [pc, #604]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10d      	bne.n	800159e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001582:	4b94      	ldr	r3, [pc, #592]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	4a93      	ldr	r2, [pc, #588]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800158c:	61d3      	str	r3, [r2, #28]
 800158e:	4b91      	ldr	r3, [pc, #580]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800159a:	2301      	movs	r3, #1
 800159c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159e:	4b8e      	ldr	r3, [pc, #568]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d118      	bne.n	80015dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015aa:	4b8b      	ldr	r3, [pc, #556]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a8a      	ldr	r2, [pc, #552]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 80015b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015b6:	f7fe fe8d 	bl	80002d4 <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015be:	f7fe fe89 	bl	80002d4 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b64      	cmp	r3, #100	; 0x64
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e0fd      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d0:	4b81      	ldr	r3, [pc, #516]	; (80017d8 <HAL_RCC_OscConfig+0x4f8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0f0      	beq.n	80015be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d106      	bne.n	80015f2 <HAL_RCC_OscConfig+0x312>
 80015e4:	4b7b      	ldr	r3, [pc, #492]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 80015e6:	6a1b      	ldr	r3, [r3, #32]
 80015e8:	4a7a      	ldr	r2, [pc, #488]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	6213      	str	r3, [r2, #32]
 80015f0:	e02d      	b.n	800164e <HAL_RCC_OscConfig+0x36e>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d10c      	bne.n	8001614 <HAL_RCC_OscConfig+0x334>
 80015fa:	4b76      	ldr	r3, [pc, #472]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	4a75      	ldr	r2, [pc, #468]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001600:	f023 0301 	bic.w	r3, r3, #1
 8001604:	6213      	str	r3, [r2, #32]
 8001606:	4b73      	ldr	r3, [pc, #460]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	4a72      	ldr	r2, [pc, #456]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 800160c:	f023 0304 	bic.w	r3, r3, #4
 8001610:	6213      	str	r3, [r2, #32]
 8001612:	e01c      	b.n	800164e <HAL_RCC_OscConfig+0x36e>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	2b05      	cmp	r3, #5
 800161a:	d10c      	bne.n	8001636 <HAL_RCC_OscConfig+0x356>
 800161c:	4b6d      	ldr	r3, [pc, #436]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	4a6c      	ldr	r2, [pc, #432]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001622:	f043 0304 	orr.w	r3, r3, #4
 8001626:	6213      	str	r3, [r2, #32]
 8001628:	4b6a      	ldr	r3, [pc, #424]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	4a69      	ldr	r2, [pc, #420]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	6213      	str	r3, [r2, #32]
 8001634:	e00b      	b.n	800164e <HAL_RCC_OscConfig+0x36e>
 8001636:	4b67      	ldr	r3, [pc, #412]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	4a66      	ldr	r2, [pc, #408]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 800163c:	f023 0301 	bic.w	r3, r3, #1
 8001640:	6213      	str	r3, [r2, #32]
 8001642:	4b64      	ldr	r3, [pc, #400]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	4a63      	ldr	r2, [pc, #396]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001648:	f023 0304 	bic.w	r3, r3, #4
 800164c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d015      	beq.n	8001682 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001656:	f7fe fe3d 	bl	80002d4 <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800165c:	e00a      	b.n	8001674 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800165e:	f7fe fe39 	bl	80002d4 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	f241 3288 	movw	r2, #5000	; 0x1388
 800166c:	4293      	cmp	r3, r2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e0ab      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001674:	4b57      	ldr	r3, [pc, #348]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0ee      	beq.n	800165e <HAL_RCC_OscConfig+0x37e>
 8001680:	e014      	b.n	80016ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001682:	f7fe fe27 	bl	80002d4 <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001688:	e00a      	b.n	80016a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800168a:	f7fe fe23 	bl	80002d4 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	f241 3288 	movw	r2, #5000	; 0x1388
 8001698:	4293      	cmp	r3, r2
 800169a:	d901      	bls.n	80016a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800169c:	2303      	movs	r3, #3
 800169e:	e095      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a0:	4b4c      	ldr	r3, [pc, #304]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1ee      	bne.n	800168a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016ac:	7dfb      	ldrb	r3, [r7, #23]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d105      	bne.n	80016be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016b2:	4b48      	ldr	r3, [pc, #288]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	4a47      	ldr	r2, [pc, #284]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 80016b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 8081 	beq.w	80017ca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016c8:	4b42      	ldr	r3, [pc, #264]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f003 030c 	and.w	r3, r3, #12
 80016d0:	2b08      	cmp	r3, #8
 80016d2:	d061      	beq.n	8001798 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69db      	ldr	r3, [r3, #28]
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d146      	bne.n	800176a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016dc:	4b3f      	ldr	r3, [pc, #252]	; (80017dc <HAL_RCC_OscConfig+0x4fc>)
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e2:	f7fe fdf7 	bl	80002d4 <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ea:	f7fe fdf3 	bl	80002d4 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e067      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016fc:	4b35      	ldr	r3, [pc, #212]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f0      	bne.n	80016ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001710:	d108      	bne.n	8001724 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001712:	4b30      	ldr	r3, [pc, #192]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	492d      	ldr	r1, [pc, #180]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001720:	4313      	orrs	r3, r2
 8001722:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001724:	4b2b      	ldr	r3, [pc, #172]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a19      	ldr	r1, [r3, #32]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001734:	430b      	orrs	r3, r1
 8001736:	4927      	ldr	r1, [pc, #156]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 8001738:	4313      	orrs	r3, r2
 800173a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800173c:	4b27      	ldr	r3, [pc, #156]	; (80017dc <HAL_RCC_OscConfig+0x4fc>)
 800173e:	2201      	movs	r2, #1
 8001740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001742:	f7fe fdc7 	bl	80002d4 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800174a:	f7fe fdc3 	bl	80002d4 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e037      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800175c:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0f0      	beq.n	800174a <HAL_RCC_OscConfig+0x46a>
 8001768:	e02f      	b.n	80017ca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176a:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <HAL_RCC_OscConfig+0x4fc>)
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001770:	f7fe fdb0 	bl	80002d4 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001778:	f7fe fdac 	bl	80002d4 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e020      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800178a:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0x498>
 8001796:	e018      	b.n	80017ca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69db      	ldr	r3, [r3, #28]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d101      	bne.n	80017a4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e013      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017a4:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <HAL_RCC_OscConfig+0x4f4>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a1b      	ldr	r3, [r3, #32]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d106      	bne.n	80017c6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d001      	beq.n	80017ca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e000      	b.n	80017cc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40007000 	.word	0x40007000
 80017dc:	42420060 	.word	0x42420060

080017e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d101      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e0d0      	b.n	8001996 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017f4:	4b6a      	ldr	r3, [pc, #424]	; (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d910      	bls.n	8001824 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001802:	4b67      	ldr	r3, [pc, #412]	; (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f023 0207 	bic.w	r2, r3, #7
 800180a:	4965      	ldr	r1, [pc, #404]	; (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	4313      	orrs	r3, r2
 8001810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001812:	4b63      	ldr	r3, [pc, #396]	; (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	429a      	cmp	r2, r3
 800181e:	d001      	beq.n	8001824 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e0b8      	b.n	8001996 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d020      	beq.n	8001872 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b00      	cmp	r3, #0
 800183a:	d005      	beq.n	8001848 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800183c:	4b59      	ldr	r3, [pc, #356]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	4a58      	ldr	r2, [pc, #352]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001842:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001846:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0308 	and.w	r3, r3, #8
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001854:	4b53      	ldr	r3, [pc, #332]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	4a52      	ldr	r2, [pc, #328]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 800185a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800185e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001860:	4b50      	ldr	r3, [pc, #320]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	494d      	ldr	r1, [pc, #308]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 800186e:	4313      	orrs	r3, r2
 8001870:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b00      	cmp	r3, #0
 800187c:	d040      	beq.n	8001900 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d107      	bne.n	8001896 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001886:	4b47      	ldr	r3, [pc, #284]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d115      	bne.n	80018be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e07f      	b.n	8001996 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b02      	cmp	r3, #2
 800189c:	d107      	bne.n	80018ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800189e:	4b41      	ldr	r3, [pc, #260]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d109      	bne.n	80018be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e073      	b.n	8001996 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ae:	4b3d      	ldr	r3, [pc, #244]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e06b      	b.n	8001996 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018be:	4b39      	ldr	r3, [pc, #228]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f023 0203 	bic.w	r2, r3, #3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	4936      	ldr	r1, [pc, #216]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018d0:	f7fe fd00 	bl	80002d4 <HAL_GetTick>
 80018d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018d6:	e00a      	b.n	80018ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d8:	f7fe fcfc 	bl	80002d4 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e053      	b.n	8001996 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ee:	4b2d      	ldr	r3, [pc, #180]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f003 020c 	and.w	r2, r3, #12
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d1eb      	bne.n	80018d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001900:	4b27      	ldr	r3, [pc, #156]	; (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	d210      	bcs.n	8001930 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800190e:	4b24      	ldr	r3, [pc, #144]	; (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f023 0207 	bic.w	r2, r3, #7
 8001916:	4922      	ldr	r1, [pc, #136]	; (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	4313      	orrs	r3, r2
 800191c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800191e:	4b20      	ldr	r3, [pc, #128]	; (80019a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	429a      	cmp	r2, r3
 800192a:	d001      	beq.n	8001930 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e032      	b.n	8001996 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	d008      	beq.n	800194e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800193c:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	4916      	ldr	r1, [pc, #88]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 800194a:	4313      	orrs	r3, r2
 800194c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0308 	and.w	r3, r3, #8
 8001956:	2b00      	cmp	r3, #0
 8001958:	d009      	beq.n	800196e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800195a:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	490e      	ldr	r1, [pc, #56]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 800196a:	4313      	orrs	r3, r2
 800196c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800196e:	f000 f821 	bl	80019b4 <HAL_RCC_GetSysClockFreq>
 8001972:	4601      	mov	r1, r0
 8001974:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	091b      	lsrs	r3, r3, #4
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001980:	5cd3      	ldrb	r3, [r2, r3]
 8001982:	fa21 f303 	lsr.w	r3, r1, r3
 8001986:	4a09      	ldr	r2, [pc, #36]	; (80019ac <HAL_RCC_ClockConfig+0x1cc>)
 8001988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800198a:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <HAL_RCC_ClockConfig+0x1d0>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7fe fc5e 	bl	8000250 <HAL_InitTick>

  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40022000 	.word	0x40022000
 80019a4:	40021000 	.word	0x40021000
 80019a8:	080056f4 	.word	0x080056f4
 80019ac:	200000f4 	.word	0x200000f4
 80019b0:	20000000 	.word	0x20000000

080019b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019b4:	b490      	push	{r4, r7}
 80019b6:	b08a      	sub	sp, #40	; 0x28
 80019b8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80019ba:	4b2a      	ldr	r3, [pc, #168]	; (8001a64 <HAL_RCC_GetSysClockFreq+0xb0>)
 80019bc:	1d3c      	adds	r4, r7, #4
 80019be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80019c4:	4b28      	ldr	r3, [pc, #160]	; (8001a68 <HAL_RCC_GetSysClockFreq+0xb4>)
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
 80019ce:	2300      	movs	r3, #0
 80019d0:	61bb      	str	r3, [r7, #24]
 80019d2:	2300      	movs	r3, #0
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
 80019d6:	2300      	movs	r3, #0
 80019d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019de:	4b23      	ldr	r3, [pc, #140]	; (8001a6c <HAL_RCC_GetSysClockFreq+0xb8>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f003 030c 	and.w	r3, r3, #12
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	d002      	beq.n	80019f4 <HAL_RCC_GetSysClockFreq+0x40>
 80019ee:	2b08      	cmp	r3, #8
 80019f0:	d003      	beq.n	80019fa <HAL_RCC_GetSysClockFreq+0x46>
 80019f2:	e02d      	b.n	8001a50 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019f4:	4b1e      	ldr	r3, [pc, #120]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019f6:	623b      	str	r3, [r7, #32]
      break;
 80019f8:	e02d      	b.n	8001a56 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	0c9b      	lsrs	r3, r3, #18
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a06:	4413      	add	r3, r2
 8001a08:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a0c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d013      	beq.n	8001a40 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a18:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	0c5b      	lsrs	r3, r3, #17
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a26:	4413      	add	r3, r2
 8001a28:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a2c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	4a0f      	ldr	r2, [pc, #60]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a32:	fb02 f203 	mul.w	r2, r2, r3
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3e:	e004      	b.n	8001a4a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	4a0c      	ldr	r2, [pc, #48]	; (8001a74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a44:	fb02 f303 	mul.w	r3, r2, r3
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	623b      	str	r3, [r7, #32]
      break;
 8001a4e:	e002      	b.n	8001a56 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a50:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a52:	623b      	str	r3, [r7, #32]
      break;
 8001a54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a56:	6a3b      	ldr	r3, [r7, #32]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3728      	adds	r7, #40	; 0x28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bc90      	pop	{r4, r7}
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	08005698 	.word	0x08005698
 8001a68:	080056a8 	.word	0x080056a8
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	007a1200 	.word	0x007a1200
 8001a74:	003d0900 	.word	0x003d0900

08001a78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a80:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <RCC_Delay+0x34>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a0a      	ldr	r2, [pc, #40]	; (8001ab0 <RCC_Delay+0x38>)
 8001a86:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8a:	0a5b      	lsrs	r3, r3, #9
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	fb02 f303 	mul.w	r3, r2, r3
 8001a92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a94:	bf00      	nop
  }
  while (Delay --);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	1e5a      	subs	r2, r3, #1
 8001a9a:	60fa      	str	r2, [r7, #12]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1f9      	bne.n	8001a94 <RCC_Delay+0x1c>
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	200000f4 	.word	0x200000f4
 8001ab0:	10624dd3 	.word	0x10624dd3

08001ab4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d07d      	beq.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ad4:	4b4f      	ldr	r3, [pc, #316]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ad6:	69db      	ldr	r3, [r3, #28]
 8001ad8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10d      	bne.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae0:	4b4c      	ldr	r3, [pc, #304]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	4a4b      	ldr	r2, [pc, #300]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aea:	61d3      	str	r3, [r2, #28]
 8001aec:	4b49      	ldr	r3, [pc, #292]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001aee:	69db      	ldr	r3, [r3, #28]
 8001af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001af8:	2301      	movs	r3, #1
 8001afa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afc:	4b46      	ldr	r3, [pc, #280]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d118      	bne.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b08:	4b43      	ldr	r3, [pc, #268]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a42      	ldr	r2, [pc, #264]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b14:	f7fe fbde 	bl	80002d4 <HAL_GetTick>
 8001b18:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1a:	e008      	b.n	8001b2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b1c:	f7fe fbda 	bl	80002d4 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b64      	cmp	r3, #100	; 0x64
 8001b28:	d901      	bls.n	8001b2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e06d      	b.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2e:	4b3a      	ldr	r3, [pc, #232]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f0      	beq.n	8001b1c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b3a:	4b36      	ldr	r3, [pc, #216]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b42:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d02e      	beq.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d027      	beq.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b58:	4b2e      	ldr	r3, [pc, #184]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
 8001b5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b60:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b62:	4b2e      	ldr	r3, [pc, #184]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b68:	4b2c      	ldr	r3, [pc, #176]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001b6e:	4a29      	ldr	r2, [pc, #164]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d014      	beq.n	8001ba8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7e:	f7fe fba9 	bl	80002d4 <HAL_GetTick>
 8001b82:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b84:	e00a      	b.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b86:	f7fe fba5 	bl	80002d4 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d901      	bls.n	8001b9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	e036      	b.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b9c:	4b1d      	ldr	r3, [pc, #116]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	f003 0302 	and.w	r3, r3, #2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d0ee      	beq.n	8001b86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ba8:	4b1a      	ldr	r3, [pc, #104]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001baa:	6a1b      	ldr	r3, [r3, #32]
 8001bac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	4917      	ldr	r1, [pc, #92]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bba:	7dfb      	ldrb	r3, [r7, #23]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d105      	bne.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc0:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	4a13      	ldr	r2, [pc, #76]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d008      	beq.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001bd8:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	490b      	ldr	r1, [pc, #44]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0310 	and.w	r3, r3, #16
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d008      	beq.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001bf6:	4b07      	ldr	r3, [pc, #28]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	4904      	ldr	r1, [pc, #16]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40021000 	.word	0x40021000
 8001c18:	40007000 	.word	0x40007000
 8001c1c:	42420440 	.word	0x42420440

08001c20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e01d      	b.n	8001c6e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d106      	bne.n	8001c4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f003 f896 	bl	8004d78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3304      	adds	r3, #4
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4610      	mov	r0, r2
 8001c60:	f000 f8d0 	bl	8001e04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	60f8      	str	r0, [r7, #12]
 8001c80:	60b9      	str	r1, [r7, #8]
 8001c82:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d101      	bne.n	8001c92 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e0b4      	b.n	8001dfc <HAL_TIM_PWM_ConfigChannel+0x184>
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2202      	movs	r2, #2
 8001c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b0c      	cmp	r3, #12
 8001ca6:	f200 809f 	bhi.w	8001de8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8001caa:	a201      	add	r2, pc, #4	; (adr r2, 8001cb0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb0:	08001ce5 	.word	0x08001ce5
 8001cb4:	08001de9 	.word	0x08001de9
 8001cb8:	08001de9 	.word	0x08001de9
 8001cbc:	08001de9 	.word	0x08001de9
 8001cc0:	08001d25 	.word	0x08001d25
 8001cc4:	08001de9 	.word	0x08001de9
 8001cc8:	08001de9 	.word	0x08001de9
 8001ccc:	08001de9 	.word	0x08001de9
 8001cd0:	08001d67 	.word	0x08001d67
 8001cd4:	08001de9 	.word	0x08001de9
 8001cd8:	08001de9 	.word	0x08001de9
 8001cdc:	08001de9 	.word	0x08001de9
 8001ce0:	08001da7 	.word	0x08001da7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f000 f904 	bl	8001ef8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	699a      	ldr	r2, [r3, #24]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0208 	orr.w	r2, r2, #8
 8001cfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	699a      	ldr	r2, [r3, #24]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 0204 	bic.w	r2, r2, #4
 8001d0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6999      	ldr	r1, [r3, #24]
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	691a      	ldr	r2, [r3, #16]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	619a      	str	r2, [r3, #24]
      break;
 8001d22:	e062      	b.n	8001dea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68b9      	ldr	r1, [r7, #8]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f000 f954 	bl	8001fd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	699a      	ldr	r2, [r3, #24]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	699a      	ldr	r2, [r3, #24]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6999      	ldr	r1, [r3, #24]
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	021a      	lsls	r2, r3, #8
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	430a      	orrs	r2, r1
 8001d62:	619a      	str	r2, [r3, #24]
      break;
 8001d64:	e041      	b.n	8001dea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68b9      	ldr	r1, [r7, #8]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f000 f9a7 	bl	80020c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	69da      	ldr	r2, [r3, #28]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f042 0208 	orr.w	r2, r2, #8
 8001d80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	69da      	ldr	r2, [r3, #28]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f022 0204 	bic.w	r2, r2, #4
 8001d90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	69d9      	ldr	r1, [r3, #28]
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	691a      	ldr	r2, [r3, #16]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	61da      	str	r2, [r3, #28]
      break;
 8001da4:	e021      	b.n	8001dea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68b9      	ldr	r1, [r7, #8]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f000 f9fb 	bl	80021a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	69da      	ldr	r2, [r3, #28]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001dc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	69da      	ldr	r2, [r3, #28]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	69d9      	ldr	r1, [r3, #28]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	021a      	lsls	r2, r3, #8
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	61da      	str	r2, [r3, #28]
      break;
 8001de6:	e000      	b.n	8001dea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8001de8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a33      	ldr	r2, [pc, #204]	; (8001ee4 <TIM_Base_SetConfig+0xe0>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d013      	beq.n	8001e44 <TIM_Base_SetConfig+0x40>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a32      	ldr	r2, [pc, #200]	; (8001ee8 <TIM_Base_SetConfig+0xe4>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d00f      	beq.n	8001e44 <TIM_Base_SetConfig+0x40>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e2a:	d00b      	beq.n	8001e44 <TIM_Base_SetConfig+0x40>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a2f      	ldr	r2, [pc, #188]	; (8001eec <TIM_Base_SetConfig+0xe8>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d007      	beq.n	8001e44 <TIM_Base_SetConfig+0x40>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a2e      	ldr	r2, [pc, #184]	; (8001ef0 <TIM_Base_SetConfig+0xec>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d003      	beq.n	8001e44 <TIM_Base_SetConfig+0x40>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a2d      	ldr	r2, [pc, #180]	; (8001ef4 <TIM_Base_SetConfig+0xf0>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d108      	bne.n	8001e56 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a22      	ldr	r2, [pc, #136]	; (8001ee4 <TIM_Base_SetConfig+0xe0>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d013      	beq.n	8001e86 <TIM_Base_SetConfig+0x82>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a21      	ldr	r2, [pc, #132]	; (8001ee8 <TIM_Base_SetConfig+0xe4>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d00f      	beq.n	8001e86 <TIM_Base_SetConfig+0x82>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e6c:	d00b      	beq.n	8001e86 <TIM_Base_SetConfig+0x82>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a1e      	ldr	r2, [pc, #120]	; (8001eec <TIM_Base_SetConfig+0xe8>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d007      	beq.n	8001e86 <TIM_Base_SetConfig+0x82>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a1d      	ldr	r2, [pc, #116]	; (8001ef0 <TIM_Base_SetConfig+0xec>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d003      	beq.n	8001e86 <TIM_Base_SetConfig+0x82>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a1c      	ldr	r2, [pc, #112]	; (8001ef4 <TIM_Base_SetConfig+0xf0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d108      	bne.n	8001e98 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	4a09      	ldr	r2, [pc, #36]	; (8001ee4 <TIM_Base_SetConfig+0xe0>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d003      	beq.n	8001ecc <TIM_Base_SetConfig+0xc8>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a08      	ldr	r2, [pc, #32]	; (8001ee8 <TIM_Base_SetConfig+0xe4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d103      	bne.n	8001ed4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	691a      	ldr	r2, [r3, #16]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	615a      	str	r2, [r3, #20]
}
 8001eda:	bf00      	nop
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr
 8001ee4:	40012c00 	.word	0x40012c00
 8001ee8:	40013400 	.word	0x40013400
 8001eec:	40000400 	.word	0x40000400
 8001ef0:	40000800 	.word	0x40000800
 8001ef4:	40000c00 	.word	0x40000c00

08001ef8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b087      	sub	sp, #28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	f023 0201 	bic.w	r2, r3, #1
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f023 0303 	bic.w	r3, r3, #3
 8001f2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	f023 0302 	bic.w	r3, r3, #2
 8001f40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	697a      	ldr	r2, [r7, #20]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a20      	ldr	r2, [pc, #128]	; (8001fd0 <TIM_OC1_SetConfig+0xd8>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d003      	beq.n	8001f5c <TIM_OC1_SetConfig+0x64>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a1f      	ldr	r2, [pc, #124]	; (8001fd4 <TIM_OC1_SetConfig+0xdc>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d10c      	bne.n	8001f76 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	f023 0308 	bic.w	r3, r3, #8
 8001f62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	697a      	ldr	r2, [r7, #20]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f023 0304 	bic.w	r3, r3, #4
 8001f74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a15      	ldr	r2, [pc, #84]	; (8001fd0 <TIM_OC1_SetConfig+0xd8>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d003      	beq.n	8001f86 <TIM_OC1_SetConfig+0x8e>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a14      	ldr	r2, [pc, #80]	; (8001fd4 <TIM_OC1_SetConfig+0xdc>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d111      	bne.n	8001faa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	697a      	ldr	r2, [r7, #20]
 8001fc2:	621a      	str	r2, [r3, #32]
}
 8001fc4:	bf00      	nop
 8001fc6:	371c      	adds	r7, #28
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	40012c00 	.word	0x40012c00
 8001fd4:	40013400 	.word	0x40013400

08001fd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b087      	sub	sp, #28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	f023 0210 	bic.w	r2, r3, #16
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800200e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	021b      	lsls	r3, r3, #8
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	4313      	orrs	r3, r2
 800201a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	f023 0320 	bic.w	r3, r3, #32
 8002022:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	011b      	lsls	r3, r3, #4
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	4313      	orrs	r3, r2
 800202e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a21      	ldr	r2, [pc, #132]	; (80020b8 <TIM_OC2_SetConfig+0xe0>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d003      	beq.n	8002040 <TIM_OC2_SetConfig+0x68>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a20      	ldr	r2, [pc, #128]	; (80020bc <TIM_OC2_SetConfig+0xe4>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d10d      	bne.n	800205c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002046:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	011b      	lsls	r3, r3, #4
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	4313      	orrs	r3, r2
 8002052:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800205a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a16      	ldr	r2, [pc, #88]	; (80020b8 <TIM_OC2_SetConfig+0xe0>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d003      	beq.n	800206c <TIM_OC2_SetConfig+0x94>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a15      	ldr	r2, [pc, #84]	; (80020bc <TIM_OC2_SetConfig+0xe4>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d113      	bne.n	8002094 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002072:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800207a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4313      	orrs	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68fa      	ldr	r2, [r7, #12]
 800209e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	621a      	str	r2, [r3, #32]
}
 80020ae:	bf00      	nop
 80020b0:	371c      	adds	r7, #28
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	40012c00 	.word	0x40012c00
 80020bc:	40013400 	.word	0x40013400

080020c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b087      	sub	sp, #28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6a1b      	ldr	r3, [r3, #32]
 80020ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f023 0303 	bic.w	r3, r3, #3
 80020f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	4313      	orrs	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002108:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	021b      	lsls	r3, r3, #8
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	4313      	orrs	r3, r2
 8002114:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a21      	ldr	r2, [pc, #132]	; (80021a0 <TIM_OC3_SetConfig+0xe0>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d003      	beq.n	8002126 <TIM_OC3_SetConfig+0x66>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a20      	ldr	r2, [pc, #128]	; (80021a4 <TIM_OC3_SetConfig+0xe4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d10d      	bne.n	8002142 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800212c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	021b      	lsls	r3, r3, #8
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	4313      	orrs	r3, r2
 8002138:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002140:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a16      	ldr	r2, [pc, #88]	; (80021a0 <TIM_OC3_SetConfig+0xe0>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d003      	beq.n	8002152 <TIM_OC3_SetConfig+0x92>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a15      	ldr	r2, [pc, #84]	; (80021a4 <TIM_OC3_SetConfig+0xe4>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d113      	bne.n	800217a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002158:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002160:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	011b      	lsls	r3, r3, #4
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	4313      	orrs	r3, r2
 800216c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	011b      	lsls	r3, r3, #4
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4313      	orrs	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	697a      	ldr	r2, [r7, #20]
 8002192:	621a      	str	r2, [r3, #32]
}
 8002194:	bf00      	nop
 8002196:	371c      	adds	r7, #28
 8002198:	46bd      	mov	sp, r7
 800219a:	bc80      	pop	{r7}
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40012c00 	.word	0x40012c00
 80021a4:	40013400 	.word	0x40013400

080021a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b087      	sub	sp, #28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	021b      	lsls	r3, r3, #8
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80021f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	031b      	lsls	r3, r3, #12
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a11      	ldr	r2, [pc, #68]	; (8002248 <TIM_OC4_SetConfig+0xa0>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d003      	beq.n	8002210 <TIM_OC4_SetConfig+0x68>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a10      	ldr	r2, [pc, #64]	; (800224c <TIM_OC4_SetConfig+0xa4>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d109      	bne.n	8002224 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002216:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	695b      	ldr	r3, [r3, #20]
 800221c:	019b      	lsls	r3, r3, #6
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	4313      	orrs	r3, r2
 8002222:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	621a      	str	r2, [r3, #32]
}
 800223e:	bf00      	nop
 8002240:	371c      	adds	r7, #28
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr
 8002248:	40012c00 	.word	0x40012c00
 800224c:	40013400 	.word	0x40013400

08002250 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002264:	2302      	movs	r3, #2
 8002266:	e032      	b.n	80022ce <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2202      	movs	r2, #2
 8002274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800228e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68fa      	ldr	r2, [r7, #12]
 8002296:	4313      	orrs	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022a0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr

080022d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d101      	bne.n	80022f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80022f0:	2302      	movs	r3, #2
 80022f2:	e03d      	b.n	8002370 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	4313      	orrs	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	4313      	orrs	r3, r2
 8002316:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	4313      	orrs	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4313      	orrs	r3, r2
 8002332:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	4313      	orrs	r3, r2
 8002340:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	695b      	ldr	r3, [r3, #20]
 800234c:	4313      	orrs	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	4313      	orrs	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr

0800237a <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800237a:	b084      	sub	sp, #16
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	f107 0014 	add.w	r0, r7, #20
 8002388:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	bc80      	pop	{r7}
 8002396:	b004      	add	sp, #16
 8002398:	4770      	bx	lr

0800239a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800239a:	b480      	push	{r7}
 800239c:	b085      	sub	sp, #20
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80023a2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80023a6:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	89fb      	ldrh	r3, [r7, #14]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr

080023c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80023d0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80023d4:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80023dc:	b29b      	uxth	r3, r3
 80023de:	b21a      	sxth	r2, r3
 80023e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023e4:	43db      	mvns	r3, r3
 80023e6:	b21b      	sxth	r3, r3
 80023e8:	4013      	ands	r3, r2
 80023ea:	b21b      	sxth	r3, r3
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr

08002400 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr

08002418 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002418:	b084      	sub	sp, #16
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	f107 0014 	add.w	r0, r7, #20
 8002426:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff ffa5 	bl	800239a <USB_EnableGlobalInt>

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800245c:	b004      	add	sp, #16
 800245e:	4770      	bx	lr

08002460 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002460:	b490      	push	{r4, r7}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800246a:	2300      	movs	r3, #0
 800246c:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	b29b      	uxth	r3, r3
 800247c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002484:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	78db      	ldrb	r3, [r3, #3]
 800248a:	2b03      	cmp	r3, #3
 800248c:	d819      	bhi.n	80024c2 <USB_ActivateEndpoint+0x62>
 800248e:	a201      	add	r2, pc, #4	; (adr r2, 8002494 <USB_ActivateEndpoint+0x34>)
 8002490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002494:	080024a5 	.word	0x080024a5
 8002498:	080024b9 	.word	0x080024b9
 800249c:	080024c9 	.word	0x080024c9
 80024a0:	080024af 	.word	0x080024af
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80024a4:	89bb      	ldrh	r3, [r7, #12]
 80024a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024aa:	81bb      	strh	r3, [r7, #12]
      break;
 80024ac:	e00d      	b.n	80024ca <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80024ae:	89bb      	ldrh	r3, [r7, #12]
 80024b0:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80024b4:	81bb      	strh	r3, [r7, #12]
      break;
 80024b6:	e008      	b.n	80024ca <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80024b8:	89bb      	ldrh	r3, [r7, #12]
 80024ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024be:	81bb      	strh	r3, [r7, #12]
      break;
 80024c0:	e003      	b.n	80024ca <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	73fb      	strb	r3, [r7, #15]
      break;
 80024c6:	e000      	b.n	80024ca <USB_ActivateEndpoint+0x6a>
      break;
 80024c8:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	441a      	add	r2, r3
 80024d4:	89bb      	ldrh	r3, [r7, #12]
 80024d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	881b      	ldrh	r3, [r3, #0]
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002500:	b29a      	uxth	r2, r3
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	b29b      	uxth	r3, r3
 8002508:	4313      	orrs	r3, r2
 800250a:	b29c      	uxth	r4, r3
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	441a      	add	r2, r3
 8002516:	4b8a      	ldr	r3, [pc, #552]	; (8002740 <USB_ActivateEndpoint+0x2e0>)
 8002518:	4323      	orrs	r3, r4
 800251a:	b29b      	uxth	r3, r3
 800251c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	7b1b      	ldrb	r3, [r3, #12]
 8002522:	2b00      	cmp	r3, #0
 8002524:	f040 8112 	bne.w	800274c <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	785b      	ldrb	r3, [r3, #1]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d067      	beq.n	8002600 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002530:	687c      	ldr	r4, [r7, #4]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002538:	b29b      	uxth	r3, r3
 800253a:	441c      	add	r4, r3
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	011b      	lsls	r3, r3, #4
 8002542:	4423      	add	r3, r4
 8002544:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002548:	461c      	mov	r4, r3
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	88db      	ldrh	r3, [r3, #6]
 800254e:	085b      	lsrs	r3, r3, #1
 8002550:	b29b      	uxth	r3, r3
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	b29b      	uxth	r3, r3
 8002556:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	b29c      	uxth	r4, r3
 8002566:	4623      	mov	r3, r4
 8002568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256c:	2b00      	cmp	r3, #0
 800256e:	d014      	beq.n	800259a <USB_ActivateEndpoint+0x13a>
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	881b      	ldrh	r3, [r3, #0]
 800257c:	b29b      	uxth	r3, r3
 800257e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002586:	b29c      	uxth	r4, r3
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	441a      	add	r2, r3
 8002592:	4b6c      	ldr	r3, [pc, #432]	; (8002744 <USB_ActivateEndpoint+0x2e4>)
 8002594:	4323      	orrs	r3, r4
 8002596:	b29b      	uxth	r3, r3
 8002598:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	78db      	ldrb	r3, [r3, #3]
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d018      	beq.n	80025d4 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	881b      	ldrh	r3, [r3, #0]
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025b8:	b29c      	uxth	r4, r3
 80025ba:	f084 0320 	eor.w	r3, r4, #32
 80025be:	b29c      	uxth	r4, r3
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	441a      	add	r2, r3
 80025ca:	4b5d      	ldr	r3, [pc, #372]	; (8002740 <USB_ActivateEndpoint+0x2e0>)
 80025cc:	4323      	orrs	r3, r4
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	8013      	strh	r3, [r2, #0]
 80025d2:	e22b      	b.n	8002a2c <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	881b      	ldrh	r3, [r3, #0]
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025ea:	b29c      	uxth	r4, r3
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	441a      	add	r2, r3
 80025f6:	4b52      	ldr	r3, [pc, #328]	; (8002740 <USB_ActivateEndpoint+0x2e0>)
 80025f8:	4323      	orrs	r3, r4
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	8013      	strh	r3, [r2, #0]
 80025fe:	e215      	b.n	8002a2c <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002600:	687c      	ldr	r4, [r7, #4]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002608:	b29b      	uxth	r3, r3
 800260a:	441c      	add	r4, r3
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	4423      	add	r3, r4
 8002614:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8002618:	461c      	mov	r4, r3
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	88db      	ldrh	r3, [r3, #6]
 800261e:	085b      	lsrs	r3, r3, #1
 8002620:	b29b      	uxth	r3, r3
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	b29b      	uxth	r3, r3
 8002626:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002628:	687c      	ldr	r4, [r7, #4]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002630:	b29b      	uxth	r3, r3
 8002632:	441c      	add	r4, r3
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	011b      	lsls	r3, r3, #4
 800263a:	4423      	add	r3, r4
 800263c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002640:	461c      	mov	r4, r3
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10e      	bne.n	8002668 <USB_ActivateEndpoint+0x208>
 800264a:	8823      	ldrh	r3, [r4, #0]
 800264c:	b29b      	uxth	r3, r3
 800264e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002652:	b29b      	uxth	r3, r3
 8002654:	8023      	strh	r3, [r4, #0]
 8002656:	8823      	ldrh	r3, [r4, #0]
 8002658:	b29b      	uxth	r3, r3
 800265a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800265e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002662:	b29b      	uxth	r3, r3
 8002664:	8023      	strh	r3, [r4, #0]
 8002666:	e02d      	b.n	80026c4 <USB_ActivateEndpoint+0x264>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	2b3e      	cmp	r3, #62	; 0x3e
 800266e:	d812      	bhi.n	8002696 <USB_ActivateEndpoint+0x236>
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	085b      	lsrs	r3, r3, #1
 8002676:	60bb      	str	r3, [r7, #8]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d002      	beq.n	800268a <USB_ActivateEndpoint+0x22a>
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	3301      	adds	r3, #1
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	b29b      	uxth	r3, r3
 800268e:	029b      	lsls	r3, r3, #10
 8002690:	b29b      	uxth	r3, r3
 8002692:	8023      	strh	r3, [r4, #0]
 8002694:	e016      	b.n	80026c4 <USB_ActivateEndpoint+0x264>
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	095b      	lsrs	r3, r3, #5
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	f003 031f 	and.w	r3, r3, #31
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d102      	bne.n	80026b0 <USB_ActivateEndpoint+0x250>
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	3b01      	subs	r3, #1
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	029b      	lsls	r3, r3, #10
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	b29c      	uxth	r4, r3
 80026d2:	4623      	mov	r3, r4
 80026d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d014      	beq.n	8002706 <USB_ActivateEndpoint+0x2a6>
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026f2:	b29c      	uxth	r4, r3
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	441a      	add	r2, r3
 80026fe:	4b12      	ldr	r3, [pc, #72]	; (8002748 <USB_ActivateEndpoint+0x2e8>)
 8002700:	4323      	orrs	r3, r4
 8002702:	b29b      	uxth	r3, r3
 8002704:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4413      	add	r3, r2
 8002710:	881b      	ldrh	r3, [r3, #0]
 8002712:	b29b      	uxth	r3, r3
 8002714:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002718:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800271c:	b29c      	uxth	r4, r3
 800271e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002722:	b29c      	uxth	r4, r3
 8002724:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002728:	b29c      	uxth	r4, r3
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	441a      	add	r2, r3
 8002734:	4b02      	ldr	r3, [pc, #8]	; (8002740 <USB_ActivateEndpoint+0x2e0>)
 8002736:	4323      	orrs	r3, r4
 8002738:	b29b      	uxth	r3, r3
 800273a:	8013      	strh	r3, [r2, #0]
 800273c:	e176      	b.n	8002a2c <USB_ActivateEndpoint+0x5cc>
 800273e:	bf00      	nop
 8002740:	ffff8080 	.word	0xffff8080
 8002744:	ffff80c0 	.word	0xffff80c0
 8002748:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	881b      	ldrh	r3, [r3, #0]
 8002758:	b29b      	uxth	r3, r3
 800275a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800275e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002762:	b29c      	uxth	r4, r3
 8002764:	687a      	ldr	r2, [r7, #4]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	441a      	add	r2, r3
 800276e:	4b96      	ldr	r3, [pc, #600]	; (80029c8 <USB_ActivateEndpoint+0x568>)
 8002770:	4323      	orrs	r3, r4
 8002772:	b29b      	uxth	r3, r3
 8002774:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002776:	687c      	ldr	r4, [r7, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800277e:	b29b      	uxth	r3, r3
 8002780:	441c      	add	r4, r3
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	4423      	add	r3, r4
 800278a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800278e:	461c      	mov	r4, r3
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	891b      	ldrh	r3, [r3, #8]
 8002794:	085b      	lsrs	r3, r3, #1
 8002796:	b29b      	uxth	r3, r3
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	b29b      	uxth	r3, r3
 800279c:	8023      	strh	r3, [r4, #0]
 800279e:	687c      	ldr	r4, [r7, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	441c      	add	r4, r3
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	4423      	add	r3, r4
 80027b2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80027b6:	461c      	mov	r4, r3
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	895b      	ldrh	r3, [r3, #10]
 80027bc:	085b      	lsrs	r3, r3, #1
 80027be:	b29b      	uxth	r3, r3
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	785b      	ldrb	r3, [r3, #1]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f040 8088 	bne.w	80028e0 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4413      	add	r3, r2
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	b29c      	uxth	r4, r3
 80027de:	4623      	mov	r3, r4
 80027e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d014      	beq.n	8002812 <USB_ActivateEndpoint+0x3b2>
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027fe:	b29c      	uxth	r4, r3
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	441a      	add	r2, r3
 800280a:	4b70      	ldr	r3, [pc, #448]	; (80029cc <USB_ActivateEndpoint+0x56c>)
 800280c:	4323      	orrs	r3, r4
 800280e:	b29b      	uxth	r3, r3
 8002810:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	b29c      	uxth	r4, r3
 8002820:	4623      	mov	r3, r4
 8002822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002826:	2b00      	cmp	r3, #0
 8002828:	d014      	beq.n	8002854 <USB_ActivateEndpoint+0x3f4>
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4413      	add	r3, r2
 8002834:	881b      	ldrh	r3, [r3, #0]
 8002836:	b29b      	uxth	r3, r3
 8002838:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800283c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002840:	b29c      	uxth	r4, r3
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	441a      	add	r2, r3
 800284c:	4b60      	ldr	r3, [pc, #384]	; (80029d0 <USB_ActivateEndpoint+0x570>)
 800284e:	4323      	orrs	r3, r4
 8002850:	b29b      	uxth	r3, r3
 8002852:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	881b      	ldrh	r3, [r3, #0]
 8002860:	b29b      	uxth	r3, r3
 8002862:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800286a:	b29c      	uxth	r4, r3
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	441a      	add	r2, r3
 8002876:	4b56      	ldr	r3, [pc, #344]	; (80029d0 <USB_ActivateEndpoint+0x570>)
 8002878:	4323      	orrs	r3, r4
 800287a:	b29b      	uxth	r3, r3
 800287c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	b29b      	uxth	r3, r3
 800288c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002894:	b29c      	uxth	r4, r3
 8002896:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800289a:	b29c      	uxth	r4, r3
 800289c:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80028a0:	b29c      	uxth	r4, r3
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	441a      	add	r2, r3
 80028ac:	4b49      	ldr	r3, [pc, #292]	; (80029d4 <USB_ActivateEndpoint+0x574>)
 80028ae:	4323      	orrs	r3, r4
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028ca:	b29c      	uxth	r4, r3
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	441a      	add	r2, r3
 80028d6:	4b3f      	ldr	r3, [pc, #252]	; (80029d4 <USB_ActivateEndpoint+0x574>)
 80028d8:	4323      	orrs	r3, r4
 80028da:	b29b      	uxth	r3, r3
 80028dc:	8013      	strh	r3, [r2, #0]
 80028de:	e0a5      	b.n	8002a2c <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	4413      	add	r3, r2
 80028ea:	881b      	ldrh	r3, [r3, #0]
 80028ec:	b29c      	uxth	r4, r3
 80028ee:	4623      	mov	r3, r4
 80028f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d014      	beq.n	8002922 <USB_ActivateEndpoint+0x4c2>
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	4413      	add	r3, r2
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	b29b      	uxth	r3, r3
 8002906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800290a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800290e:	b29c      	uxth	r4, r3
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	441a      	add	r2, r3
 800291a:	4b2c      	ldr	r3, [pc, #176]	; (80029cc <USB_ActivateEndpoint+0x56c>)
 800291c:	4323      	orrs	r3, r4
 800291e:	b29b      	uxth	r3, r3
 8002920:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	881b      	ldrh	r3, [r3, #0]
 800292e:	b29c      	uxth	r4, r3
 8002930:	4623      	mov	r3, r4
 8002932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002936:	2b00      	cmp	r3, #0
 8002938:	d014      	beq.n	8002964 <USB_ActivateEndpoint+0x504>
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4413      	add	r3, r2
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	b29b      	uxth	r3, r3
 8002948:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800294c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002950:	b29c      	uxth	r4, r3
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	441a      	add	r2, r3
 800295c:	4b1c      	ldr	r3, [pc, #112]	; (80029d0 <USB_ActivateEndpoint+0x570>)
 800295e:	4323      	orrs	r3, r4
 8002960:	b29b      	uxth	r3, r3
 8002962:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	881b      	ldrh	r3, [r3, #0]
 8002970:	b29b      	uxth	r3, r3
 8002972:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800297a:	b29c      	uxth	r4, r3
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	441a      	add	r2, r3
 8002986:	4b11      	ldr	r3, [pc, #68]	; (80029cc <USB_ActivateEndpoint+0x56c>)
 8002988:	4323      	orrs	r3, r4
 800298a:	b29b      	uxth	r3, r3
 800298c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	78db      	ldrb	r3, [r3, #3]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d020      	beq.n	80029d8 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4413      	add	r3, r2
 80029a0:	881b      	ldrh	r3, [r3, #0]
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029ac:	b29c      	uxth	r4, r3
 80029ae:	f084 0320 	eor.w	r3, r4, #32
 80029b2:	b29c      	uxth	r4, r3
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	441a      	add	r2, r3
 80029be:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <USB_ActivateEndpoint+0x574>)
 80029c0:	4323      	orrs	r3, r4
 80029c2:	b29b      	uxth	r3, r3
 80029c4:	8013      	strh	r3, [r2, #0]
 80029c6:	e01c      	b.n	8002a02 <USB_ActivateEndpoint+0x5a2>
 80029c8:	ffff8180 	.word	0xffff8180
 80029cc:	ffffc080 	.word	0xffffc080
 80029d0:	ffff80c0 	.word	0xffff80c0
 80029d4:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	881b      	ldrh	r3, [r3, #0]
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029ee:	b29c      	uxth	r4, r3
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	441a      	add	r2, r3
 80029fa:	4b0f      	ldr	r3, [pc, #60]	; (8002a38 <USB_ActivateEndpoint+0x5d8>)
 80029fc:	4323      	orrs	r3, r4
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	881b      	ldrh	r3, [r3, #0]
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a18:	b29c      	uxth	r4, r3
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	441a      	add	r2, r3
 8002a24:	4b04      	ldr	r3, [pc, #16]	; (8002a38 <USB_ActivateEndpoint+0x5d8>)
 8002a26:	4323      	orrs	r3, r4
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3710      	adds	r7, #16
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc90      	pop	{r4, r7}
 8002a36:	4770      	bx	lr
 8002a38:	ffff8080 	.word	0xffff8080

08002a3c <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002a3c:	b490      	push	{r4, r7}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	7b1b      	ldrb	r3, [r3, #12]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d171      	bne.n	8002b32 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	785b      	ldrb	r3, [r3, #1]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d036      	beq.n	8002ac4 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	881b      	ldrh	r3, [r3, #0]
 8002a62:	b29c      	uxth	r4, r3
 8002a64:	4623      	mov	r3, r4
 8002a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d014      	beq.n	8002a98 <USB_DeactivateEndpoint+0x5c>
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	4413      	add	r3, r2
 8002a78:	881b      	ldrh	r3, [r3, #0]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a84:	b29c      	uxth	r4, r3
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	441a      	add	r2, r3
 8002a90:	4b6b      	ldr	r3, [pc, #428]	; (8002c40 <USB_DeactivateEndpoint+0x204>)
 8002a92:	4323      	orrs	r3, r4
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	881b      	ldrh	r3, [r3, #0]
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002aae:	b29c      	uxth	r4, r3
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	441a      	add	r2, r3
 8002aba:	4b62      	ldr	r3, [pc, #392]	; (8002c44 <USB_DeactivateEndpoint+0x208>)
 8002abc:	4323      	orrs	r3, r4
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	8013      	strh	r3, [r2, #0]
 8002ac2:	e144      	b.n	8002d4e <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	881b      	ldrh	r3, [r3, #0]
 8002ad0:	b29c      	uxth	r4, r3
 8002ad2:	4623      	mov	r3, r4
 8002ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d014      	beq.n	8002b06 <USB_DeactivateEndpoint+0xca>
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	881b      	ldrh	r3, [r3, #0]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af2:	b29c      	uxth	r4, r3
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	441a      	add	r2, r3
 8002afe:	4b52      	ldr	r3, [pc, #328]	; (8002c48 <USB_DeactivateEndpoint+0x20c>)
 8002b00:	4323      	orrs	r3, r4
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b1c:	b29c      	uxth	r4, r3
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	441a      	add	r2, r3
 8002b28:	4b46      	ldr	r3, [pc, #280]	; (8002c44 <USB_DeactivateEndpoint+0x208>)
 8002b2a:	4323      	orrs	r3, r4
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	8013      	strh	r3, [r2, #0]
 8002b30:	e10d      	b.n	8002d4e <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	785b      	ldrb	r3, [r3, #1]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f040 8088 	bne.w	8002c4c <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	881b      	ldrh	r3, [r3, #0]
 8002b48:	b29c      	uxth	r4, r3
 8002b4a:	4623      	mov	r3, r4
 8002b4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d014      	beq.n	8002b7e <USB_DeactivateEndpoint+0x142>
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b6a:	b29c      	uxth	r4, r3
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	441a      	add	r2, r3
 8002b76:	4b34      	ldr	r3, [pc, #208]	; (8002c48 <USB_DeactivateEndpoint+0x20c>)
 8002b78:	4323      	orrs	r3, r4
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	881b      	ldrh	r3, [r3, #0]
 8002b8a:	b29c      	uxth	r4, r3
 8002b8c:	4623      	mov	r3, r4
 8002b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d014      	beq.n	8002bc0 <USB_DeactivateEndpoint+0x184>
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bac:	b29c      	uxth	r4, r3
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	441a      	add	r2, r3
 8002bb8:	4b21      	ldr	r3, [pc, #132]	; (8002c40 <USB_DeactivateEndpoint+0x204>)
 8002bba:	4323      	orrs	r3, r4
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	881b      	ldrh	r3, [r3, #0]
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd6:	b29c      	uxth	r4, r3
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	441a      	add	r2, r3
 8002be2:	4b17      	ldr	r3, [pc, #92]	; (8002c40 <USB_DeactivateEndpoint+0x204>)
 8002be4:	4323      	orrs	r3, r4
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4413      	add	r3, r2
 8002bf4:	881b      	ldrh	r3, [r3, #0]
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c00:	b29c      	uxth	r4, r3
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	441a      	add	r2, r3
 8002c0c:	4b0d      	ldr	r3, [pc, #52]	; (8002c44 <USB_DeactivateEndpoint+0x208>)
 8002c0e:	4323      	orrs	r3, r4
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	881b      	ldrh	r3, [r3, #0]
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c2a:	b29c      	uxth	r4, r3
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	441a      	add	r2, r3
 8002c36:	4b03      	ldr	r3, [pc, #12]	; (8002c44 <USB_DeactivateEndpoint+0x208>)
 8002c38:	4323      	orrs	r3, r4
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	8013      	strh	r3, [r2, #0]
 8002c3e:	e086      	b.n	8002d4e <USB_DeactivateEndpoint+0x312>
 8002c40:	ffff80c0 	.word	0xffff80c0
 8002c44:	ffff8080 	.word	0xffff8080
 8002c48:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	b29c      	uxth	r4, r3
 8002c5a:	4623      	mov	r3, r4
 8002c5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d014      	beq.n	8002c8e <USB_DeactivateEndpoint+0x252>
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c7a:	b29c      	uxth	r4, r3
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	441a      	add	r2, r3
 8002c86:	4b35      	ldr	r3, [pc, #212]	; (8002d5c <USB_DeactivateEndpoint+0x320>)
 8002c88:	4323      	orrs	r3, r4
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	881b      	ldrh	r3, [r3, #0]
 8002c9a:	b29c      	uxth	r4, r3
 8002c9c:	4623      	mov	r3, r4
 8002c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d014      	beq.n	8002cd0 <USB_DeactivateEndpoint+0x294>
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4413      	add	r3, r2
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cbc:	b29c      	uxth	r4, r3
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	441a      	add	r2, r3
 8002cc8:	4b25      	ldr	r3, [pc, #148]	; (8002d60 <USB_DeactivateEndpoint+0x324>)
 8002cca:	4323      	orrs	r3, r4
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	881b      	ldrh	r3, [r3, #0]
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce6:	b29c      	uxth	r4, r3
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	441a      	add	r2, r3
 8002cf2:	4b1a      	ldr	r3, [pc, #104]	; (8002d5c <USB_DeactivateEndpoint+0x320>)
 8002cf4:	4323      	orrs	r3, r4
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	4413      	add	r3, r2
 8002d04:	881b      	ldrh	r3, [r3, #0]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d10:	b29c      	uxth	r4, r3
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	441a      	add	r2, r3
 8002d1c:	4b11      	ldr	r3, [pc, #68]	; (8002d64 <USB_DeactivateEndpoint+0x328>)
 8002d1e:	4323      	orrs	r3, r4
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	4413      	add	r3, r2
 8002d2e:	881b      	ldrh	r3, [r3, #0]
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d3a:	b29c      	uxth	r4, r3
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	441a      	add	r2, r3
 8002d46:	4b07      	ldr	r3, [pc, #28]	; (8002d64 <USB_DeactivateEndpoint+0x328>)
 8002d48:	4323      	orrs	r3, r4
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc90      	pop	{r4, r7}
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	ffffc080 	.word	0xffffc080
 8002d60:	ffff80c0 	.word	0xffff80c0
 8002d64:	ffff8080 	.word	0xffff8080

08002d68 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002d68:	b590      	push	{r4, r7, lr}
 8002d6a:	b08d      	sub	sp, #52	; 0x34
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	785b      	ldrb	r3, [r3, #1]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	f040 8160 	bne.w	800303c <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	699a      	ldr	r2, [r3, #24]
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d909      	bls.n	8002d9c <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	699a      	ldr	r2, [r3, #24]
 8002d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d94:	1ad2      	subs	r2, r2, r3
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	619a      	str	r2, [r3, #24]
 8002d9a:	e005      	b.n	8002da8 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	2200      	movs	r2, #0
 8002da6:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	7b1b      	ldrb	r3, [r3, #12]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d119      	bne.n	8002de4 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	6959      	ldr	r1, [r3, #20]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	88da      	ldrh	r2, [r3, #6]
 8002db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 fba2 	bl	8003506 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002dc2:	687c      	ldr	r4, [r7, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	441c      	add	r4, r3
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	4423      	add	r3, r4
 8002dd6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002dda:	461c      	mov	r4, r3
 8002ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	8023      	strh	r3, [r4, #0]
 8002de2:	e10f      	b.n	8003004 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	881b      	ldrh	r3, [r3, #0]
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d065      	beq.n	8002ec6 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002dfa:	687c      	ldr	r4, [r7, #4]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	785b      	ldrb	r3, [r3, #1]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d148      	bne.n	8002e96 <USB_EPStartXfer+0x12e>
 8002e04:	687c      	ldr	r4, [r7, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	441c      	add	r4, r3
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	011b      	lsls	r3, r3, #4
 8002e16:	4423      	add	r3, r4
 8002e18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002e1c:	461c      	mov	r4, r3
 8002e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10e      	bne.n	8002e42 <USB_EPStartXfer+0xda>
 8002e24:	8823      	ldrh	r3, [r4, #0]
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	8023      	strh	r3, [r4, #0]
 8002e30:	8823      	ldrh	r3, [r4, #0]
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	8023      	strh	r3, [r4, #0]
 8002e40:	e03d      	b.n	8002ebe <USB_EPStartXfer+0x156>
 8002e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e44:	2b3e      	cmp	r3, #62	; 0x3e
 8002e46:	d810      	bhi.n	8002e6a <USB_EPStartXfer+0x102>
 8002e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4a:	085b      	lsrs	r3, r3, #1
 8002e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d002      	beq.n	8002e5e <USB_EPStartXfer+0xf6>
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	029b      	lsls	r3, r3, #10
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	8023      	strh	r3, [r4, #0]
 8002e68:	e029      	b.n	8002ebe <USB_EPStartXfer+0x156>
 8002e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6c:	095b      	lsrs	r3, r3, #5
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e72:	f003 031f 	and.w	r3, r3, #31
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d102      	bne.n	8002e80 <USB_EPStartXfer+0x118>
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	029b      	lsls	r3, r3, #10
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	8023      	strh	r3, [r4, #0]
 8002e94:	e013      	b.n	8002ebe <USB_EPStartXfer+0x156>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	785b      	ldrb	r3, [r3, #1]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d10f      	bne.n	8002ebe <USB_EPStartXfer+0x156>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	441c      	add	r4, r3
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	011b      	lsls	r3, r3, #4
 8002eae:	4423      	add	r3, r4
 8002eb0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	895b      	ldrh	r3, [r3, #10]
 8002ec2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8002ec4:	e063      	b.n	8002f8e <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	785b      	ldrb	r3, [r3, #1]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d148      	bne.n	8002f60 <USB_EPStartXfer+0x1f8>
 8002ece:	687c      	ldr	r4, [r7, #4]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	441c      	add	r4, r3
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	4423      	add	r3, r4
 8002ee2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ee6:	461c      	mov	r4, r3
 8002ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10e      	bne.n	8002f0c <USB_EPStartXfer+0x1a4>
 8002eee:	8823      	ldrh	r3, [r4, #0]
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	8023      	strh	r3, [r4, #0]
 8002efa:	8823      	ldrh	r3, [r4, #0]
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	8023      	strh	r3, [r4, #0]
 8002f0a:	e03d      	b.n	8002f88 <USB_EPStartXfer+0x220>
 8002f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0e:	2b3e      	cmp	r3, #62	; 0x3e
 8002f10:	d810      	bhi.n	8002f34 <USB_EPStartXfer+0x1cc>
 8002f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f14:	085b      	lsrs	r3, r3, #1
 8002f16:	623b      	str	r3, [r7, #32]
 8002f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d002      	beq.n	8002f28 <USB_EPStartXfer+0x1c0>
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	3301      	adds	r3, #1
 8002f26:	623b      	str	r3, [r7, #32]
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	029b      	lsls	r3, r3, #10
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	8023      	strh	r3, [r4, #0]
 8002f32:	e029      	b.n	8002f88 <USB_EPStartXfer+0x220>
 8002f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f36:	095b      	lsrs	r3, r3, #5
 8002f38:	623b      	str	r3, [r7, #32]
 8002f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3c:	f003 031f 	and.w	r3, r3, #31
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d102      	bne.n	8002f4a <USB_EPStartXfer+0x1e2>
 8002f44:	6a3b      	ldr	r3, [r7, #32]
 8002f46:	3b01      	subs	r3, #1
 8002f48:	623b      	str	r3, [r7, #32]
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	029b      	lsls	r3, r3, #10
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	8023      	strh	r3, [r4, #0]
 8002f5e:	e013      	b.n	8002f88 <USB_EPStartXfer+0x220>
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	785b      	ldrb	r3, [r3, #1]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d10f      	bne.n	8002f88 <USB_EPStartXfer+0x220>
 8002f68:	687c      	ldr	r4, [r7, #4]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	441c      	add	r4, r3
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	4423      	add	r3, r4
 8002f7c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f80:	461c      	mov	r4, r3
 8002f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	891b      	ldrh	r3, [r3, #8]
 8002f8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	6959      	ldr	r1, [r3, #20]
 8002f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 fab4 	bl	8003506 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	785b      	ldrb	r3, [r3, #1]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d115      	bne.n	8002fd2 <USB_EPStartXfer+0x26a>
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4413      	add	r3, r2
 8002fb0:	881b      	ldrh	r3, [r3, #0]
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fbc:	b29c      	uxth	r4, r3
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	441a      	add	r2, r3
 8002fc8:	4b9a      	ldr	r3, [pc, #616]	; (8003234 <USB_EPStartXfer+0x4cc>)
 8002fca:	4323      	orrs	r3, r4
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	8013      	strh	r3, [r2, #0]
 8002fd0:	e018      	b.n	8003004 <USB_EPStartXfer+0x29c>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	785b      	ldrb	r3, [r3, #1]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d114      	bne.n	8003004 <USB_EPStartXfer+0x29c>
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	4413      	add	r3, r2
 8002fe4:	881b      	ldrh	r3, [r3, #0]
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff0:	b29c      	uxth	r4, r3
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	441a      	add	r2, r3
 8002ffc:	4b8e      	ldr	r3, [pc, #568]	; (8003238 <USB_EPStartXfer+0x4d0>)
 8002ffe:	4323      	orrs	r3, r4
 8003000:	b29b      	uxth	r3, r3
 8003002:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	b29b      	uxth	r3, r3
 8003012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800301a:	b29c      	uxth	r4, r3
 800301c:	f084 0310 	eor.w	r3, r4, #16
 8003020:	b29c      	uxth	r4, r3
 8003022:	f084 0320 	eor.w	r3, r4, #32
 8003026:	b29c      	uxth	r4, r3
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	441a      	add	r2, r3
 8003032:	4b82      	ldr	r3, [pc, #520]	; (800323c <USB_EPStartXfer+0x4d4>)
 8003034:	4323      	orrs	r3, r4
 8003036:	b29b      	uxth	r3, r3
 8003038:	8013      	strh	r3, [r2, #0]
 800303a:	e146      	b.n	80032ca <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	699a      	ldr	r2, [r3, #24]
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	429a      	cmp	r2, r3
 8003046:	d909      	bls.n	800305c <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	699a      	ldr	r2, [r3, #24]
 8003052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003054:	1ad2      	subs	r2, r2, r3
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	619a      	str	r2, [r3, #24]
 800305a:	e005      	b.n	8003068 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2200      	movs	r2, #0
 8003066:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	7b1b      	ldrb	r3, [r3, #12]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d148      	bne.n	8003102 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003070:	687c      	ldr	r4, [r7, #4]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003078:	b29b      	uxth	r3, r3
 800307a:	441c      	add	r4, r3
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	011b      	lsls	r3, r3, #4
 8003082:	4423      	add	r3, r4
 8003084:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003088:	461c      	mov	r4, r3
 800308a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10e      	bne.n	80030ae <USB_EPStartXfer+0x346>
 8003090:	8823      	ldrh	r3, [r4, #0]
 8003092:	b29b      	uxth	r3, r3
 8003094:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003098:	b29b      	uxth	r3, r3
 800309a:	8023      	strh	r3, [r4, #0]
 800309c:	8823      	ldrh	r3, [r4, #0]
 800309e:	b29b      	uxth	r3, r3
 80030a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	8023      	strh	r3, [r4, #0]
 80030ac:	e0f2      	b.n	8003294 <USB_EPStartXfer+0x52c>
 80030ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b0:	2b3e      	cmp	r3, #62	; 0x3e
 80030b2:	d810      	bhi.n	80030d6 <USB_EPStartXfer+0x36e>
 80030b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b6:	085b      	lsrs	r3, r3, #1
 80030b8:	61fb      	str	r3, [r7, #28]
 80030ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030bc:	f003 0301 	and.w	r3, r3, #1
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d002      	beq.n	80030ca <USB_EPStartXfer+0x362>
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	3301      	adds	r3, #1
 80030c8:	61fb      	str	r3, [r7, #28]
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	029b      	lsls	r3, r3, #10
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	8023      	strh	r3, [r4, #0]
 80030d4:	e0de      	b.n	8003294 <USB_EPStartXfer+0x52c>
 80030d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d8:	095b      	lsrs	r3, r3, #5
 80030da:	61fb      	str	r3, [r7, #28]
 80030dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030de:	f003 031f 	and.w	r3, r3, #31
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d102      	bne.n	80030ec <USB_EPStartXfer+0x384>
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	3b01      	subs	r3, #1
 80030ea:	61fb      	str	r3, [r7, #28]
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	029b      	lsls	r3, r3, #10
 80030f2:	b29b      	uxth	r3, r3
 80030f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	8023      	strh	r3, [r4, #0]
 8003100:	e0c8      	b.n	8003294 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	785b      	ldrb	r3, [r3, #1]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d148      	bne.n	800319c <USB_EPStartXfer+0x434>
 800310a:	687c      	ldr	r4, [r7, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003112:	b29b      	uxth	r3, r3
 8003114:	441c      	add	r4, r3
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	4423      	add	r3, r4
 800311e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8003122:	461c      	mov	r4, r3
 8003124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10e      	bne.n	8003148 <USB_EPStartXfer+0x3e0>
 800312a:	8823      	ldrh	r3, [r4, #0]
 800312c:	b29b      	uxth	r3, r3
 800312e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003132:	b29b      	uxth	r3, r3
 8003134:	8023      	strh	r3, [r4, #0]
 8003136:	8823      	ldrh	r3, [r4, #0]
 8003138:	b29b      	uxth	r3, r3
 800313a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800313e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003142:	b29b      	uxth	r3, r3
 8003144:	8023      	strh	r3, [r4, #0]
 8003146:	e03d      	b.n	80031c4 <USB_EPStartXfer+0x45c>
 8003148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800314a:	2b3e      	cmp	r3, #62	; 0x3e
 800314c:	d810      	bhi.n	8003170 <USB_EPStartXfer+0x408>
 800314e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003150:	085b      	lsrs	r3, r3, #1
 8003152:	61bb      	str	r3, [r7, #24]
 8003154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d002      	beq.n	8003164 <USB_EPStartXfer+0x3fc>
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	3301      	adds	r3, #1
 8003162:	61bb      	str	r3, [r7, #24]
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	b29b      	uxth	r3, r3
 8003168:	029b      	lsls	r3, r3, #10
 800316a:	b29b      	uxth	r3, r3
 800316c:	8023      	strh	r3, [r4, #0]
 800316e:	e029      	b.n	80031c4 <USB_EPStartXfer+0x45c>
 8003170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003172:	095b      	lsrs	r3, r3, #5
 8003174:	61bb      	str	r3, [r7, #24]
 8003176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003178:	f003 031f 	and.w	r3, r3, #31
 800317c:	2b00      	cmp	r3, #0
 800317e:	d102      	bne.n	8003186 <USB_EPStartXfer+0x41e>
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	3b01      	subs	r3, #1
 8003184:	61bb      	str	r3, [r7, #24]
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	b29b      	uxth	r3, r3
 800318a:	029b      	lsls	r3, r3, #10
 800318c:	b29b      	uxth	r3, r3
 800318e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003192:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003196:	b29b      	uxth	r3, r3
 8003198:	8023      	strh	r3, [r4, #0]
 800319a:	e013      	b.n	80031c4 <USB_EPStartXfer+0x45c>
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	785b      	ldrb	r3, [r3, #1]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d10f      	bne.n	80031c4 <USB_EPStartXfer+0x45c>
 80031a4:	687c      	ldr	r4, [r7, #4]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	441c      	add	r4, r3
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	4423      	add	r3, r4
 80031b8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80031bc:	461c      	mov	r4, r3
 80031be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	8023      	strh	r3, [r4, #0]
 80031c4:	687c      	ldr	r4, [r7, #4]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	785b      	ldrb	r3, [r3, #1]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d14e      	bne.n	800326c <USB_EPStartXfer+0x504>
 80031ce:	687c      	ldr	r4, [r7, #4]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	441c      	add	r4, r3
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	4423      	add	r3, r4
 80031e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80031e6:	461c      	mov	r4, r3
 80031e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10e      	bne.n	800320c <USB_EPStartXfer+0x4a4>
 80031ee:	8823      	ldrh	r3, [r4, #0]
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	8023      	strh	r3, [r4, #0]
 80031fa:	8823      	ldrh	r3, [r4, #0]
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003202:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003206:	b29b      	uxth	r3, r3
 8003208:	8023      	strh	r3, [r4, #0]
 800320a:	e043      	b.n	8003294 <USB_EPStartXfer+0x52c>
 800320c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800320e:	2b3e      	cmp	r3, #62	; 0x3e
 8003210:	d816      	bhi.n	8003240 <USB_EPStartXfer+0x4d8>
 8003212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003214:	085b      	lsrs	r3, r3, #1
 8003216:	617b      	str	r3, [r7, #20]
 8003218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d002      	beq.n	8003228 <USB_EPStartXfer+0x4c0>
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	3301      	adds	r3, #1
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	b29b      	uxth	r3, r3
 800322c:	029b      	lsls	r3, r3, #10
 800322e:	b29b      	uxth	r3, r3
 8003230:	8023      	strh	r3, [r4, #0]
 8003232:	e02f      	b.n	8003294 <USB_EPStartXfer+0x52c>
 8003234:	ffff80c0 	.word	0xffff80c0
 8003238:	ffffc080 	.word	0xffffc080
 800323c:	ffff8080 	.word	0xffff8080
 8003240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003242:	095b      	lsrs	r3, r3, #5
 8003244:	617b      	str	r3, [r7, #20]
 8003246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003248:	f003 031f 	and.w	r3, r3, #31
 800324c:	2b00      	cmp	r3, #0
 800324e:	d102      	bne.n	8003256 <USB_EPStartXfer+0x4ee>
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	3b01      	subs	r3, #1
 8003254:	617b      	str	r3, [r7, #20]
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	b29b      	uxth	r3, r3
 800325a:	029b      	lsls	r3, r3, #10
 800325c:	b29b      	uxth	r3, r3
 800325e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003262:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003266:	b29b      	uxth	r3, r3
 8003268:	8023      	strh	r3, [r4, #0]
 800326a:	e013      	b.n	8003294 <USB_EPStartXfer+0x52c>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	785b      	ldrb	r3, [r3, #1]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d10f      	bne.n	8003294 <USB_EPStartXfer+0x52c>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800327a:	b29b      	uxth	r3, r3
 800327c:	441c      	add	r4, r3
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	4423      	add	r3, r4
 8003286:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800328a:	613b      	str	r3, [r7, #16]
 800328c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328e:	b29a      	uxth	r2, r3
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	881b      	ldrh	r3, [r3, #0]
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032aa:	b29c      	uxth	r4, r3
 80032ac:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80032b0:	b29c      	uxth	r4, r3
 80032b2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80032b6:	b29c      	uxth	r4, r3
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	441a      	add	r2, r3
 80032c2:	4b04      	ldr	r3, [pc, #16]	; (80032d4 <USB_EPStartXfer+0x56c>)
 80032c4:	4323      	orrs	r3, r4
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3734      	adds	r7, #52	; 0x34
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd90      	pop	{r4, r7, pc}
 80032d4:	ffff8080 	.word	0xffff8080

080032d8 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80032d8:	b490      	push	{r4, r7}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	785b      	ldrb	r3, [r3, #1]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d018      	beq.n	800331c <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	881b      	ldrh	r3, [r3, #0]
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003300:	b29c      	uxth	r4, r3
 8003302:	f084 0310 	eor.w	r3, r4, #16
 8003306:	b29c      	uxth	r4, r3
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	441a      	add	r2, r3
 8003312:	4b11      	ldr	r3, [pc, #68]	; (8003358 <USB_EPSetStall+0x80>)
 8003314:	4323      	orrs	r3, r4
 8003316:	b29b      	uxth	r3, r3
 8003318:	8013      	strh	r3, [r2, #0]
 800331a:	e017      	b.n	800334c <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	881b      	ldrh	r3, [r3, #0]
 8003328:	b29b      	uxth	r3, r3
 800332a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800332e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003332:	b29c      	uxth	r4, r3
 8003334:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003338:	b29c      	uxth	r4, r3
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	441a      	add	r2, r3
 8003344:	4b04      	ldr	r3, [pc, #16]	; (8003358 <USB_EPSetStall+0x80>)
 8003346:	4323      	orrs	r3, r4
 8003348:	b29b      	uxth	r3, r3
 800334a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bc90      	pop	{r4, r7}
 8003356:	4770      	bx	lr
 8003358:	ffff8080 	.word	0xffff8080

0800335c <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800335c:	b490      	push	{r4, r7}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	7b1b      	ldrb	r3, [r3, #12]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d17d      	bne.n	800346a <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	785b      	ldrb	r3, [r3, #1]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d03d      	beq.n	80033f2 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	881b      	ldrh	r3, [r3, #0]
 8003382:	b29c      	uxth	r4, r3
 8003384:	4623      	mov	r3, r4
 8003386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338a:	2b00      	cmp	r3, #0
 800338c:	d014      	beq.n	80033b8 <USB_EPClearStall+0x5c>
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	881b      	ldrh	r3, [r3, #0]
 800339a:	b29b      	uxth	r3, r3
 800339c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a4:	b29c      	uxth	r4, r3
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	441a      	add	r2, r3
 80033b0:	4b31      	ldr	r3, [pc, #196]	; (8003478 <USB_EPClearStall+0x11c>)
 80033b2:	4323      	orrs	r3, r4
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	78db      	ldrb	r3, [r3, #3]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d054      	beq.n	800346a <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033d6:	b29c      	uxth	r4, r3
 80033d8:	f084 0320 	eor.w	r3, r4, #32
 80033dc:	b29c      	uxth	r4, r3
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	441a      	add	r2, r3
 80033e8:	4b24      	ldr	r3, [pc, #144]	; (800347c <USB_EPClearStall+0x120>)
 80033ea:	4323      	orrs	r3, r4
 80033ec:	b29b      	uxth	r3, r3
 80033ee:	8013      	strh	r3, [r2, #0]
 80033f0:	e03b      	b.n	800346a <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	b29c      	uxth	r4, r3
 8003400:	4623      	mov	r3, r4
 8003402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d014      	beq.n	8003434 <USB_EPClearStall+0xd8>
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4413      	add	r3, r2
 8003414:	881b      	ldrh	r3, [r3, #0]
 8003416:	b29b      	uxth	r3, r3
 8003418:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800341c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003420:	b29c      	uxth	r4, r3
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	441a      	add	r2, r3
 800342c:	4b14      	ldr	r3, [pc, #80]	; (8003480 <USB_EPClearStall+0x124>)
 800342e:	4323      	orrs	r3, r4
 8003430:	b29b      	uxth	r3, r3
 8003432:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	881b      	ldrh	r3, [r3, #0]
 8003440:	b29b      	uxth	r3, r3
 8003442:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800344a:	b29c      	uxth	r4, r3
 800344c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003450:	b29c      	uxth	r4, r3
 8003452:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003456:	b29c      	uxth	r4, r3
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	441a      	add	r2, r3
 8003462:	4b06      	ldr	r3, [pc, #24]	; (800347c <USB_EPClearStall+0x120>)
 8003464:	4323      	orrs	r3, r4
 8003466:	b29b      	uxth	r3, r3
 8003468:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bc90      	pop	{r4, r7}
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	ffff80c0 	.word	0xffff80c0
 800347c:	ffff8080 	.word	0xffff8080
 8003480:	ffffc080 	.word	0xffffc080

08003484 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	460b      	mov	r3, r1
 800348e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8003490:	78fb      	ldrb	r3, [r7, #3]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d103      	bne.n	800349e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2280      	movs	r2, #128	; 0x80
 800349a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bc80      	pop	{r7}
 80034a8:	4770      	bx	lr

080034aa <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bc80      	pop	{r7}
 80034bc:	4770      	bx	lr

080034be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bc80      	pop	{r7}
 80034d0:	4770      	bx	lr

080034d2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b085      	sub	sp, #20
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80034e4:	68fb      	ldr	r3, [r7, #12]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr

080034f0 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80034fa:	2300      	movs	r3, #0
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	bc80      	pop	{r7}
 8003504:	4770      	bx	lr

08003506 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003506:	b480      	push	{r7}
 8003508:	b08d      	sub	sp, #52	; 0x34
 800350a:	af00      	add	r7, sp, #0
 800350c:	60f8      	str	r0, [r7, #12]
 800350e:	60b9      	str	r1, [r7, #8]
 8003510:	4611      	mov	r1, r2
 8003512:	461a      	mov	r2, r3
 8003514:	460b      	mov	r3, r1
 8003516:	80fb      	strh	r3, [r7, #6]
 8003518:	4613      	mov	r3, r2
 800351a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800351c:	88bb      	ldrh	r3, [r7, #4]
 800351e:	3301      	adds	r3, #1
 8003520:	085b      	lsrs	r3, r3, #1
 8003522:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800352c:	88fb      	ldrh	r3, [r7, #6]
 800352e:	005a      	lsls	r2, r3, #1
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	4413      	add	r3, r2
 8003534:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003538:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800353e:	e01e      	b.n	800357e <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	3301      	adds	r3, #1
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	b29b      	uxth	r3, r3
 8003552:	021b      	lsls	r3, r3, #8
 8003554:	b29b      	uxth	r3, r3
 8003556:	461a      	mov	r2, r3
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	4313      	orrs	r3, r2
 800355c:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	b29a      	uxth	r2, r3
 8003562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003564:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8003566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003568:	3302      	adds	r3, #2
 800356a:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800356c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356e:	3302      	adds	r3, #2
 8003570:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	3301      	adds	r3, #1
 8003576:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8003578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800357a:	3b01      	subs	r3, #1
 800357c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800357e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1dd      	bne.n	8003540 <USB_WritePMA+0x3a>
  }
}
 8003584:	bf00      	nop
 8003586:	3734      	adds	r7, #52	; 0x34
 8003588:	46bd      	mov	sp, r7
 800358a:	bc80      	pop	{r7}
 800358c:	4770      	bx	lr

0800358e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800358e:	b480      	push	{r7}
 8003590:	b08b      	sub	sp, #44	; 0x2c
 8003592:	af00      	add	r7, sp, #0
 8003594:	60f8      	str	r0, [r7, #12]
 8003596:	60b9      	str	r1, [r7, #8]
 8003598:	4611      	mov	r1, r2
 800359a:	461a      	mov	r2, r3
 800359c:	460b      	mov	r3, r1
 800359e:	80fb      	strh	r3, [r7, #6]
 80035a0:	4613      	mov	r3, r2
 80035a2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80035a4:	88bb      	ldrh	r3, [r7, #4]
 80035a6:	085b      	lsrs	r3, r3, #1
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80035b4:	88fb      	ldrh	r3, [r7, #6]
 80035b6:	005a      	lsls	r2, r3, #1
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	4413      	add	r3, r2
 80035bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035c0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	627b      	str	r3, [r7, #36]	; 0x24
 80035c6:	e01b      	b.n	8003600 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	881b      	ldrh	r3, [r3, #0]
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	3302      	adds	r3, #2
 80035d4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	3301      	adds	r3, #1
 80035e2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	0a1b      	lsrs	r3, r3, #8
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	69fb      	ldr	r3, [r7, #28]
 80035ec:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	3301      	adds	r3, #1
 80035f2:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80035f4:	6a3b      	ldr	r3, [r7, #32]
 80035f6:	3302      	adds	r3, #2
 80035f8:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80035fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fc:	3b01      	subs	r3, #1
 80035fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1e0      	bne.n	80035c8 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003606:	88bb      	ldrh	r3, [r7, #4]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	b29b      	uxth	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d007      	beq.n	8003622 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	881b      	ldrh	r3, [r3, #0]
 8003616:	b29b      	uxth	r3, r3
 8003618:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	b2da      	uxtb	r2, r3
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	701a      	strb	r2, [r3, #0]
  }
}
 8003622:	bf00      	nop
 8003624:	372c      	adds	r7, #44	; 0x2c
 8003626:	46bd      	mov	sp, r7
 8003628:	bc80      	pop	{r7}
 800362a:	4770      	bx	lr

0800362c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	460b      	mov	r3, r1
 8003636:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8003638:	2304      	movs	r3, #4
 800363a:	2203      	movs	r2, #3
 800363c:	2181      	movs	r1, #129	; 0x81
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f001 fd65 	bl	800510e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800364a:	2010      	movs	r0, #16
 800364c:	f001 fe6c 	bl	8005328 <USBD_static_malloc>
 8003650:	4602      	mov	r2, r0
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8003662:	2302      	movs	r3, #2
 8003664:	e005      	b.n	8003672 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800366c:	2200      	movs	r2, #0
 800366e:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b082      	sub	sp, #8
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
 8003682:	460b      	mov	r3, r1
 8003684:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8003686:	2181      	movs	r1, #129	; 0x81
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f001 fd66 	bl	800515a <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800369a:	2b00      	cmp	r3, #0
 800369c:	d009      	beq.n	80036b2 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80036a4:	4618      	mov	r0, r3
 80036a6:	f001 fe4b 	bl	8005340 <USBD_static_free>
    pdev->pClassData = NULL;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b088      	sub	sp, #32
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80036cc:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 80036d2:	2300      	movs	r3, #0
 80036d4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80036da:	2300      	movs	r3, #0
 80036dc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d045      	beq.n	8003776 <USBD_HID_Setup+0xba>
 80036ea:	2b20      	cmp	r3, #32
 80036ec:	f040 80d3 	bne.w	8003896 <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	785b      	ldrb	r3, [r3, #1]
 80036f4:	3b02      	subs	r3, #2
 80036f6:	2b09      	cmp	r3, #9
 80036f8:	d835      	bhi.n	8003766 <USBD_HID_Setup+0xaa>
 80036fa:	a201      	add	r2, pc, #4	; (adr r2, 8003700 <USBD_HID_Setup+0x44>)
 80036fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003700:	08003757 	.word	0x08003757
 8003704:	08003737 	.word	0x08003737
 8003708:	08003767 	.word	0x08003767
 800370c:	08003767 	.word	0x08003767
 8003710:	08003767 	.word	0x08003767
 8003714:	08003767 	.word	0x08003767
 8003718:	08003767 	.word	0x08003767
 800371c:	08003767 	.word	0x08003767
 8003720:	08003745 	.word	0x08003745
 8003724:	08003729 	.word	0x08003729
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	885b      	ldrh	r3, [r3, #2]
 800372c:	b2db      	uxtb	r3, r3
 800372e:	461a      	mov	r2, r3
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	601a      	str	r2, [r3, #0]
          break;
 8003734:	e01e      	b.n	8003774 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	2201      	movs	r2, #1
 800373a:	4619      	mov	r1, r3
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f001 f94d 	bl	80049dc <USBD_CtlSendData>
          break;
 8003742:	e017      	b.n	8003774 <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	885b      	ldrh	r3, [r3, #2]
 8003748:	0a1b      	lsrs	r3, r3, #8
 800374a:	b29b      	uxth	r3, r3
 800374c:	b2db      	uxtb	r3, r3
 800374e:	461a      	mov	r2, r3
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	605a      	str	r2, [r3, #4]
          break;
 8003754:	e00e      	b.n	8003774 <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	3304      	adds	r3, #4
 800375a:	2201      	movs	r2, #1
 800375c:	4619      	mov	r1, r3
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f001 f93c 	bl	80049dc <USBD_CtlSendData>
          break;
 8003764:	e006      	b.n	8003774 <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8003766:	6839      	ldr	r1, [r7, #0]
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f001 f8cd 	bl	8004908 <USBD_CtlError>
          ret = USBD_FAIL;
 800376e:	2302      	movs	r3, #2
 8003770:	75fb      	strb	r3, [r7, #23]
          break;
 8003772:	bf00      	nop
      }
      break;
 8003774:	e096      	b.n	80038a4 <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	785b      	ldrb	r3, [r3, #1]
 800377a:	2b0b      	cmp	r3, #11
 800377c:	f200 8083 	bhi.w	8003886 <USBD_HID_Setup+0x1ca>
 8003780:	a201      	add	r2, pc, #4	; (adr r2, 8003788 <USBD_HID_Setup+0xcc>)
 8003782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003786:	bf00      	nop
 8003788:	080037b9 	.word	0x080037b9
 800378c:	08003887 	.word	0x08003887
 8003790:	08003887 	.word	0x08003887
 8003794:	08003887 	.word	0x08003887
 8003798:	08003887 	.word	0x08003887
 800379c:	08003887 	.word	0x08003887
 80037a0:	080037e1 	.word	0x080037e1
 80037a4:	08003887 	.word	0x08003887
 80037a8:	08003887 	.word	0x08003887
 80037ac:	08003887 	.word	0x08003887
 80037b0:	08003839 	.word	0x08003839
 80037b4:	08003861 	.word	0x08003861
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80037be:	2b03      	cmp	r3, #3
 80037c0:	d107      	bne.n	80037d2 <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80037c2:	f107 030e 	add.w	r3, r7, #14
 80037c6:	2202      	movs	r2, #2
 80037c8:	4619      	mov	r1, r3
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f001 f906 	bl	80049dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80037d0:	e060      	b.n	8003894 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 80037d2:	6839      	ldr	r1, [r7, #0]
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f001 f897 	bl	8004908 <USBD_CtlError>
            ret = USBD_FAIL;
 80037da:	2302      	movs	r3, #2
 80037dc:	75fb      	strb	r3, [r7, #23]
          break;
 80037de:	e059      	b.n	8003894 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	885b      	ldrh	r3, [r3, #2]
 80037e4:	0a1b      	lsrs	r3, r3, #8
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	2b22      	cmp	r3, #34	; 0x22
 80037ea:	d108      	bne.n	80037fe <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	88db      	ldrh	r3, [r3, #6]
 80037f0:	2b2d      	cmp	r3, #45	; 0x2d
 80037f2:	bf28      	it	cs
 80037f4:	232d      	movcs	r3, #45	; 0x2d
 80037f6:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 80037f8:	4b2d      	ldr	r3, [pc, #180]	; (80038b0 <USBD_HID_Setup+0x1f4>)
 80037fa:	61bb      	str	r3, [r7, #24]
 80037fc:	e015      	b.n	800382a <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	885b      	ldrh	r3, [r3, #2]
 8003802:	0a1b      	lsrs	r3, r3, #8
 8003804:	b29b      	uxth	r3, r3
 8003806:	2b21      	cmp	r3, #33	; 0x21
 8003808:	d108      	bne.n	800381c <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 800380a:	4b2a      	ldr	r3, [pc, #168]	; (80038b4 <USBD_HID_Setup+0x1f8>)
 800380c:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	88db      	ldrh	r3, [r3, #6]
 8003812:	2b09      	cmp	r3, #9
 8003814:	bf28      	it	cs
 8003816:	2309      	movcs	r3, #9
 8003818:	83fb      	strh	r3, [r7, #30]
 800381a:	e006      	b.n	800382a <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800381c:	6839      	ldr	r1, [r7, #0]
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f001 f872 	bl	8004908 <USBD_CtlError>
            ret = USBD_FAIL;
 8003824:	2302      	movs	r3, #2
 8003826:	75fb      	strb	r3, [r7, #23]
            break;
 8003828:	e034      	b.n	8003894 <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 800382a:	8bfb      	ldrh	r3, [r7, #30]
 800382c:	461a      	mov	r2, r3
 800382e:	69b9      	ldr	r1, [r7, #24]
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f001 f8d3 	bl	80049dc <USBD_CtlSendData>
          break;
 8003836:	e02d      	b.n	8003894 <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800383e:	2b03      	cmp	r3, #3
 8003840:	d107      	bne.n	8003852 <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	3308      	adds	r3, #8
 8003846:	2201      	movs	r2, #1
 8003848:	4619      	mov	r1, r3
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f001 f8c6 	bl	80049dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8003850:	e020      	b.n	8003894 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8003852:	6839      	ldr	r1, [r7, #0]
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f001 f857 	bl	8004908 <USBD_CtlError>
            ret = USBD_FAIL;
 800385a:	2302      	movs	r3, #2
 800385c:	75fb      	strb	r3, [r7, #23]
          break;
 800385e:	e019      	b.n	8003894 <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003866:	2b03      	cmp	r3, #3
 8003868:	d106      	bne.n	8003878 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	885b      	ldrh	r3, [r3, #2]
 800386e:	b2db      	uxtb	r3, r3
 8003870:	461a      	mov	r2, r3
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8003876:	e00d      	b.n	8003894 <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8003878:	6839      	ldr	r1, [r7, #0]
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f001 f844 	bl	8004908 <USBD_CtlError>
            ret = USBD_FAIL;
 8003880:	2302      	movs	r3, #2
 8003882:	75fb      	strb	r3, [r7, #23]
          break;
 8003884:	e006      	b.n	8003894 <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8003886:	6839      	ldr	r1, [r7, #0]
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f001 f83d 	bl	8004908 <USBD_CtlError>
          ret = USBD_FAIL;
 800388e:	2302      	movs	r3, #2
 8003890:	75fb      	strb	r3, [r7, #23]
          break;
 8003892:	bf00      	nop
      }
      break;
 8003894:	e006      	b.n	80038a4 <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8003896:	6839      	ldr	r1, [r7, #0]
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f001 f835 	bl	8004908 <USBD_CtlError>
      ret = USBD_FAIL;
 800389e:	2302      	movs	r3, #2
 80038a0:	75fb      	strb	r3, [r7, #23]
      break;
 80038a2:	bf00      	nop
  }

  return ret;
 80038a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3720      	adds	r7, #32
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	200000c4 	.word	0x200000c4
 80038b4:	200000ac 	.word	0x200000ac

080038b8 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	60f8      	str	r0, [r7, #12]
 80038c0:	60b9      	str	r1, [r7, #8]
 80038c2:	4613      	mov	r3, r2
 80038c4:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80038cc:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80038d4:	2b03      	cmp	r3, #3
 80038d6:	d10c      	bne.n	80038f2 <USBD_HID_SendReport+0x3a>
  {
    if (hhid->state == HID_IDLE)
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	7b1b      	ldrb	r3, [r3, #12]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d108      	bne.n	80038f2 <USBD_HID_SendReport+0x3a>
    {
      hhid->state = HID_BUSY;
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	2201      	movs	r2, #1
 80038e4:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 80038e6:	88fb      	ldrh	r3, [r7, #6]
 80038e8:	68ba      	ldr	r2, [r7, #8]
 80038ea:	2181      	movs	r1, #129	; 0x81
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f001 fcd5 	bl	800529c <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <USBD_HID_GetPollingInterval>:
  *         return polling interval from endpoint descriptor
  * @param  pdev: device instance
  * @retval polling interval
  */
uint32_t USBD_HID_GetPollingInterval(USBD_HandleTypeDef *pdev)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t polling_interval = 0U;
 8003904:	2300      	movs	r3, #0
 8003906:	60fb      	str	r3, [r7, #12]

  /* HIGH-speed endpoints */
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	7c1b      	ldrb	r3, [r3, #16]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d102      	bne.n	8003916 <USBD_HID_GetPollingInterval+0x1a>
  {
    /* Sets the data transfer polling interval for high speed transfers.
     Values between 1..16 are allowed. Values correspond to interval
     of 2 ^ (bInterval-1). This option (8 ms, corresponds to HID_HS_BINTERVAL */
    polling_interval = (((1U << (HID_HS_BINTERVAL - 1U))) / 8U);
 8003910:	2308      	movs	r3, #8
 8003912:	60fb      	str	r3, [r7, #12]
 8003914:	e001      	b.n	800391a <USBD_HID_GetPollingInterval+0x1e>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    /* Sets the data transfer polling interval for low and full
    speed transfers */
    polling_interval =  HID_FS_BINTERVAL;
 8003916:	230a      	movs	r3, #10
 8003918:	60fb      	str	r3, [r7, #12]
  }

  return ((uint32_t)(polling_interval));
 800391a:	68fb      	ldr	r3, [r7, #12]
}
 800391c:	4618      	mov	r0, r3
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr
	...

08003928 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2222      	movs	r2, #34	; 0x22
 8003934:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8003936:	4b03      	ldr	r3, [pc, #12]	; (8003944 <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8003938:	4618      	mov	r0, r3
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	bc80      	pop	{r7}
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	20000040 	.word	0x20000040

08003948 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2222      	movs	r2, #34	; 0x22
 8003954:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8003956:	4b03      	ldr	r3, [pc, #12]	; (8003964 <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8003958:	4618      	mov	r0, r3
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	bc80      	pop	{r7}
 8003960:	4770      	bx	lr
 8003962:	bf00      	nop
 8003964:	20000064 	.word	0x20000064

08003968 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2222      	movs	r2, #34	; 0x22
 8003974:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8003976:	4b03      	ldr	r3, [pc, #12]	; (8003984 <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8003978:	4618      	mov	r0, r3
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	20000088 	.word	0x20000088

08003988 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	460b      	mov	r3, r1
 8003992:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800399a:	2200      	movs	r2, #0
 800399c:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bc80      	pop	{r7}
 80039a8:	4770      	bx	lr
	...

080039ac <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	220a      	movs	r2, #10
 80039b8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 80039ba:	4b03      	ldr	r3, [pc, #12]	; (80039c8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80039bc:	4618      	mov	r0, r3
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bc80      	pop	{r7}
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	200000b8 	.word	0x200000b8

080039cc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	4613      	mov	r3, r2
 80039d8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d101      	bne.n	80039e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80039e0:	2302      	movs	r3, #2
 80039e2:	e01a      	b.n	8003a1a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	79fa      	ldrb	r2, [r7, #7]
 8003a10:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f001 fb18 	bl	8005048 <USBD_LL_Init>

  return USBD_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b085      	sub	sp, #20
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
 8003a2a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d006      	beq.n	8003a44 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	73fb      	strb	r3, [r7, #15]
 8003a42:	e001      	b.n	8003a48 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8003a44:	2302      	movs	r3, #2
 8003a46:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bc80      	pop	{r7}
 8003a52:	4770      	bx	lr

08003a54 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f001 fb3b 	bl	80050d8 <USBD_LL_Start>

  return USBD_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bc80      	pop	{r7}
 8003a7e:	4770      	bx	lr

08003a80 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00c      	beq.n	8003ab4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	78fa      	ldrb	r2, [r7, #3]
 8003aa4:	4611      	mov	r1, r2
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	4798      	blx	r3
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b082      	sub	sp, #8
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	78fa      	ldrb	r2, [r7, #3]
 8003ad4:	4611      	mov	r1, r2
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	4798      	blx	r3

  return USBD_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003af4:	6839      	ldr	r1, [r7, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 feca 	bl	8004890 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003b18:	f003 031f 	and.w	r3, r3, #31
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d00c      	beq.n	8003b3a <USBD_LL_SetupStage+0x56>
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d302      	bcc.n	8003b2a <USBD_LL_SetupStage+0x46>
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d010      	beq.n	8003b4a <USBD_LL_SetupStage+0x66>
 8003b28:	e017      	b.n	8003b5a <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003b30:	4619      	mov	r1, r3
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f9ca 	bl	8003ecc <USBD_StdDevReq>
      break;
 8003b38:	e01a      	b.n	8003b70 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003b40:	4619      	mov	r1, r3
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 fa2c 	bl	8003fa0 <USBD_StdItfReq>
      break;
 8003b48:	e012      	b.n	8003b70 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8003b50:	4619      	mov	r1, r3
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fa6a 	bl	800402c <USBD_StdEPReq>
      break;
 8003b58:	e00a      	b.n	8003b70 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003b60:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	4619      	mov	r1, r3
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f001 fb15 	bl	8005198 <USBD_LL_StallEP>
      break;
 8003b6e:	bf00      	nop
  }

  return USBD_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b086      	sub	sp, #24
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	460b      	mov	r3, r1
 8003b84:	607a      	str	r2, [r7, #4]
 8003b86:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003b88:	7afb      	ldrb	r3, [r7, #11]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d14b      	bne.n	8003c26 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8003b94:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003b9c:	2b03      	cmp	r3, #3
 8003b9e:	d134      	bne.n	8003c0a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	68da      	ldr	r2, [r3, #12]
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d919      	bls.n	8003be0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	68da      	ldr	r2, [r3, #12]
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	1ad2      	subs	r2, r2, r3
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	68da      	ldr	r2, [r3, #12]
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d203      	bcs.n	8003bce <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	e002      	b.n	8003bd4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	6879      	ldr	r1, [r7, #4]
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f000 ff2d 	bl	8004a38 <USBD_CtlContinueRx>
 8003bde:	e038      	b.n	8003c52 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00a      	beq.n	8003c02 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8003bf2:	2b03      	cmp	r3, #3
 8003bf4:	d105      	bne.n	8003c02 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 ff2a 	bl	8004a5c <USBD_CtlSendStatus>
 8003c08:	e023      	b.n	8003c52 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003c10:	2b05      	cmp	r3, #5
 8003c12:	d11e      	bne.n	8003c52 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f001 faba 	bl	8005198 <USBD_LL_StallEP>
 8003c24:	e015      	b.n	8003c52 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00d      	beq.n	8003c4e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8003c38:	2b03      	cmp	r3, #3
 8003c3a:	d108      	bne.n	8003c4e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	7afa      	ldrb	r2, [r7, #11]
 8003c46:	4611      	mov	r1, r2
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	4798      	blx	r3
 8003c4c:	e001      	b.n	8003c52 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8003c4e:	2302      	movs	r3, #2
 8003c50:	e000      	b.n	8003c54 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3718      	adds	r7, #24
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	460b      	mov	r3, r1
 8003c66:	607a      	str	r2, [r7, #4]
 8003c68:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8003c6a:	7afb      	ldrb	r3, [r7, #11]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d17f      	bne.n	8003d70 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	3314      	adds	r3, #20
 8003c74:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d15c      	bne.n	8003d3a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d915      	bls.n	8003cb8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	68da      	ldr	r2, [r3, #12]
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	1ad2      	subs	r2, r2, r3
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f000 feb5 	bl	8004a14 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003caa:	2300      	movs	r3, #0
 8003cac:	2200      	movs	r2, #0
 8003cae:	2100      	movs	r1, #0
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f001 fb16 	bl	80052e2 <USBD_LL_PrepareReceive>
 8003cb6:	e04e      	b.n	8003d56 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	6912      	ldr	r2, [r2, #16]
 8003cc0:	fbb3 f1f2 	udiv	r1, r3, r2
 8003cc4:	fb02 f201 	mul.w	r2, r2, r1
 8003cc8:	1a9b      	subs	r3, r3, r2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d11c      	bne.n	8003d08 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d316      	bcc.n	8003d08 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d20f      	bcs.n	8003d08 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8003ce8:	2200      	movs	r2, #0
 8003cea:	2100      	movs	r1, #0
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 fe91 	bl	8004a14 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	2100      	movs	r1, #0
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f001 faee 	bl	80052e2 <USBD_LL_PrepareReceive>
 8003d06:	e026      	b.n	8003d56 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00a      	beq.n	8003d2a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8003d1a:	2b03      	cmp	r3, #3
 8003d1c:	d105      	bne.n	8003d2a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8003d2a:	2180      	movs	r1, #128	; 0x80
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f001 fa33 	bl	8005198 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f000 fea5 	bl	8004a82 <USBD_CtlReceiveStatus>
 8003d38:	e00d      	b.n	8003d56 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8003d40:	2b04      	cmp	r3, #4
 8003d42:	d004      	beq.n	8003d4e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d103      	bne.n	8003d56 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8003d4e:	2180      	movs	r1, #128	; 0x80
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f001 fa21 	bl	8005198 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d11d      	bne.n	8003d9c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f7ff fe83 	bl	8003a6c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8003d6e:	e015      	b.n	8003d9c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003d76:	695b      	ldr	r3, [r3, #20]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00d      	beq.n	8003d98 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8003d82:	2b03      	cmp	r3, #3
 8003d84:	d108      	bne.n	8003d98 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	7afa      	ldrb	r2, [r7, #11]
 8003d90:	4611      	mov	r1, r2
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	4798      	blx	r3
 8003d96:	e001      	b.n	8003d9c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8003d98:	2302      	movs	r3, #2
 8003d9a:	e000      	b.n	8003d9e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}

08003da6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b082      	sub	sp, #8
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003dae:	2340      	movs	r3, #64	; 0x40
 8003db0:	2200      	movs	r2, #0
 8003db2:	2100      	movs	r1, #0
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f001 f9aa 	bl	800510e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2240      	movs	r2, #64	; 0x40
 8003dc6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8003dca:	2340      	movs	r3, #64	; 0x40
 8003dcc:	2200      	movs	r2, #0
 8003dce:	2180      	movs	r1, #128	; 0x80
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f001 f99c 	bl	800510e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2240      	movs	r2, #64	; 0x40
 8003de0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d009      	beq.n	8003e1e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6852      	ldr	r2, [r2, #4]
 8003e16:	b2d2      	uxtb	r2, r2
 8003e18:	4611      	mov	r1, r2
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	4798      	blx	r3
  }

  return USBD_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3708      	adds	r7, #8
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	460b      	mov	r3, r1
 8003e32:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	78fa      	ldrb	r2, [r7, #3]
 8003e38:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bc80      	pop	{r7}
 8003e44:	4770      	bx	lr

08003e46 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2204      	movs	r2, #4
 8003e5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc80      	pop	{r7}
 8003e6c:	4770      	bx	lr

08003e6e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b083      	sub	sp, #12
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003e7c:	2b04      	cmp	r3, #4
 8003e7e:	d105      	bne.n	8003e8c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bc80      	pop	{r7}
 8003e96:	4770      	bx	lr

08003e98 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003ea6:	2b03      	cmp	r3, #3
 8003ea8:	d10b      	bne.n	8003ec2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d005      	beq.n	8003ec2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
 8003ed4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003ee2:	2b20      	cmp	r3, #32
 8003ee4:	d004      	beq.n	8003ef0 <USBD_StdDevReq+0x24>
 8003ee6:	2b40      	cmp	r3, #64	; 0x40
 8003ee8:	d002      	beq.n	8003ef0 <USBD_StdDevReq+0x24>
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d008      	beq.n	8003f00 <USBD_StdDevReq+0x34>
 8003eee:	e04c      	b.n	8003f8a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	6839      	ldr	r1, [r7, #0]
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	4798      	blx	r3
      break;
 8003efe:	e049      	b.n	8003f94 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	785b      	ldrb	r3, [r3, #1]
 8003f04:	2b09      	cmp	r3, #9
 8003f06:	d83a      	bhi.n	8003f7e <USBD_StdDevReq+0xb2>
 8003f08:	a201      	add	r2, pc, #4	; (adr r2, 8003f10 <USBD_StdDevReq+0x44>)
 8003f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f0e:	bf00      	nop
 8003f10:	08003f61 	.word	0x08003f61
 8003f14:	08003f75 	.word	0x08003f75
 8003f18:	08003f7f 	.word	0x08003f7f
 8003f1c:	08003f6b 	.word	0x08003f6b
 8003f20:	08003f7f 	.word	0x08003f7f
 8003f24:	08003f43 	.word	0x08003f43
 8003f28:	08003f39 	.word	0x08003f39
 8003f2c:	08003f7f 	.word	0x08003f7f
 8003f30:	08003f57 	.word	0x08003f57
 8003f34:	08003f4d 	.word	0x08003f4d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8003f38:	6839      	ldr	r1, [r7, #0]
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f9d4 	bl	80042e8 <USBD_GetDescriptor>
          break;
 8003f40:	e022      	b.n	8003f88 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8003f42:	6839      	ldr	r1, [r7, #0]
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 fb37 	bl	80045b8 <USBD_SetAddress>
          break;
 8003f4a:	e01d      	b.n	8003f88 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8003f4c:	6839      	ldr	r1, [r7, #0]
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 fb74 	bl	800463c <USBD_SetConfig>
          break;
 8003f54:	e018      	b.n	8003f88 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8003f56:	6839      	ldr	r1, [r7, #0]
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 fbfd 	bl	8004758 <USBD_GetConfig>
          break;
 8003f5e:	e013      	b.n	8003f88 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8003f60:	6839      	ldr	r1, [r7, #0]
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 fc2c 	bl	80047c0 <USBD_GetStatus>
          break;
 8003f68:	e00e      	b.n	8003f88 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8003f6a:	6839      	ldr	r1, [r7, #0]
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 fc5a 	bl	8004826 <USBD_SetFeature>
          break;
 8003f72:	e009      	b.n	8003f88 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8003f74:	6839      	ldr	r1, [r7, #0]
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 fc69 	bl	800484e <USBD_ClrFeature>
          break;
 8003f7c:	e004      	b.n	8003f88 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8003f7e:	6839      	ldr	r1, [r7, #0]
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 fcc1 	bl	8004908 <USBD_CtlError>
          break;
 8003f86:	bf00      	nop
      }
      break;
 8003f88:	e004      	b.n	8003f94 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8003f8a:	6839      	ldr	r1, [r7, #0]
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 fcbb 	bl	8004908 <USBD_CtlError>
      break;
 8003f92:	bf00      	nop
  }

  return ret;
 8003f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop

08003fa0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003fb6:	2b20      	cmp	r3, #32
 8003fb8:	d003      	beq.n	8003fc2 <USBD_StdItfReq+0x22>
 8003fba:	2b40      	cmp	r3, #64	; 0x40
 8003fbc:	d001      	beq.n	8003fc2 <USBD_StdItfReq+0x22>
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d12a      	bne.n	8004018 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d81d      	bhi.n	800400a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	889b      	ldrh	r3, [r3, #4]
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d813      	bhi.n	8004000 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	6839      	ldr	r1, [r7, #0]
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	4798      	blx	r3
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	88db      	ldrh	r3, [r3, #6]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d110      	bne.n	8004014 <USBD_StdItfReq+0x74>
 8003ff2:	7bfb      	ldrb	r3, [r7, #15]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10d      	bne.n	8004014 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 fd2f 	bl	8004a5c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8003ffe:	e009      	b.n	8004014 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8004000:	6839      	ldr	r1, [r7, #0]
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 fc80 	bl	8004908 <USBD_CtlError>
          break;
 8004008:	e004      	b.n	8004014 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800400a:	6839      	ldr	r1, [r7, #0]
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 fc7b 	bl	8004908 <USBD_CtlError>
          break;
 8004012:	e000      	b.n	8004016 <USBD_StdItfReq+0x76>
          break;
 8004014:	bf00      	nop
      }
      break;
 8004016:	e004      	b.n	8004022 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8004018:	6839      	ldr	r1, [r7, #0]
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 fc74 	bl	8004908 <USBD_CtlError>
      break;
 8004020:	bf00      	nop
  }

  return USBD_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004036:	2300      	movs	r3, #0
 8004038:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	889b      	ldrh	r3, [r3, #4]
 800403e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004048:	2b20      	cmp	r3, #32
 800404a:	d004      	beq.n	8004056 <USBD_StdEPReq+0x2a>
 800404c:	2b40      	cmp	r3, #64	; 0x40
 800404e:	d002      	beq.n	8004056 <USBD_StdEPReq+0x2a>
 8004050:	2b00      	cmp	r3, #0
 8004052:	d008      	beq.n	8004066 <USBD_StdEPReq+0x3a>
 8004054:	e13d      	b.n	80042d2 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	6839      	ldr	r1, [r7, #0]
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	4798      	blx	r3
      break;
 8004064:	e13a      	b.n	80042dc <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800406e:	2b20      	cmp	r3, #32
 8004070:	d10a      	bne.n	8004088 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	6839      	ldr	r1, [r7, #0]
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	4798      	blx	r3
 8004080:	4603      	mov	r3, r0
 8004082:	73fb      	strb	r3, [r7, #15]

        return ret;
 8004084:	7bfb      	ldrb	r3, [r7, #15]
 8004086:	e12a      	b.n	80042de <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	785b      	ldrb	r3, [r3, #1]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d03e      	beq.n	800410e <USBD_StdEPReq+0xe2>
 8004090:	2b03      	cmp	r3, #3
 8004092:	d002      	beq.n	800409a <USBD_StdEPReq+0x6e>
 8004094:	2b00      	cmp	r3, #0
 8004096:	d070      	beq.n	800417a <USBD_StdEPReq+0x14e>
 8004098:	e115      	b.n	80042c6 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d002      	beq.n	80040aa <USBD_StdEPReq+0x7e>
 80040a4:	2b03      	cmp	r3, #3
 80040a6:	d015      	beq.n	80040d4 <USBD_StdEPReq+0xa8>
 80040a8:	e02b      	b.n	8004102 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80040aa:	7bbb      	ldrb	r3, [r7, #14]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00c      	beq.n	80040ca <USBD_StdEPReq+0x9e>
 80040b0:	7bbb      	ldrb	r3, [r7, #14]
 80040b2:	2b80      	cmp	r3, #128	; 0x80
 80040b4:	d009      	beq.n	80040ca <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80040b6:	7bbb      	ldrb	r3, [r7, #14]
 80040b8:	4619      	mov	r1, r3
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f001 f86c 	bl	8005198 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80040c0:	2180      	movs	r1, #128	; 0x80
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f001 f868 	bl	8005198 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80040c8:	e020      	b.n	800410c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80040ca:	6839      	ldr	r1, [r7, #0]
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 fc1b 	bl	8004908 <USBD_CtlError>
              break;
 80040d2:	e01b      	b.n	800410c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	885b      	ldrh	r3, [r3, #2]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d10e      	bne.n	80040fa <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80040dc:	7bbb      	ldrb	r3, [r7, #14]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00b      	beq.n	80040fa <USBD_StdEPReq+0xce>
 80040e2:	7bbb      	ldrb	r3, [r7, #14]
 80040e4:	2b80      	cmp	r3, #128	; 0x80
 80040e6:	d008      	beq.n	80040fa <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	88db      	ldrh	r3, [r3, #6]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d104      	bne.n	80040fa <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80040f0:	7bbb      	ldrb	r3, [r7, #14]
 80040f2:	4619      	mov	r1, r3
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f001 f84f 	bl	8005198 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 fcae 	bl	8004a5c <USBD_CtlSendStatus>

              break;
 8004100:	e004      	b.n	800410c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8004102:	6839      	ldr	r1, [r7, #0]
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 fbff 	bl	8004908 <USBD_CtlError>
              break;
 800410a:	bf00      	nop
          }
          break;
 800410c:	e0e0      	b.n	80042d0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004114:	2b02      	cmp	r3, #2
 8004116:	d002      	beq.n	800411e <USBD_StdEPReq+0xf2>
 8004118:	2b03      	cmp	r3, #3
 800411a:	d015      	beq.n	8004148 <USBD_StdEPReq+0x11c>
 800411c:	e026      	b.n	800416c <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800411e:	7bbb      	ldrb	r3, [r7, #14]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00c      	beq.n	800413e <USBD_StdEPReq+0x112>
 8004124:	7bbb      	ldrb	r3, [r7, #14]
 8004126:	2b80      	cmp	r3, #128	; 0x80
 8004128:	d009      	beq.n	800413e <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800412a:	7bbb      	ldrb	r3, [r7, #14]
 800412c:	4619      	mov	r1, r3
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f001 f832 	bl	8005198 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004134:	2180      	movs	r1, #128	; 0x80
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f001 f82e 	bl	8005198 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800413c:	e01c      	b.n	8004178 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800413e:	6839      	ldr	r1, [r7, #0]
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 fbe1 	bl	8004908 <USBD_CtlError>
              break;
 8004146:	e017      	b.n	8004178 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	885b      	ldrh	r3, [r3, #2]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d112      	bne.n	8004176 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8004150:	7bbb      	ldrb	r3, [r7, #14]
 8004152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004156:	2b00      	cmp	r3, #0
 8004158:	d004      	beq.n	8004164 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800415a:	7bbb      	ldrb	r3, [r7, #14]
 800415c:	4619      	mov	r1, r3
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f001 f839 	bl	80051d6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 fc79 	bl	8004a5c <USBD_CtlSendStatus>
              }
              break;
 800416a:	e004      	b.n	8004176 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800416c:	6839      	ldr	r1, [r7, #0]
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 fbca 	bl	8004908 <USBD_CtlError>
              break;
 8004174:	e000      	b.n	8004178 <USBD_StdEPReq+0x14c>
              break;
 8004176:	bf00      	nop
          }
          break;
 8004178:	e0aa      	b.n	80042d0 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004180:	2b02      	cmp	r3, #2
 8004182:	d002      	beq.n	800418a <USBD_StdEPReq+0x15e>
 8004184:	2b03      	cmp	r3, #3
 8004186:	d032      	beq.n	80041ee <USBD_StdEPReq+0x1c2>
 8004188:	e097      	b.n	80042ba <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800418a:	7bbb      	ldrb	r3, [r7, #14]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d007      	beq.n	80041a0 <USBD_StdEPReq+0x174>
 8004190:	7bbb      	ldrb	r3, [r7, #14]
 8004192:	2b80      	cmp	r3, #128	; 0x80
 8004194:	d004      	beq.n	80041a0 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8004196:	6839      	ldr	r1, [r7, #0]
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 fbb5 	bl	8004908 <USBD_CtlError>
                break;
 800419e:	e091      	b.n	80042c4 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80041a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	da0b      	bge.n	80041c0 <USBD_StdEPReq+0x194>
 80041a8:	7bbb      	ldrb	r3, [r7, #14]
 80041aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80041ae:	4613      	mov	r3, r2
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	3310      	adds	r3, #16
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	4413      	add	r3, r2
 80041bc:	3304      	adds	r3, #4
 80041be:	e00b      	b.n	80041d8 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80041c0:	7bbb      	ldrb	r3, [r7, #14]
 80041c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80041c6:	4613      	mov	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4413      	add	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	4413      	add	r3, r2
 80041d6:	3304      	adds	r3, #4
 80041d8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2200      	movs	r2, #0
 80041de:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	2202      	movs	r2, #2
 80041e4:	4619      	mov	r1, r3
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 fbf8 	bl	80049dc <USBD_CtlSendData>
              break;
 80041ec:	e06a      	b.n	80042c4 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80041ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	da11      	bge.n	800421a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80041f6:	7bbb      	ldrb	r3, [r7, #14]
 80041f8:	f003 020f 	and.w	r2, r3, #15
 80041fc:	6879      	ldr	r1, [r7, #4]
 80041fe:	4613      	mov	r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	4413      	add	r3, r2
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	440b      	add	r3, r1
 8004208:	3318      	adds	r3, #24
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d117      	bne.n	8004240 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8004210:	6839      	ldr	r1, [r7, #0]
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 fb78 	bl	8004908 <USBD_CtlError>
                  break;
 8004218:	e054      	b.n	80042c4 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800421a:	7bbb      	ldrb	r3, [r7, #14]
 800421c:	f003 020f 	and.w	r2, r3, #15
 8004220:	6879      	ldr	r1, [r7, #4]
 8004222:	4613      	mov	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4413      	add	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	440b      	add	r3, r1
 800422c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d104      	bne.n	8004240 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8004236:	6839      	ldr	r1, [r7, #0]
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 fb65 	bl	8004908 <USBD_CtlError>
                  break;
 800423e:	e041      	b.n	80042c4 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004240:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004244:	2b00      	cmp	r3, #0
 8004246:	da0b      	bge.n	8004260 <USBD_StdEPReq+0x234>
 8004248:	7bbb      	ldrb	r3, [r7, #14]
 800424a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800424e:	4613      	mov	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4413      	add	r3, r2
 8004254:	009b      	lsls	r3, r3, #2
 8004256:	3310      	adds	r3, #16
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	4413      	add	r3, r2
 800425c:	3304      	adds	r3, #4
 800425e:	e00b      	b.n	8004278 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004260:	7bbb      	ldrb	r3, [r7, #14]
 8004262:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004266:	4613      	mov	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	4413      	add	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	4413      	add	r3, r2
 8004276:	3304      	adds	r3, #4
 8004278:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800427a:	7bbb      	ldrb	r3, [r7, #14]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d002      	beq.n	8004286 <USBD_StdEPReq+0x25a>
 8004280:	7bbb      	ldrb	r3, [r7, #14]
 8004282:	2b80      	cmp	r3, #128	; 0x80
 8004284:	d103      	bne.n	800428e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	e00e      	b.n	80042ac <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800428e:	7bbb      	ldrb	r3, [r7, #14]
 8004290:	4619      	mov	r1, r3
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 ffbe 	bl	8005214 <USBD_LL_IsStallEP>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	2201      	movs	r2, #1
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	e002      	b.n	80042ac <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	2202      	movs	r2, #2
 80042b0:	4619      	mov	r1, r3
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 fb92 	bl	80049dc <USBD_CtlSendData>
              break;
 80042b8:	e004      	b.n	80042c4 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80042ba:	6839      	ldr	r1, [r7, #0]
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 fb23 	bl	8004908 <USBD_CtlError>
              break;
 80042c2:	bf00      	nop
          }
          break;
 80042c4:	e004      	b.n	80042d0 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80042c6:	6839      	ldr	r1, [r7, #0]
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 fb1d 	bl	8004908 <USBD_CtlError>
          break;
 80042ce:	bf00      	nop
      }
      break;
 80042d0:	e004      	b.n	80042dc <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80042d2:	6839      	ldr	r1, [r7, #0]
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 fb17 	bl	8004908 <USBD_CtlError>
      break;
 80042da:	bf00      	nop
  }

  return ret;
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
	...

080042e8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80042f6:	2300      	movs	r3, #0
 80042f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	885b      	ldrh	r3, [r3, #2]
 8004302:	0a1b      	lsrs	r3, r3, #8
 8004304:	b29b      	uxth	r3, r3
 8004306:	3b01      	subs	r3, #1
 8004308:	2b06      	cmp	r3, #6
 800430a:	f200 8128 	bhi.w	800455e <USBD_GetDescriptor+0x276>
 800430e:	a201      	add	r2, pc, #4	; (adr r2, 8004314 <USBD_GetDescriptor+0x2c>)
 8004310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004314:	08004331 	.word	0x08004331
 8004318:	08004349 	.word	0x08004349
 800431c:	08004389 	.word	0x08004389
 8004320:	0800455f 	.word	0x0800455f
 8004324:	0800455f 	.word	0x0800455f
 8004328:	080044ff 	.word	0x080044ff
 800432c:	0800452b 	.word	0x0800452b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	7c12      	ldrb	r2, [r2, #16]
 800433c:	f107 0108 	add.w	r1, r7, #8
 8004340:	4610      	mov	r0, r2
 8004342:	4798      	blx	r3
 8004344:	60f8      	str	r0, [r7, #12]
      break;
 8004346:	e112      	b.n	800456e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	7c1b      	ldrb	r3, [r3, #16]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10d      	bne.n	800436c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004358:	f107 0208 	add.w	r2, r7, #8
 800435c:	4610      	mov	r0, r2
 800435e:	4798      	blx	r3
 8004360:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	3301      	adds	r3, #1
 8004366:	2202      	movs	r2, #2
 8004368:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800436a:	e100      	b.n	800456e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004374:	f107 0208 	add.w	r2, r7, #8
 8004378:	4610      	mov	r0, r2
 800437a:	4798      	blx	r3
 800437c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	3301      	adds	r3, #1
 8004382:	2202      	movs	r2, #2
 8004384:	701a      	strb	r2, [r3, #0]
      break;
 8004386:	e0f2      	b.n	800456e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	885b      	ldrh	r3, [r3, #2]
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b05      	cmp	r3, #5
 8004390:	f200 80ac 	bhi.w	80044ec <USBD_GetDescriptor+0x204>
 8004394:	a201      	add	r2, pc, #4	; (adr r2, 800439c <USBD_GetDescriptor+0xb4>)
 8004396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439a:	bf00      	nop
 800439c:	080043b5 	.word	0x080043b5
 80043a0:	080043e9 	.word	0x080043e9
 80043a4:	0800441d 	.word	0x0800441d
 80043a8:	08004451 	.word	0x08004451
 80043ac:	08004485 	.word	0x08004485
 80043b0:	080044b9 	.word	0x080044b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00b      	beq.n	80043d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	7c12      	ldrb	r2, [r2, #16]
 80043cc:	f107 0108 	add.w	r1, r7, #8
 80043d0:	4610      	mov	r0, r2
 80043d2:	4798      	blx	r3
 80043d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80043d6:	e091      	b.n	80044fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80043d8:	6839      	ldr	r1, [r7, #0]
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 fa94 	bl	8004908 <USBD_CtlError>
            err++;
 80043e0:	7afb      	ldrb	r3, [r7, #11]
 80043e2:	3301      	adds	r3, #1
 80043e4:	72fb      	strb	r3, [r7, #11]
          break;
 80043e6:	e089      	b.n	80044fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00b      	beq.n	800440c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	7c12      	ldrb	r2, [r2, #16]
 8004400:	f107 0108 	add.w	r1, r7, #8
 8004404:	4610      	mov	r0, r2
 8004406:	4798      	blx	r3
 8004408:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800440a:	e077      	b.n	80044fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800440c:	6839      	ldr	r1, [r7, #0]
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 fa7a 	bl	8004908 <USBD_CtlError>
            err++;
 8004414:	7afb      	ldrb	r3, [r7, #11]
 8004416:	3301      	adds	r3, #1
 8004418:	72fb      	strb	r3, [r7, #11]
          break;
 800441a:	e06f      	b.n	80044fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00b      	beq.n	8004440 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	7c12      	ldrb	r2, [r2, #16]
 8004434:	f107 0108 	add.w	r1, r7, #8
 8004438:	4610      	mov	r0, r2
 800443a:	4798      	blx	r3
 800443c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800443e:	e05d      	b.n	80044fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004440:	6839      	ldr	r1, [r7, #0]
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 fa60 	bl	8004908 <USBD_CtlError>
            err++;
 8004448:	7afb      	ldrb	r3, [r7, #11]
 800444a:	3301      	adds	r3, #1
 800444c:	72fb      	strb	r3, [r7, #11]
          break;
 800444e:	e055      	b.n	80044fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00b      	beq.n	8004474 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	7c12      	ldrb	r2, [r2, #16]
 8004468:	f107 0108 	add.w	r1, r7, #8
 800446c:	4610      	mov	r0, r2
 800446e:	4798      	blx	r3
 8004470:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004472:	e043      	b.n	80044fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8004474:	6839      	ldr	r1, [r7, #0]
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 fa46 	bl	8004908 <USBD_CtlError>
            err++;
 800447c:	7afb      	ldrb	r3, [r7, #11]
 800447e:	3301      	adds	r3, #1
 8004480:	72fb      	strb	r3, [r7, #11]
          break;
 8004482:	e03b      	b.n	80044fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00b      	beq.n	80044a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	7c12      	ldrb	r2, [r2, #16]
 800449c:	f107 0108 	add.w	r1, r7, #8
 80044a0:	4610      	mov	r0, r2
 80044a2:	4798      	blx	r3
 80044a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80044a6:	e029      	b.n	80044fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80044a8:	6839      	ldr	r1, [r7, #0]
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 fa2c 	bl	8004908 <USBD_CtlError>
            err++;
 80044b0:	7afb      	ldrb	r3, [r7, #11]
 80044b2:	3301      	adds	r3, #1
 80044b4:	72fb      	strb	r3, [r7, #11]
          break;
 80044b6:	e021      	b.n	80044fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80044be:	699b      	ldr	r3, [r3, #24]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00b      	beq.n	80044dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80044ca:	699b      	ldr	r3, [r3, #24]
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	7c12      	ldrb	r2, [r2, #16]
 80044d0:	f107 0108 	add.w	r1, r7, #8
 80044d4:	4610      	mov	r0, r2
 80044d6:	4798      	blx	r3
 80044d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80044da:	e00f      	b.n	80044fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80044dc:	6839      	ldr	r1, [r7, #0]
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 fa12 	bl	8004908 <USBD_CtlError>
            err++;
 80044e4:	7afb      	ldrb	r3, [r7, #11]
 80044e6:	3301      	adds	r3, #1
 80044e8:	72fb      	strb	r3, [r7, #11]
          break;
 80044ea:	e007      	b.n	80044fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80044ec:	6839      	ldr	r1, [r7, #0]
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 fa0a 	bl	8004908 <USBD_CtlError>
          err++;
 80044f4:	7afb      	ldrb	r3, [r7, #11]
 80044f6:	3301      	adds	r3, #1
 80044f8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80044fa:	e038      	b.n	800456e <USBD_GetDescriptor+0x286>
 80044fc:	e037      	b.n	800456e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	7c1b      	ldrb	r3, [r3, #16]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d109      	bne.n	800451a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800450c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800450e:	f107 0208 	add.w	r2, r7, #8
 8004512:	4610      	mov	r0, r2
 8004514:	4798      	blx	r3
 8004516:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004518:	e029      	b.n	800456e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800451a:	6839      	ldr	r1, [r7, #0]
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f9f3 	bl	8004908 <USBD_CtlError>
        err++;
 8004522:	7afb      	ldrb	r3, [r7, #11]
 8004524:	3301      	adds	r3, #1
 8004526:	72fb      	strb	r3, [r7, #11]
      break;
 8004528:	e021      	b.n	800456e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	7c1b      	ldrb	r3, [r3, #16]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10d      	bne.n	800454e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453a:	f107 0208 	add.w	r2, r7, #8
 800453e:	4610      	mov	r0, r2
 8004540:	4798      	blx	r3
 8004542:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	3301      	adds	r3, #1
 8004548:	2207      	movs	r2, #7
 800454a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800454c:	e00f      	b.n	800456e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800454e:	6839      	ldr	r1, [r7, #0]
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 f9d9 	bl	8004908 <USBD_CtlError>
        err++;
 8004556:	7afb      	ldrb	r3, [r7, #11]
 8004558:	3301      	adds	r3, #1
 800455a:	72fb      	strb	r3, [r7, #11]
      break;
 800455c:	e007      	b.n	800456e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800455e:	6839      	ldr	r1, [r7, #0]
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f9d1 	bl	8004908 <USBD_CtlError>
      err++;
 8004566:	7afb      	ldrb	r3, [r7, #11]
 8004568:	3301      	adds	r3, #1
 800456a:	72fb      	strb	r3, [r7, #11]
      break;
 800456c:	bf00      	nop
  }

  if (err != 0U)
 800456e:	7afb      	ldrb	r3, [r7, #11]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d11c      	bne.n	80045ae <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8004574:	893b      	ldrh	r3, [r7, #8]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d011      	beq.n	800459e <USBD_GetDescriptor+0x2b6>
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	88db      	ldrh	r3, [r3, #6]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00d      	beq.n	800459e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	88da      	ldrh	r2, [r3, #6]
 8004586:	893b      	ldrh	r3, [r7, #8]
 8004588:	4293      	cmp	r3, r2
 800458a:	bf28      	it	cs
 800458c:	4613      	movcs	r3, r2
 800458e:	b29b      	uxth	r3, r3
 8004590:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004592:	893b      	ldrh	r3, [r7, #8]
 8004594:	461a      	mov	r2, r3
 8004596:	68f9      	ldr	r1, [r7, #12]
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 fa1f 	bl	80049dc <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	88db      	ldrh	r3, [r3, #6]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d104      	bne.n	80045b0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 fa58 	bl	8004a5c <USBD_CtlSendStatus>
 80045ac:	e000      	b.n	80045b0 <USBD_GetDescriptor+0x2c8>
    return;
 80045ae:	bf00      	nop
    }
  }
}
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop

080045b8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	889b      	ldrh	r3, [r3, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d130      	bne.n	800462c <USBD_SetAddress+0x74>
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	88db      	ldrh	r3, [r3, #6]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d12c      	bne.n	800462c <USBD_SetAddress+0x74>
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	885b      	ldrh	r3, [r3, #2]
 80045d6:	2b7f      	cmp	r3, #127	; 0x7f
 80045d8:	d828      	bhi.n	800462c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	885b      	ldrh	r3, [r3, #2]
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80045ec:	2b03      	cmp	r3, #3
 80045ee:	d104      	bne.n	80045fa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80045f0:	6839      	ldr	r1, [r7, #0]
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f988 	bl	8004908 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80045f8:	e01c      	b.n	8004634 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	7bfa      	ldrb	r2, [r7, #15]
 80045fe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004602:	7bfb      	ldrb	r3, [r7, #15]
 8004604:	4619      	mov	r1, r3
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 fe29 	bl	800525e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 fa25 	bl	8004a5c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8004612:	7bfb      	ldrb	r3, [r7, #15]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d004      	beq.n	8004622 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004620:	e008      	b.n	8004634 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800462a:	e003      	b.n	8004634 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800462c:	6839      	ldr	r1, [r7, #0]
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f96a 	bl	8004908 <USBD_CtlError>
  }
}
 8004634:	bf00      	nop
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	885b      	ldrh	r3, [r3, #2]
 800464a:	b2da      	uxtb	r2, r3
 800464c:	4b41      	ldr	r3, [pc, #260]	; (8004754 <USBD_SetConfig+0x118>)
 800464e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004650:	4b40      	ldr	r3, [pc, #256]	; (8004754 <USBD_SetConfig+0x118>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d904      	bls.n	8004662 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8004658:	6839      	ldr	r1, [r7, #0]
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f954 	bl	8004908 <USBD_CtlError>
 8004660:	e075      	b.n	800474e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004668:	2b02      	cmp	r3, #2
 800466a:	d002      	beq.n	8004672 <USBD_SetConfig+0x36>
 800466c:	2b03      	cmp	r3, #3
 800466e:	d023      	beq.n	80046b8 <USBD_SetConfig+0x7c>
 8004670:	e062      	b.n	8004738 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8004672:	4b38      	ldr	r3, [pc, #224]	; (8004754 <USBD_SetConfig+0x118>)
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d01a      	beq.n	80046b0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800467a:	4b36      	ldr	r3, [pc, #216]	; (8004754 <USBD_SetConfig+0x118>)
 800467c:	781b      	ldrb	r3, [r3, #0]
 800467e:	461a      	mov	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2203      	movs	r2, #3
 8004688:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800468c:	4b31      	ldr	r3, [pc, #196]	; (8004754 <USBD_SetConfig+0x118>)
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	4619      	mov	r1, r3
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7ff f9f4 	bl	8003a80 <USBD_SetClassConfig>
 8004698:	4603      	mov	r3, r0
 800469a:	2b02      	cmp	r3, #2
 800469c:	d104      	bne.n	80046a8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800469e:	6839      	ldr	r1, [r7, #0]
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 f931 	bl	8004908 <USBD_CtlError>
            return;
 80046a6:	e052      	b.n	800474e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f9d7 	bl	8004a5c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80046ae:	e04e      	b.n	800474e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 f9d3 	bl	8004a5c <USBD_CtlSendStatus>
        break;
 80046b6:	e04a      	b.n	800474e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80046b8:	4b26      	ldr	r3, [pc, #152]	; (8004754 <USBD_SetConfig+0x118>)
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d112      	bne.n	80046e6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80046c8:	4b22      	ldr	r3, [pc, #136]	; (8004754 <USBD_SetConfig+0x118>)
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	461a      	mov	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80046d2:	4b20      	ldr	r3, [pc, #128]	; (8004754 <USBD_SetConfig+0x118>)
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	4619      	mov	r1, r3
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f7ff f9f0 	bl	8003abe <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f9bc 	bl	8004a5c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80046e4:	e033      	b.n	800474e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80046e6:	4b1b      	ldr	r3, [pc, #108]	; (8004754 <USBD_SetConfig+0x118>)
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	461a      	mov	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d01d      	beq.n	8004730 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	4619      	mov	r1, r3
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f7ff f9de 	bl	8003abe <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8004702:	4b14      	ldr	r3, [pc, #80]	; (8004754 <USBD_SetConfig+0x118>)
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	461a      	mov	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800470c:	4b11      	ldr	r3, [pc, #68]	; (8004754 <USBD_SetConfig+0x118>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	4619      	mov	r1, r3
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7ff f9b4 	bl	8003a80 <USBD_SetClassConfig>
 8004718:	4603      	mov	r3, r0
 800471a:	2b02      	cmp	r3, #2
 800471c:	d104      	bne.n	8004728 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800471e:	6839      	ldr	r1, [r7, #0]
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f8f1 	bl	8004908 <USBD_CtlError>
            return;
 8004726:	e012      	b.n	800474e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f997 	bl	8004a5c <USBD_CtlSendStatus>
        break;
 800472e:	e00e      	b.n	800474e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f993 	bl	8004a5c <USBD_CtlSendStatus>
        break;
 8004736:	e00a      	b.n	800474e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8004738:	6839      	ldr	r1, [r7, #0]
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f8e4 	bl	8004908 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8004740:	4b04      	ldr	r3, [pc, #16]	; (8004754 <USBD_SetConfig+0x118>)
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	4619      	mov	r1, r3
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7ff f9b9 	bl	8003abe <USBD_ClrClassConfig>
        break;
 800474c:	bf00      	nop
    }
  }
}
 800474e:	3708      	adds	r7, #8
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	20000164 	.word	0x20000164

08004758 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	88db      	ldrh	r3, [r3, #6]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d004      	beq.n	8004774 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800476a:	6839      	ldr	r1, [r7, #0]
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f8cb 	bl	8004908 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8004772:	e021      	b.n	80047b8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800477a:	2b01      	cmp	r3, #1
 800477c:	db17      	blt.n	80047ae <USBD_GetConfig+0x56>
 800477e:	2b02      	cmp	r3, #2
 8004780:	dd02      	ble.n	8004788 <USBD_GetConfig+0x30>
 8004782:	2b03      	cmp	r3, #3
 8004784:	d00b      	beq.n	800479e <USBD_GetConfig+0x46>
 8004786:	e012      	b.n	80047ae <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	3308      	adds	r3, #8
 8004792:	2201      	movs	r2, #1
 8004794:	4619      	mov	r1, r3
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f920 	bl	80049dc <USBD_CtlSendData>
        break;
 800479c:	e00c      	b.n	80047b8 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	3304      	adds	r3, #4
 80047a2:	2201      	movs	r2, #1
 80047a4:	4619      	mov	r1, r3
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f918 	bl	80049dc <USBD_CtlSendData>
        break;
 80047ac:	e004      	b.n	80047b8 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80047ae:	6839      	ldr	r1, [r7, #0]
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f8a9 	bl	8004908 <USBD_CtlError>
        break;
 80047b6:	bf00      	nop
}
 80047b8:	bf00      	nop
 80047ba:	3708      	adds	r7, #8
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80047d0:	3b01      	subs	r3, #1
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d81e      	bhi.n	8004814 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	88db      	ldrh	r3, [r3, #6]
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d004      	beq.n	80047e8 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80047de:	6839      	ldr	r1, [r7, #0]
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 f891 	bl	8004908 <USBD_CtlError>
        break;
 80047e6:	e01a      	b.n	800481e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d005      	beq.n	8004804 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f043 0202 	orr.w	r2, r3, #2
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	330c      	adds	r3, #12
 8004808:	2202      	movs	r2, #2
 800480a:	4619      	mov	r1, r3
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f8e5 	bl	80049dc <USBD_CtlSendData>
      break;
 8004812:	e004      	b.n	800481e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8004814:	6839      	ldr	r1, [r7, #0]
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f876 	bl	8004908 <USBD_CtlError>
      break;
 800481c:	bf00      	nop
  }
}
 800481e:	bf00      	nop
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b082      	sub	sp, #8
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
 800482e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	885b      	ldrh	r3, [r3, #2]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d106      	bne.n	8004846 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 f90b 	bl	8004a5c <USBD_CtlSendStatus>
  }
}
 8004846:	bf00      	nop
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b082      	sub	sp, #8
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
 8004856:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800485e:	3b01      	subs	r3, #1
 8004860:	2b02      	cmp	r3, #2
 8004862:	d80b      	bhi.n	800487c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	885b      	ldrh	r3, [r3, #2]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d10c      	bne.n	8004886 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f8f1 	bl	8004a5c <USBD_CtlSendStatus>
      }
      break;
 800487a:	e004      	b.n	8004886 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800487c:	6839      	ldr	r1, [r7, #0]
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 f842 	bl	8004908 <USBD_CtlError>
      break;
 8004884:	e000      	b.n	8004888 <USBD_ClrFeature+0x3a>
      break;
 8004886:	bf00      	nop
  }
}
 8004888:	bf00      	nop
 800488a:	3708      	adds	r7, #8
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	781a      	ldrb	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	785a      	ldrb	r2, [r3, #1]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	3302      	adds	r3, #2
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	b29a      	uxth	r2, r3
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	3303      	adds	r3, #3
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	021b      	lsls	r3, r3, #8
 80048bc:	b29b      	uxth	r3, r3
 80048be:	4413      	add	r3, r2
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	3304      	adds	r3, #4
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	3305      	adds	r3, #5
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	021b      	lsls	r3, r3, #8
 80048d8:	b29b      	uxth	r3, r3
 80048da:	4413      	add	r3, r2
 80048dc:	b29a      	uxth	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	3306      	adds	r3, #6
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	b29a      	uxth	r2, r3
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	3307      	adds	r3, #7
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	021b      	lsls	r3, r3, #8
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	4413      	add	r3, r2
 80048f8:	b29a      	uxth	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	80da      	strh	r2, [r3, #6]

}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	bc80      	pop	{r7}
 8004906:	4770      	bx	lr

08004908 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8004912:	2180      	movs	r1, #128	; 0x80
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 fc3f 	bl	8005198 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800491a:	2100      	movs	r1, #0
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f000 fc3b 	bl	8005198 <USBD_LL_StallEP>
}
 8004922:	bf00      	nop
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b086      	sub	sp, #24
 800492e:	af00      	add	r7, sp, #0
 8004930:	60f8      	str	r0, [r7, #12]
 8004932:	60b9      	str	r1, [r7, #8]
 8004934:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8004936:	2300      	movs	r3, #0
 8004938:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d032      	beq.n	80049a6 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f000 f834 	bl	80049ae <USBD_GetLen>
 8004946:	4603      	mov	r3, r0
 8004948:	3301      	adds	r3, #1
 800494a:	b29b      	uxth	r3, r3
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8004954:	7dfb      	ldrb	r3, [r7, #23]
 8004956:	1c5a      	adds	r2, r3, #1
 8004958:	75fa      	strb	r2, [r7, #23]
 800495a:	461a      	mov	r2, r3
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	4413      	add	r3, r2
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	7812      	ldrb	r2, [r2, #0]
 8004964:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8004966:	7dfb      	ldrb	r3, [r7, #23]
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	75fa      	strb	r2, [r7, #23]
 800496c:	461a      	mov	r2, r3
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	4413      	add	r3, r2
 8004972:	2203      	movs	r2, #3
 8004974:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8004976:	e012      	b.n	800499e <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	1c5a      	adds	r2, r3, #1
 800497c:	60fa      	str	r2, [r7, #12]
 800497e:	7dfa      	ldrb	r2, [r7, #23]
 8004980:	1c51      	adds	r1, r2, #1
 8004982:	75f9      	strb	r1, [r7, #23]
 8004984:	4611      	mov	r1, r2
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	440a      	add	r2, r1
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800498e:	7dfb      	ldrb	r3, [r7, #23]
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	75fa      	strb	r2, [r7, #23]
 8004994:	461a      	mov	r2, r3
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	4413      	add	r3, r2
 800499a:	2200      	movs	r2, #0
 800499c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1e8      	bne.n	8004978 <USBD_GetString+0x4e>
    }
  }
}
 80049a6:	bf00      	nop
 80049a8:	3718      	adds	r7, #24
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b085      	sub	sp, #20
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80049b6:	2300      	movs	r3, #0
 80049b8:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80049ba:	e005      	b.n	80049c8 <USBD_GetLen+0x1a>
  {
    len++;
 80049bc:	7bfb      	ldrb	r3, [r7, #15]
 80049be:	3301      	adds	r3, #1
 80049c0:	73fb      	strb	r3, [r7, #15]
    buf++;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	3301      	adds	r3, #1
 80049c6:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1f5      	bne.n	80049bc <USBD_GetLen+0xe>
  }

  return len;
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bc80      	pop	{r7}
 80049da:	4770      	bx	lr

080049dc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	4613      	mov	r3, r2
 80049e8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2202      	movs	r2, #2
 80049ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80049f2:	88fa      	ldrh	r2, [r7, #6]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80049f8:	88fa      	ldrh	r2, [r7, #6]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80049fe:	88fb      	ldrh	r3, [r7, #6]
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	2100      	movs	r1, #0
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f000 fc49 	bl	800529c <USBD_LL_Transmit>

  return USBD_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8004a22:	88fb      	ldrh	r3, [r7, #6]
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	2100      	movs	r1, #0
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 fc37 	bl	800529c <USBD_LL_Transmit>

  return USBD_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	4613      	mov	r3, r2
 8004a44:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8004a46:	88fb      	ldrh	r3, [r7, #6]
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f000 fc48 	bl	80052e2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2204      	movs	r2, #4
 8004a68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	2200      	movs	r2, #0
 8004a70:	2100      	movs	r1, #0
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 fc12 	bl	800529c <USBD_LL_Transmit>

  return USBD_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3708      	adds	r7, #8
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b082      	sub	sp, #8
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2205      	movs	r2, #5
 8004a8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004a92:	2300      	movs	r3, #0
 8004a94:	2200      	movs	r2, #0
 8004a96:	2100      	movs	r1, #0
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 fc22 	bl	80052e2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <main>:
  * @brief  The application entry point.
  * @retval int
  */
extern USBD_HandleTypeDef hUsbDeviceFS;
int main(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t HIDbuffer[8] = {0};
 8004aae:	463b      	mov	r3, r7
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	605a      	str	r2, [r3, #4]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004ab6:	f7fb fbb5 	bl	8000224 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004aba:	f000 f827 	bl	8004b0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004abe:	f000 f901 	bl	8004cc4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8004ac2:	f000 f9df 	bl	8004e84 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8004ac6:	f000 f87f 	bl	8004bc8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	buf = HIDbuffer;
 8004aca:	463b      	mov	r3, r7
 8004acc:	60fb      	str	r3, [r7, #12]
	USBDelay = USBD_HID_GetPollingInterval(&hUsbDeviceFS);
 8004ace:	480e      	ldr	r0, [pc, #56]	; (8004b08 <main+0x60>)
 8004ad0:	f7fe ff14 	bl	80038fc <USBD_HID_GetPollingInterval>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	60bb      	str	r3, [r7, #8]
	HIDbuffer[2] = 0x38;
 8004ad8:	2338      	movs	r3, #56	; 0x38
 8004ada:	70bb      	strb	r3, [r7, #2]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_Delay(1500);
 8004adc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004ae0:	f7fb fc02 	bl	80002e8 <HAL_Delay>
	  HIDbuffer[2] = 0x38;
 8004ae4:	2338      	movs	r3, #56	; 0x38
 8004ae6:	70bb      	strb	r3, [r7, #2]
	  USBD_HID_SendReport(&hUsbDeviceFS, buf, 8);
 8004ae8:	2208      	movs	r2, #8
 8004aea:	68f9      	ldr	r1, [r7, #12]
 8004aec:	4806      	ldr	r0, [pc, #24]	; (8004b08 <main+0x60>)
 8004aee:	f7fe fee3 	bl	80038b8 <USBD_HID_SendReport>

	  HAL_Delay(150);
 8004af2:	2096      	movs	r0, #150	; 0x96
 8004af4:	f7fb fbf8 	bl	80002e8 <HAL_Delay>
	  HIDbuffer[2] = 0x0;
 8004af8:	2300      	movs	r3, #0
 8004afa:	70bb      	strb	r3, [r7, #2]
	  USBD_HID_SendReport(&hUsbDeviceFS, buf, 8);
 8004afc:	2208      	movs	r2, #8
 8004afe:	68f9      	ldr	r1, [r7, #12]
 8004b00:	4801      	ldr	r0, [pc, #4]	; (8004b08 <main+0x60>)
 8004b02:	f7fe fed9 	bl	80038b8 <USBD_HID_SendReport>
  {
 8004b06:	e7e9      	b.n	8004adc <main+0x34>
 8004b08:	200001c0 	.word	0x200001c0

08004b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b096      	sub	sp, #88	; 0x58
 8004b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004b12:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b16:	2228      	movs	r2, #40	; 0x28
 8004b18:	2100      	movs	r1, #0
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 fda8 	bl	8005670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004b20:	f107 031c 	add.w	r3, r7, #28
 8004b24:	2200      	movs	r2, #0
 8004b26:	601a      	str	r2, [r3, #0]
 8004b28:	605a      	str	r2, [r3, #4]
 8004b2a:	609a      	str	r2, [r3, #8]
 8004b2c:	60da      	str	r2, [r3, #12]
 8004b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b30:	1d3b      	adds	r3, r7, #4
 8004b32:	2200      	movs	r2, #0
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	605a      	str	r2, [r3, #4]
 8004b38:	609a      	str	r2, [r3, #8]
 8004b3a:	60da      	str	r2, [r3, #12]
 8004b3c:	611a      	str	r2, [r3, #16]
 8004b3e:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004b40:	2301      	movs	r3, #1
 8004b42:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004b44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b48:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b52:	2302      	movs	r3, #2
 8004b54:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004b56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004b5a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8004b5c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004b60:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004b62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7fc fbba 	bl	80012e0 <HAL_RCC_OscConfig>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8004b72:	f000 f8c9 	bl	8004d08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004b76:	230f      	movs	r3, #15
 8004b78:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b86:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004b8c:	f107 031c 	add.w	r3, r7, #28
 8004b90:	2101      	movs	r1, #1
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fc fe24 	bl	80017e0 <HAL_RCC_ClockConfig>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8004b9e:	f000 f8b3 	bl	8004d08 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8004ba2:	2310      	movs	r3, #16
 8004ba4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8004ba6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004baa:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004bac:	1d3b      	adds	r3, r7, #4
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fc ff80 	bl	8001ab4 <HAL_RCCEx_PeriphCLKConfig>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d001      	beq.n	8004bbe <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8004bba:	f000 f8a5 	bl	8004d08 <Error_Handler>
  }
}
 8004bbe:	bf00      	nop
 8004bc0:	3758      	adds	r7, #88	; 0x58
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
	...

08004bc8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b092      	sub	sp, #72	; 0x48
 8004bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004bce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	601a      	str	r2, [r3, #0]
 8004bd6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004bdc:	2200      	movs	r2, #0
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	605a      	str	r2, [r3, #4]
 8004be2:	609a      	str	r2, [r3, #8]
 8004be4:	60da      	str	r2, [r3, #12]
 8004be6:	611a      	str	r2, [r3, #16]
 8004be8:	615a      	str	r2, [r3, #20]
 8004bea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004bec:	1d3b      	adds	r3, r7, #4
 8004bee:	2220      	movs	r2, #32
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 fd3c 	bl	8005670 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004bf8:	4b30      	ldr	r3, [pc, #192]	; (8004cbc <MX_TIM1_Init+0xf4>)
 8004bfa:	4a31      	ldr	r2, [pc, #196]	; (8004cc0 <MX_TIM1_Init+0xf8>)
 8004bfc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004bfe:	4b2f      	ldr	r3, [pc, #188]	; (8004cbc <MX_TIM1_Init+0xf4>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c04:	4b2d      	ldr	r3, [pc, #180]	; (8004cbc <MX_TIM1_Init+0xf4>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8004c0a:	4b2c      	ldr	r3, [pc, #176]	; (8004cbc <MX_TIM1_Init+0xf4>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004c10:	4b2a      	ldr	r3, [pc, #168]	; (8004cbc <MX_TIM1_Init+0xf4>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004c16:	4b29      	ldr	r3, [pc, #164]	; (8004cbc <MX_TIM1_Init+0xf4>)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c1c:	4b27      	ldr	r3, [pc, #156]	; (8004cbc <MX_TIM1_Init+0xf4>)
 8004c1e:	2200      	movs	r2, #0
 8004c20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004c22:	4826      	ldr	r0, [pc, #152]	; (8004cbc <MX_TIM1_Init+0xf4>)
 8004c24:	f7fc fffc 	bl	8001c20 <HAL_TIM_PWM_Init>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d001      	beq.n	8004c32 <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8004c2e:	f000 f86b 	bl	8004d08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c32:	2300      	movs	r3, #0
 8004c34:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c36:	2300      	movs	r3, #0
 8004c38:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004c3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004c3e:	4619      	mov	r1, r3
 8004c40:	481e      	ldr	r0, [pc, #120]	; (8004cbc <MX_TIM1_Init+0xf4>)
 8004c42:	f7fd fb05 	bl	8002250 <HAL_TIMEx_MasterConfigSynchronization>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d001      	beq.n	8004c50 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8004c4c:	f000 f85c 	bl	8004d08 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004c50:	2360      	movs	r3, #96	; 0x60
 8004c52:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8004c54:	2300      	movs	r3, #0
 8004c56:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004c60:	2300      	movs	r3, #0
 8004c62:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004c64:	2300      	movs	r3, #0
 8004c66:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c6c:	220c      	movs	r2, #12
 8004c6e:	4619      	mov	r1, r3
 8004c70:	4812      	ldr	r0, [pc, #72]	; (8004cbc <MX_TIM1_Init+0xf4>)
 8004c72:	f7fd f801 	bl	8001c78 <HAL_TIM_PWM_ConfigChannel>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8004c7c:	f000 f844 	bl	8004d08 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004c80:	2300      	movs	r3, #0
 8004c82:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004c84:	2300      	movs	r3, #0
 8004c86:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004c90:	2300      	movs	r3, #0
 8004c92:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004c94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c98:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004c9e:	1d3b      	adds	r3, r7, #4
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	4806      	ldr	r0, [pc, #24]	; (8004cbc <MX_TIM1_Init+0xf4>)
 8004ca4:	f7fd fb18 	bl	80022d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <MX_TIM1_Init+0xea>
  {
    Error_Handler();
 8004cae:	f000 f82b 	bl	8004d08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004cb2:	bf00      	nop
 8004cb4:	3748      	adds	r7, #72	; 0x48
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	20000180 	.word	0x20000180
 8004cc0:	40012c00 	.word	0x40012c00

08004cc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004cca:	4b0e      	ldr	r3, [pc, #56]	; (8004d04 <MX_GPIO_Init+0x40>)
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	4a0d      	ldr	r2, [pc, #52]	; (8004d04 <MX_GPIO_Init+0x40>)
 8004cd0:	f043 0320 	orr.w	r3, r3, #32
 8004cd4:	6193      	str	r3, [r2, #24]
 8004cd6:	4b0b      	ldr	r3, [pc, #44]	; (8004d04 <MX_GPIO_Init+0x40>)
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	f003 0320 	and.w	r3, r3, #32
 8004cde:	607b      	str	r3, [r7, #4]
 8004ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ce2:	4b08      	ldr	r3, [pc, #32]	; (8004d04 <MX_GPIO_Init+0x40>)
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	4a07      	ldr	r2, [pc, #28]	; (8004d04 <MX_GPIO_Init+0x40>)
 8004ce8:	f043 0304 	orr.w	r3, r3, #4
 8004cec:	6193      	str	r3, [r2, #24]
 8004cee:	4b05      	ldr	r3, [pc, #20]	; (8004d04 <MX_GPIO_Init+0x40>)
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	f003 0304 	and.w	r3, r3, #4
 8004cf6:	603b      	str	r3, [r7, #0]
 8004cf8:	683b      	ldr	r3, [r7, #0]

}
 8004cfa:	bf00      	nop
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bc80      	pop	{r7}
 8004d02:	4770      	bx	lr
 8004d04:	40021000 	.word	0x40021000

08004d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004d0c:	bf00      	nop
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bc80      	pop	{r7}
 8004d12:	4770      	bx	lr

08004d14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004d1a:	4b15      	ldr	r3, [pc, #84]	; (8004d70 <HAL_MspInit+0x5c>)
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	4a14      	ldr	r2, [pc, #80]	; (8004d70 <HAL_MspInit+0x5c>)
 8004d20:	f043 0301 	orr.w	r3, r3, #1
 8004d24:	6193      	str	r3, [r2, #24]
 8004d26:	4b12      	ldr	r3, [pc, #72]	; (8004d70 <HAL_MspInit+0x5c>)
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	60bb      	str	r3, [r7, #8]
 8004d30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d32:	4b0f      	ldr	r3, [pc, #60]	; (8004d70 <HAL_MspInit+0x5c>)
 8004d34:	69db      	ldr	r3, [r3, #28]
 8004d36:	4a0e      	ldr	r2, [pc, #56]	; (8004d70 <HAL_MspInit+0x5c>)
 8004d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d3c:	61d3      	str	r3, [r2, #28]
 8004d3e:	4b0c      	ldr	r3, [pc, #48]	; (8004d70 <HAL_MspInit+0x5c>)
 8004d40:	69db      	ldr	r3, [r3, #28]
 8004d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d46:	607b      	str	r3, [r7, #4]
 8004d48:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004d4a:	4b0a      	ldr	r3, [pc, #40]	; (8004d74 <HAL_MspInit+0x60>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004d56:	60fb      	str	r3, [r7, #12]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	4a04      	ldr	r2, [pc, #16]	; (8004d74 <HAL_MspInit+0x60>)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d66:	bf00      	nop
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bc80      	pop	{r7}
 8004d6e:	4770      	bx	lr
 8004d70:	40021000 	.word	0x40021000
 8004d74:	40010000 	.word	0x40010000

08004d78 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a09      	ldr	r2, [pc, #36]	; (8004dac <HAL_TIM_PWM_MspInit+0x34>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d10b      	bne.n	8004da2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004d8a:	4b09      	ldr	r3, [pc, #36]	; (8004db0 <HAL_TIM_PWM_MspInit+0x38>)
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	4a08      	ldr	r2, [pc, #32]	; (8004db0 <HAL_TIM_PWM_MspInit+0x38>)
 8004d90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004d94:	6193      	str	r3, [r2, #24]
 8004d96:	4b06      	ldr	r3, [pc, #24]	; (8004db0 <HAL_TIM_PWM_MspInit+0x38>)
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d9e:	60fb      	str	r3, [r7, #12]
 8004da0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004da2:	bf00      	nop
 8004da4:	3714      	adds	r7, #20
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bc80      	pop	{r7}
 8004daa:	4770      	bx	lr
 8004dac:	40012c00 	.word	0x40012c00
 8004db0:	40021000 	.word	0x40021000

08004db4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004db4:	b480      	push	{r7}
 8004db6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004db8:	bf00      	nop
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bc80      	pop	{r7}
 8004dbe:	4770      	bx	lr

08004dc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004dc4:	e7fe      	b.n	8004dc4 <HardFault_Handler+0x4>

08004dc6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004dca:	e7fe      	b.n	8004dca <MemManage_Handler+0x4>

08004dcc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004dd0:	e7fe      	b.n	8004dd0 <BusFault_Handler+0x4>

08004dd2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004dd6:	e7fe      	b.n	8004dd6 <UsageFault_Handler+0x4>

08004dd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004ddc:	bf00      	nop
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bc80      	pop	{r7}
 8004de2:	4770      	bx	lr

08004de4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004de4:	b480      	push	{r7}
 8004de6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004de8:	bf00      	nop
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bc80      	pop	{r7}
 8004dee:	4770      	bx	lr

08004df0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004df0:	b480      	push	{r7}
 8004df2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004df4:	bf00      	nop
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bc80      	pop	{r7}
 8004dfa:	4770      	bx	lr

08004dfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e00:	f7fb fa56 	bl	80002b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e04:	bf00      	nop
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004e0c:	4802      	ldr	r0, [pc, #8]	; (8004e18 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8004e0e:	f7fb fca1 	bl	8000754 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8004e12:	bf00      	nop
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	20000484 	.word	0x20000484

08004e1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004e20:	4b15      	ldr	r3, [pc, #84]	; (8004e78 <SystemInit+0x5c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a14      	ldr	r2, [pc, #80]	; (8004e78 <SystemInit+0x5c>)
 8004e26:	f043 0301 	orr.w	r3, r3, #1
 8004e2a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004e2c:	4b12      	ldr	r3, [pc, #72]	; (8004e78 <SystemInit+0x5c>)
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	4911      	ldr	r1, [pc, #68]	; (8004e78 <SystemInit+0x5c>)
 8004e32:	4b12      	ldr	r3, [pc, #72]	; (8004e7c <SystemInit+0x60>)
 8004e34:	4013      	ands	r3, r2
 8004e36:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004e38:	4b0f      	ldr	r3, [pc, #60]	; (8004e78 <SystemInit+0x5c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a0e      	ldr	r2, [pc, #56]	; (8004e78 <SystemInit+0x5c>)
 8004e3e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004e42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e46:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004e48:	4b0b      	ldr	r3, [pc, #44]	; (8004e78 <SystemInit+0x5c>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a0a      	ldr	r2, [pc, #40]	; (8004e78 <SystemInit+0x5c>)
 8004e4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e52:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004e54:	4b08      	ldr	r3, [pc, #32]	; (8004e78 <SystemInit+0x5c>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	4a07      	ldr	r2, [pc, #28]	; (8004e78 <SystemInit+0x5c>)
 8004e5a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004e5e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004e60:	4b05      	ldr	r3, [pc, #20]	; (8004e78 <SystemInit+0x5c>)
 8004e62:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004e66:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004e68:	4b05      	ldr	r3, [pc, #20]	; (8004e80 <SystemInit+0x64>)
 8004e6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004e6e:	609a      	str	r2, [r3, #8]
#endif 
}
 8004e70:	bf00      	nop
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bc80      	pop	{r7}
 8004e76:	4770      	bx	lr
 8004e78:	40021000 	.word	0x40021000
 8004e7c:	f8ff0000 	.word	0xf8ff0000
 8004e80:	e000ed00 	.word	0xe000ed00

08004e84 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	490e      	ldr	r1, [pc, #56]	; (8004ec4 <MX_USB_DEVICE_Init+0x40>)
 8004e8c:	480e      	ldr	r0, [pc, #56]	; (8004ec8 <MX_USB_DEVICE_Init+0x44>)
 8004e8e:	f7fe fd9d 	bl	80039cc <USBD_Init>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d001      	beq.n	8004e9c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8004e98:	f7ff ff36 	bl	8004d08 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8004e9c:	490b      	ldr	r1, [pc, #44]	; (8004ecc <MX_USB_DEVICE_Init+0x48>)
 8004e9e:	480a      	ldr	r0, [pc, #40]	; (8004ec8 <MX_USB_DEVICE_Init+0x44>)
 8004ea0:	f7fe fdbf 	bl	8003a22 <USBD_RegisterClass>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8004eaa:	f7ff ff2d 	bl	8004d08 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8004eae:	4806      	ldr	r0, [pc, #24]	; (8004ec8 <MX_USB_DEVICE_Init+0x44>)
 8004eb0:	f7fe fdd0 	bl	8003a54 <USBD_Start>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d001      	beq.n	8004ebe <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8004eba:	f7ff ff25 	bl	8004d08 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8004ebe:	bf00      	nop
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	200000f8 	.word	0x200000f8
 8004ec8:	200001c0 	.word	0x200001c0
 8004ecc:	20000008 	.word	0x20000008

08004ed0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a0d      	ldr	r2, [pc, #52]	; (8004f14 <HAL_PCD_MspInit+0x44>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d113      	bne.n	8004f0a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8004ee2:	4b0d      	ldr	r3, [pc, #52]	; (8004f18 <HAL_PCD_MspInit+0x48>)
 8004ee4:	69db      	ldr	r3, [r3, #28]
 8004ee6:	4a0c      	ldr	r2, [pc, #48]	; (8004f18 <HAL_PCD_MspInit+0x48>)
 8004ee8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004eec:	61d3      	str	r3, [r2, #28]
 8004eee:	4b0a      	ldr	r3, [pc, #40]	; (8004f18 <HAL_PCD_MspInit+0x48>)
 8004ef0:	69db      	ldr	r3, [r3, #28]
 8004ef2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ef6:	60fb      	str	r3, [r7, #12]
 8004ef8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8004efa:	2200      	movs	r2, #0
 8004efc:	2100      	movs	r1, #0
 8004efe:	2014      	movs	r0, #20
 8004f00:	f7fb faeb 	bl	80004da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8004f04:	2014      	movs	r0, #20
 8004f06:	f7fb fb04 	bl	8000512 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8004f0a:	bf00      	nop
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	40005c00 	.word	0x40005c00
 8004f18:	40021000 	.word	0x40021000

08004f1c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8004f30:	4619      	mov	r1, r3
 8004f32:	4610      	mov	r0, r2
 8004f34:	f7fe fdd6 	bl	8003ae4 <USBD_LL_SetupStage>
}
 8004f38:	bf00      	nop
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	460b      	mov	r3, r1
 8004f4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8004f52:	78fb      	ldrb	r3, [r7, #3]
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	015b      	lsls	r3, r3, #5
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	78fb      	ldrb	r3, [r7, #3]
 8004f62:	4619      	mov	r1, r3
 8004f64:	f7fe fe09 	bl	8003b7a <USBD_LL_DataOutStage>
}
 8004f68:	bf00      	nop
 8004f6a:	3708      	adds	r7, #8
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	460b      	mov	r3, r1
 8004f7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8004f82:	78fb      	ldrb	r3, [r7, #3]
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	015b      	lsls	r3, r3, #5
 8004f88:	4413      	add	r3, r2
 8004f8a:	333c      	adds	r3, #60	; 0x3c
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	78fb      	ldrb	r3, [r7, #3]
 8004f90:	4619      	mov	r1, r3
 8004f92:	f7fe fe63 	bl	8003c5c <USBD_LL_DataInStage>
}
 8004f96:	bf00      	nop
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}

08004f9e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004f9e:	b580      	push	{r7, lr}
 8004fa0:	b082      	sub	sp, #8
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7fe ff73 	bl	8003e98 <USBD_LL_SOF>
}
 8004fb2:	bf00      	nop
 8004fb4:	3708      	adds	r7, #8
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b084      	sub	sp, #16
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d001      	beq.n	8004fd2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8004fce:	f7ff fe9b 	bl	8004d08 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004fd8:	7bfa      	ldrb	r2, [r7, #15]
 8004fda:	4611      	mov	r1, r2
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7fe ff23 	bl	8003e28 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7fe fedc 	bl	8003da6 <USBD_LL_Reset>
}
 8004fee:	bf00      	nop
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
	...

08004ff8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8005006:	4618      	mov	r0, r3
 8005008:	f7fe ff1d 	bl	8003e46 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d005      	beq.n	8005020 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005014:	4b04      	ldr	r3, [pc, #16]	; (8005028 <HAL_PCD_SuspendCallback+0x30>)
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	4a03      	ldr	r2, [pc, #12]	; (8005028 <HAL_PCD_SuspendCallback+0x30>)
 800501a:	f043 0306 	orr.w	r3, r3, #6
 800501e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005020:	bf00      	nop
 8005022:	3708      	adds	r7, #8
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	e000ed00 	.word	0xe000ed00

0800502c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800503a:	4618      	mov	r0, r3
 800503c:	f7fe ff17 	bl	8003e6e <USBD_LL_Resume>
}
 8005040:	bf00      	nop
 8005042:	3708      	adds	r7, #8
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8005050:	4a1f      	ldr	r2, [pc, #124]	; (80050d0 <USBD_LL_Init+0x88>)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a1d      	ldr	r2, [pc, #116]	; (80050d0 <USBD_LL_Init+0x88>)
 800505c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8005060:	4b1b      	ldr	r3, [pc, #108]	; (80050d0 <USBD_LL_Init+0x88>)
 8005062:	4a1c      	ldr	r2, [pc, #112]	; (80050d4 <USBD_LL_Init+0x8c>)
 8005064:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8005066:	4b1a      	ldr	r3, [pc, #104]	; (80050d0 <USBD_LL_Init+0x88>)
 8005068:	2208      	movs	r2, #8
 800506a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800506c:	4b18      	ldr	r3, [pc, #96]	; (80050d0 <USBD_LL_Init+0x88>)
 800506e:	2202      	movs	r2, #2
 8005070:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005072:	4b17      	ldr	r3, [pc, #92]	; (80050d0 <USBD_LL_Init+0x88>)
 8005074:	2200      	movs	r2, #0
 8005076:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8005078:	4b15      	ldr	r3, [pc, #84]	; (80050d0 <USBD_LL_Init+0x88>)
 800507a:	2200      	movs	r2, #0
 800507c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800507e:	4b14      	ldr	r3, [pc, #80]	; (80050d0 <USBD_LL_Init+0x88>)
 8005080:	2200      	movs	r2, #0
 8005082:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005084:	4812      	ldr	r0, [pc, #72]	; (80050d0 <USBD_LL_Init+0x88>)
 8005086:	f7fb fa5e 	bl	8000546 <HAL_PCD_Init>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d001      	beq.n	8005094 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8005090:	f7ff fe3a 	bl	8004d08 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800509a:	2318      	movs	r3, #24
 800509c:	2200      	movs	r2, #0
 800509e:	2100      	movs	r1, #0
 80050a0:	f7fc f8e2 	bl	8001268 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80050aa:	2358      	movs	r3, #88	; 0x58
 80050ac:	2200      	movs	r2, #0
 80050ae:	2180      	movs	r1, #128	; 0x80
 80050b0:	f7fc f8da 	bl	8001268 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80050ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050be:	2200      	movs	r2, #0
 80050c0:	2181      	movs	r1, #129	; 0x81
 80050c2:	f7fc f8d1 	bl	8001268 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80050c6:	2300      	movs	r3, #0
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3708      	adds	r7, #8
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	20000484 	.word	0x20000484
 80050d4:	40005c00 	.word	0x40005c00

080050d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80050e0:	2300      	movs	r3, #0
 80050e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80050e4:	2300      	movs	r3, #0
 80050e6:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7fb fb0a 	bl	8000708 <HAL_PCD_Start>
 80050f4:	4603      	mov	r3, r0
 80050f6:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80050f8:	7bfb      	ldrb	r3, [r7, #15]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f000 f934 	bl	8005368 <USBD_Get_USB_Status>
 8005100:	4603      	mov	r3, r0
 8005102:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005104:	7bbb      	ldrb	r3, [r7, #14]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b084      	sub	sp, #16
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
 8005116:	4608      	mov	r0, r1
 8005118:	4611      	mov	r1, r2
 800511a:	461a      	mov	r2, r3
 800511c:	4603      	mov	r3, r0
 800511e:	70fb      	strb	r3, [r7, #3]
 8005120:	460b      	mov	r3, r1
 8005122:	70bb      	strb	r3, [r7, #2]
 8005124:	4613      	mov	r3, r2
 8005126:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005128:	2300      	movs	r3, #0
 800512a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800512c:	2300      	movs	r3, #0
 800512e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005136:	78bb      	ldrb	r3, [r7, #2]
 8005138:	883a      	ldrh	r2, [r7, #0]
 800513a:	78f9      	ldrb	r1, [r7, #3]
 800513c:	f7fb fc3d 	bl	80009ba <HAL_PCD_EP_Open>
 8005140:	4603      	mov	r3, r0
 8005142:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005144:	7bfb      	ldrb	r3, [r7, #15]
 8005146:	4618      	mov	r0, r3
 8005148:	f000 f90e 	bl	8005368 <USBD_Get_USB_Status>
 800514c:	4603      	mov	r3, r0
 800514e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8005150:	7bbb      	ldrb	r3, [r7, #14]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b084      	sub	sp, #16
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
 8005162:	460b      	mov	r3, r1
 8005164:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005166:	2300      	movs	r3, #0
 8005168:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800516a:	2300      	movs	r3, #0
 800516c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005174:	78fa      	ldrb	r2, [r7, #3]
 8005176:	4611      	mov	r1, r2
 8005178:	4618      	mov	r0, r3
 800517a:	f7fb fc7e 	bl	8000a7a <HAL_PCD_EP_Close>
 800517e:	4603      	mov	r3, r0
 8005180:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005182:	7bfb      	ldrb	r3, [r7, #15]
 8005184:	4618      	mov	r0, r3
 8005186:	f000 f8ef 	bl	8005368 <USBD_Get_USB_Status>
 800518a:	4603      	mov	r3, r0
 800518c:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 800518e:	7bbb      	ldrb	r3, [r7, #14]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	460b      	mov	r3, r1
 80051a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80051a4:	2300      	movs	r3, #0
 80051a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80051a8:	2300      	movs	r3, #0
 80051aa:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80051b2:	78fa      	ldrb	r2, [r7, #3]
 80051b4:	4611      	mov	r1, r2
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7fb fd14 	bl	8000be4 <HAL_PCD_EP_SetStall>
 80051bc:	4603      	mov	r3, r0
 80051be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 f8d0 	bl	8005368 <USBD_Get_USB_Status>
 80051c8:	4603      	mov	r3, r0
 80051ca:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80051cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b084      	sub	sp, #16
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
 80051de:	460b      	mov	r3, r1
 80051e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80051e2:	2300      	movs	r3, #0
 80051e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80051e6:	2300      	movs	r3, #0
 80051e8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80051f0:	78fa      	ldrb	r2, [r7, #3]
 80051f2:	4611      	mov	r1, r2
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7fb fd4f 	bl	8000c98 <HAL_PCD_EP_ClrStall>
 80051fa:	4603      	mov	r3, r0
 80051fc:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80051fe:	7bfb      	ldrb	r3, [r7, #15]
 8005200:	4618      	mov	r0, r3
 8005202:	f000 f8b1 	bl	8005368 <USBD_Get_USB_Status>
 8005206:	4603      	mov	r3, r0
 8005208:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 800520a:	7bbb      	ldrb	r3, [r7, #14]
}
 800520c:	4618      	mov	r0, r3
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	460b      	mov	r3, r1
 800521e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005226:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8005228:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800522c:	2b00      	cmp	r3, #0
 800522e:	da08      	bge.n	8005242 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005230:	78fb      	ldrb	r3, [r7, #3]
 8005232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	015b      	lsls	r3, r3, #5
 800523a:	4413      	add	r3, r2
 800523c:	332a      	adds	r3, #42	; 0x2a
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	e008      	b.n	8005254 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005242:	78fb      	ldrb	r3, [r7, #3]
 8005244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	015b      	lsls	r3, r3, #5
 800524c:	4413      	add	r3, r2
 800524e:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8005252:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005254:	4618      	mov	r0, r3
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	bc80      	pop	{r7}
 800525c:	4770      	bx	lr

0800525e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800525e:	b580      	push	{r7, lr}
 8005260:	b084      	sub	sp, #16
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
 8005266:	460b      	mov	r3, r1
 8005268:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800526a:	2300      	movs	r3, #0
 800526c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800526e:	2300      	movs	r3, #0
 8005270:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005278:	78fa      	ldrb	r2, [r7, #3]
 800527a:	4611      	mov	r1, r2
 800527c:	4618      	mov	r0, r3
 800527e:	f7fb fb77 	bl	8000970 <HAL_PCD_SetAddress>
 8005282:	4603      	mov	r3, r0
 8005284:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005286:	7bfb      	ldrb	r3, [r7, #15]
 8005288:	4618      	mov	r0, r3
 800528a:	f000 f86d 	bl	8005368 <USBD_Get_USB_Status>
 800528e:	4603      	mov	r3, r0
 8005290:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005292:	7bbb      	ldrb	r3, [r7, #14]
}
 8005294:	4618      	mov	r0, r3
 8005296:	3710      	adds	r7, #16
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}

0800529c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	607a      	str	r2, [r7, #4]
 80052a6:	461a      	mov	r2, r3
 80052a8:	460b      	mov	r3, r1
 80052aa:	72fb      	strb	r3, [r7, #11]
 80052ac:	4613      	mov	r3, r2
 80052ae:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80052b0:	2300      	movs	r3, #0
 80052b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80052b4:	2300      	movs	r3, #0
 80052b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80052be:	893b      	ldrh	r3, [r7, #8]
 80052c0:	7af9      	ldrb	r1, [r7, #11]
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	f7fb fc55 	bl	8000b72 <HAL_PCD_EP_Transmit>
 80052c8:	4603      	mov	r3, r0
 80052ca:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80052cc:	7dfb      	ldrb	r3, [r7, #23]
 80052ce:	4618      	mov	r0, r3
 80052d0:	f000 f84a 	bl	8005368 <USBD_Get_USB_Status>
 80052d4:	4603      	mov	r3, r0
 80052d6:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80052d8:	7dbb      	ldrb	r3, [r7, #22]
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3718      	adds	r7, #24
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b086      	sub	sp, #24
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	60f8      	str	r0, [r7, #12]
 80052ea:	607a      	str	r2, [r7, #4]
 80052ec:	461a      	mov	r2, r3
 80052ee:	460b      	mov	r3, r1
 80052f0:	72fb      	strb	r3, [r7, #11]
 80052f2:	4613      	mov	r3, r2
 80052f4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80052f6:	2300      	movs	r3, #0
 80052f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80052fa:	2300      	movs	r3, #0
 80052fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005304:	893b      	ldrh	r3, [r7, #8]
 8005306:	7af9      	ldrb	r1, [r7, #11]
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	f7fb fbf8 	bl	8000afe <HAL_PCD_EP_Receive>
 800530e:	4603      	mov	r3, r0
 8005310:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005312:	7dfb      	ldrb	r3, [r7, #23]
 8005314:	4618      	mov	r0, r3
 8005316:	f000 f827 	bl	8005368 <USBD_Get_USB_Status>
 800531a:	4603      	mov	r3, r0
 800531c:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800531e:	7dbb      	ldrb	r3, [r7, #22]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3718      	adds	r7, #24
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8005328:	b480      	push	{r7}
 800532a:	b083      	sub	sp, #12
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8005330:	4b02      	ldr	r3, [pc, #8]	; (800533c <USBD_static_malloc+0x14>)
}
 8005332:	4618      	mov	r0, r3
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	bc80      	pop	{r7}
 800533a:	4770      	bx	lr
 800533c:	20000168 	.word	0x20000168

08005340 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]

}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	bc80      	pop	{r7}
 8005350:	4770      	bx	lr

08005352 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005352:	b480      	push	{r7}
 8005354:	b083      	sub	sp, #12
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
 800535a:	460b      	mov	r3, r1
 800535c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800535e:	bf00      	nop
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	bc80      	pop	{r7}
 8005366:	4770      	bx	lr

08005368 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	4603      	mov	r3, r0
 8005370:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005372:	2300      	movs	r3, #0
 8005374:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005376:	79fb      	ldrb	r3, [r7, #7]
 8005378:	2b03      	cmp	r3, #3
 800537a:	d817      	bhi.n	80053ac <USBD_Get_USB_Status+0x44>
 800537c:	a201      	add	r2, pc, #4	; (adr r2, 8005384 <USBD_Get_USB_Status+0x1c>)
 800537e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005382:	bf00      	nop
 8005384:	08005395 	.word	0x08005395
 8005388:	0800539b 	.word	0x0800539b
 800538c:	080053a1 	.word	0x080053a1
 8005390:	080053a7 	.word	0x080053a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005394:	2300      	movs	r3, #0
 8005396:	73fb      	strb	r3, [r7, #15]
    break;
 8005398:	e00b      	b.n	80053b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800539a:	2302      	movs	r3, #2
 800539c:	73fb      	strb	r3, [r7, #15]
    break;
 800539e:	e008      	b.n	80053b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80053a0:	2301      	movs	r3, #1
 80053a2:	73fb      	strb	r3, [r7, #15]
    break;
 80053a4:	e005      	b.n	80053b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80053a6:	2302      	movs	r3, #2
 80053a8:	73fb      	strb	r3, [r7, #15]
    break;
 80053aa:	e002      	b.n	80053b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80053ac:	2302      	movs	r3, #2
 80053ae:	73fb      	strb	r3, [r7, #15]
    break;
 80053b0:	bf00      	nop
  }
  return usb_status;
 80053b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3714      	adds	r7, #20
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bc80      	pop	{r7}
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop

080053c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	4603      	mov	r3, r0
 80053c8:	6039      	str	r1, [r7, #0]
 80053ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	2212      	movs	r2, #18
 80053d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80053d2:	4b03      	ldr	r3, [pc, #12]	; (80053e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	bc80      	pop	{r7}
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	20000114 	.word	0x20000114

080053e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	4603      	mov	r3, r0
 80053ec:	6039      	str	r1, [r7, #0]
 80053ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	2204      	movs	r2, #4
 80053f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80053f6:	4b03      	ldr	r3, [pc, #12]	; (8005404 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bc80      	pop	{r7}
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	20000128 	.word	0x20000128

08005408 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
 800540e:	4603      	mov	r3, r0
 8005410:	6039      	str	r1, [r7, #0]
 8005412:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005414:	79fb      	ldrb	r3, [r7, #7]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d105      	bne.n	8005426 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	4907      	ldr	r1, [pc, #28]	; (800543c <USBD_FS_ProductStrDescriptor+0x34>)
 800541e:	4808      	ldr	r0, [pc, #32]	; (8005440 <USBD_FS_ProductStrDescriptor+0x38>)
 8005420:	f7ff fa83 	bl	800492a <USBD_GetString>
 8005424:	e004      	b.n	8005430 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	4904      	ldr	r1, [pc, #16]	; (800543c <USBD_FS_ProductStrDescriptor+0x34>)
 800542a:	4805      	ldr	r0, [pc, #20]	; (8005440 <USBD_FS_ProductStrDescriptor+0x38>)
 800542c:	f7ff fa7d 	bl	800492a <USBD_GetString>
  }
  return USBD_StrDesc;
 8005430:	4b02      	ldr	r3, [pc, #8]	; (800543c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005432:	4618      	mov	r0, r3
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	200006f0 	.word	0x200006f0
 8005440:	080056ac 	.word	0x080056ac

08005444 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	4603      	mov	r3, r0
 800544c:	6039      	str	r1, [r7, #0]
 800544e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	4904      	ldr	r1, [pc, #16]	; (8005464 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005454:	4804      	ldr	r0, [pc, #16]	; (8005468 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005456:	f7ff fa68 	bl	800492a <USBD_GetString>
  return USBD_StrDesc;
 800545a:	4b02      	ldr	r3, [pc, #8]	; (8005464 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800545c:	4618      	mov	r0, r3
 800545e:	3708      	adds	r7, #8
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	200006f0 	.word	0x200006f0
 8005468:	080056c4 	.word	0x080056c4

0800546c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	4603      	mov	r3, r0
 8005474:	6039      	str	r1, [r7, #0]
 8005476:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	221a      	movs	r2, #26
 800547c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800547e:	f000 f843 	bl	8005508 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005482:	4b02      	ldr	r3, [pc, #8]	; (800548c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005484:	4618      	mov	r0, r3
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	2000012c 	.word	0x2000012c

08005490 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
 8005496:	4603      	mov	r3, r0
 8005498:	6039      	str	r1, [r7, #0]
 800549a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800549c:	79fb      	ldrb	r3, [r7, #7]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d105      	bne.n	80054ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	4907      	ldr	r1, [pc, #28]	; (80054c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80054a6:	4808      	ldr	r0, [pc, #32]	; (80054c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80054a8:	f7ff fa3f 	bl	800492a <USBD_GetString>
 80054ac:	e004      	b.n	80054b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	4904      	ldr	r1, [pc, #16]	; (80054c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80054b2:	4805      	ldr	r0, [pc, #20]	; (80054c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80054b4:	f7ff fa39 	bl	800492a <USBD_GetString>
  }
  return USBD_StrDesc;
 80054b8:	4b02      	ldr	r3, [pc, #8]	; (80054c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	200006f0 	.word	0x200006f0
 80054c8:	080056d8 	.word	0x080056d8

080054cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	4603      	mov	r3, r0
 80054d4:	6039      	str	r1, [r7, #0]
 80054d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80054d8:	79fb      	ldrb	r3, [r7, #7]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d105      	bne.n	80054ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80054de:	683a      	ldr	r2, [r7, #0]
 80054e0:	4907      	ldr	r1, [pc, #28]	; (8005500 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80054e2:	4808      	ldr	r0, [pc, #32]	; (8005504 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80054e4:	f7ff fa21 	bl	800492a <USBD_GetString>
 80054e8:	e004      	b.n	80054f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80054ea:	683a      	ldr	r2, [r7, #0]
 80054ec:	4904      	ldr	r1, [pc, #16]	; (8005500 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80054ee:	4805      	ldr	r0, [pc, #20]	; (8005504 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80054f0:	f7ff fa1b 	bl	800492a <USBD_GetString>
  }
  return USBD_StrDesc;
 80054f4:	4b02      	ldr	r3, [pc, #8]	; (8005500 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	200006f0 	.word	0x200006f0
 8005504:	080056e4 	.word	0x080056e4

08005508 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800550e:	4b0f      	ldr	r3, [pc, #60]	; (800554c <Get_SerialNum+0x44>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005514:	4b0e      	ldr	r3, [pc, #56]	; (8005550 <Get_SerialNum+0x48>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800551a:	4b0e      	ldr	r3, [pc, #56]	; (8005554 <Get_SerialNum+0x4c>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4413      	add	r3, r2
 8005526:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d009      	beq.n	8005542 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800552e:	2208      	movs	r2, #8
 8005530:	4909      	ldr	r1, [pc, #36]	; (8005558 <Get_SerialNum+0x50>)
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f000 f814 	bl	8005560 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005538:	2204      	movs	r2, #4
 800553a:	4908      	ldr	r1, [pc, #32]	; (800555c <Get_SerialNum+0x54>)
 800553c:	68b8      	ldr	r0, [r7, #8]
 800553e:	f000 f80f 	bl	8005560 <IntToUnicode>
  }
}
 8005542:	bf00      	nop
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	1ffff7e8 	.word	0x1ffff7e8
 8005550:	1ffff7ec 	.word	0x1ffff7ec
 8005554:	1ffff7f0 	.word	0x1ffff7f0
 8005558:	2000012e 	.word	0x2000012e
 800555c:	2000013e 	.word	0x2000013e

08005560 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005560:	b480      	push	{r7}
 8005562:	b087      	sub	sp, #28
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	4613      	mov	r3, r2
 800556c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800556e:	2300      	movs	r3, #0
 8005570:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005572:	2300      	movs	r3, #0
 8005574:	75fb      	strb	r3, [r7, #23]
 8005576:	e027      	b.n	80055c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	0f1b      	lsrs	r3, r3, #28
 800557c:	2b09      	cmp	r3, #9
 800557e:	d80b      	bhi.n	8005598 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	0f1b      	lsrs	r3, r3, #28
 8005584:	b2da      	uxtb	r2, r3
 8005586:	7dfb      	ldrb	r3, [r7, #23]
 8005588:	005b      	lsls	r3, r3, #1
 800558a:	4619      	mov	r1, r3
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	440b      	add	r3, r1
 8005590:	3230      	adds	r2, #48	; 0x30
 8005592:	b2d2      	uxtb	r2, r2
 8005594:	701a      	strb	r2, [r3, #0]
 8005596:	e00a      	b.n	80055ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	0f1b      	lsrs	r3, r3, #28
 800559c:	b2da      	uxtb	r2, r3
 800559e:	7dfb      	ldrb	r3, [r7, #23]
 80055a0:	005b      	lsls	r3, r3, #1
 80055a2:	4619      	mov	r1, r3
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	440b      	add	r3, r1
 80055a8:	3237      	adds	r2, #55	; 0x37
 80055aa:	b2d2      	uxtb	r2, r2
 80055ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	011b      	lsls	r3, r3, #4
 80055b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80055b4:	7dfb      	ldrb	r3, [r7, #23]
 80055b6:	005b      	lsls	r3, r3, #1
 80055b8:	3301      	adds	r3, #1
 80055ba:	68ba      	ldr	r2, [r7, #8]
 80055bc:	4413      	add	r3, r2
 80055be:	2200      	movs	r2, #0
 80055c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80055c2:	7dfb      	ldrb	r3, [r7, #23]
 80055c4:	3301      	adds	r3, #1
 80055c6:	75fb      	strb	r3, [r7, #23]
 80055c8:	7dfa      	ldrb	r2, [r7, #23]
 80055ca:	79fb      	ldrb	r3, [r7, #7]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d3d3      	bcc.n	8005578 <IntToUnicode+0x18>
  }
}
 80055d0:	bf00      	nop
 80055d2:	371c      	adds	r7, #28
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bc80      	pop	{r7}
 80055d8:	4770      	bx	lr
	...

080055dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80055dc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80055de:	e003      	b.n	80055e8 <LoopCopyDataInit>

080055e0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80055e0:	4b0b      	ldr	r3, [pc, #44]	; (8005610 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80055e2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80055e4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80055e6:	3104      	adds	r1, #4

080055e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80055e8:	480a      	ldr	r0, [pc, #40]	; (8005614 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80055ea:	4b0b      	ldr	r3, [pc, #44]	; (8005618 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80055ec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80055ee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80055f0:	d3f6      	bcc.n	80055e0 <CopyDataInit>
  ldr r2, =_sbss
 80055f2:	4a0a      	ldr	r2, [pc, #40]	; (800561c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80055f4:	e002      	b.n	80055fc <LoopFillZerobss>

080055f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80055f6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80055f8:	f842 3b04 	str.w	r3, [r2], #4

080055fc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80055fc:	4b08      	ldr	r3, [pc, #32]	; (8005620 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80055fe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005600:	d3f9      	bcc.n	80055f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005602:	f7ff fc0b 	bl	8004e1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005606:	f000 f80f 	bl	8005628 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800560a:	f7ff fa4d 	bl	8004aa8 <main>
  bx lr
 800560e:	4770      	bx	lr
  ldr r3, =_sidata
 8005610:	0800570c 	.word	0x0800570c
  ldr r0, =_sdata
 8005614:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8005618:	20000148 	.word	0x20000148
  ldr r2, =_sbss
 800561c:	20000148 	.word	0x20000148
  ldr r3, = _ebss
 8005620:	200008f0 	.word	0x200008f0

08005624 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005624:	e7fe      	b.n	8005624 <ADC1_2_IRQHandler>
	...

08005628 <__libc_init_array>:
 8005628:	b570      	push	{r4, r5, r6, lr}
 800562a:	2500      	movs	r5, #0
 800562c:	4e0c      	ldr	r6, [pc, #48]	; (8005660 <__libc_init_array+0x38>)
 800562e:	4c0d      	ldr	r4, [pc, #52]	; (8005664 <__libc_init_array+0x3c>)
 8005630:	1ba4      	subs	r4, r4, r6
 8005632:	10a4      	asrs	r4, r4, #2
 8005634:	42a5      	cmp	r5, r4
 8005636:	d109      	bne.n	800564c <__libc_init_array+0x24>
 8005638:	f000 f822 	bl	8005680 <_init>
 800563c:	2500      	movs	r5, #0
 800563e:	4e0a      	ldr	r6, [pc, #40]	; (8005668 <__libc_init_array+0x40>)
 8005640:	4c0a      	ldr	r4, [pc, #40]	; (800566c <__libc_init_array+0x44>)
 8005642:	1ba4      	subs	r4, r4, r6
 8005644:	10a4      	asrs	r4, r4, #2
 8005646:	42a5      	cmp	r5, r4
 8005648:	d105      	bne.n	8005656 <__libc_init_array+0x2e>
 800564a:	bd70      	pop	{r4, r5, r6, pc}
 800564c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005650:	4798      	blx	r3
 8005652:	3501      	adds	r5, #1
 8005654:	e7ee      	b.n	8005634 <__libc_init_array+0xc>
 8005656:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800565a:	4798      	blx	r3
 800565c:	3501      	adds	r5, #1
 800565e:	e7f2      	b.n	8005646 <__libc_init_array+0x1e>
 8005660:	08005704 	.word	0x08005704
 8005664:	08005704 	.word	0x08005704
 8005668:	08005704 	.word	0x08005704
 800566c:	08005708 	.word	0x08005708

08005670 <memset>:
 8005670:	4603      	mov	r3, r0
 8005672:	4402      	add	r2, r0
 8005674:	4293      	cmp	r3, r2
 8005676:	d100      	bne.n	800567a <memset+0xa>
 8005678:	4770      	bx	lr
 800567a:	f803 1b01 	strb.w	r1, [r3], #1
 800567e:	e7f9      	b.n	8005674 <memset+0x4>

08005680 <_init>:
 8005680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005682:	bf00      	nop
 8005684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005686:	bc08      	pop	{r3}
 8005688:	469e      	mov	lr, r3
 800568a:	4770      	bx	lr

0800568c <_fini>:
 800568c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800568e:	bf00      	nop
 8005690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005692:	bc08      	pop	{r3}
 8005694:	469e      	mov	lr, r3
 8005696:	4770      	bx	lr
